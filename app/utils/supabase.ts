import { createClient } from "@supabase/supabase-js";

// These environment variables would typically be set in your project
// For production, use proper environment variable configuration
const supabaseUrl =
	process.env.NEXT_PUBLIC_SUPABASE_URL || "https://example.supabase.co";
const supabaseKey =
	process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || "your-anon-key";

// Create a single supabase client for the entire application
export const supabase = createClient(supabaseUrl, supabaseKey);

// Interface definitions based on your specifications
export interface Section {
	heading: string[];
	children: (SectionContainer | string)[];
	summary: string[];
	longSummary: string[];
	imageUrl?: string;
}

export type SectionContainer = Section[];

export interface Document {
	title: string[];
	summary: string[];
	longSummary: string[];
	children: SectionContainer;
}

// Example: Fetch document by title
export async function fetchDocumentByTitle(
	title: string
): Promise<Document | null> {
	try {
		const { data, error } = await supabase
			.from("documents")
			.select("document")
			.eq("title", title)
			.single();

		if (error) throw error;
		return data?.document as Document;
	} catch (error) {
		console.error("Error fetching document:", error);
		return null;
	}
}

// Mock data implementation for development
export function getMockDocument(): Document {
	// This is an example mock document that follows your structure
	const mockDocument: Document = {
		title: ["The Story of Everything"],
		summary: ["A journey from the Big Bang to consciousness"],
		longSummary: [
			"This comprehensive book takes you through the entire history of the universe, from the first moments after the Big Bang, through the formation of stars and planets, to the emergence of life and consciousness on Earth.",
		],
		children: [
			{
				heading: ["The Beginning of Time"],
				summary: [
					"How the universe came to be in its earliest moments.",
				],
				longSummary: [
					"This chapter explores the fascinating theories about the birth of our universe, from the Big Bang to inflation theory. We examine the evidence from cosmic background radiation and what it tells us about the universe's origins. The chapter also discusses how the fundamental forces of nature emerged in the first fractions of a second after creation.",
				],
				directContent: [],
				children: [
					{
						heading: ["The Big Bang Theory"],
						summary: [
							"Evidence and development of the Big Bang model.",
						],
						longSummary: [
							"The Big Bang theory is the prevailing cosmological model explaining the existence of the observable universe from the earliest known periods through its subsequent large-scale evolution. The model describes how the universe expanded from an initial state of high density and temperature, and offers a comprehensive explanation for a broad range of observed phenomena.",
						],
						directContent: [
							"The theory was initially proposed by Georges Lemaître in 1927.",
						],
						children: [
							{
								heading: ["Historical Development"],
								summary: [
									"How the Big Bang theory evolved over time.",
								],
								longSummary: [
									"The concept of the Big Bang has evolved significantly since it was first proposed, incorporating new observations and theoretical developments in physics.",
								],
								directContent: [
									"The term 'Big Bang' was coined by Fred Hoyle during a radio broadcast in 1949.",
								],
								children: [] as string[],
							},
							{
								heading: ["Observable Evidence"],
								summary: [
									"Key observations supporting the Big Bang theory.",
								],
								longSummary: [
									"Multiple lines of observational evidence support the Big Bang theory, including cosmic microwave background radiation, the abundance of light elements, and the redshift of distant galaxies.",
								],
								directContent: [
									"The cosmic microwave background radiation, discovered in 1965, is considered the strongest evidence for the Big Bang.",
								],
								children: [] as string[],
							},
						],
					},
					{
						heading: ["The First Three Minutes"],
						summary: [
							"What happened immediately after the Big Bang.",
						],
						longSummary: [
							"The first three minutes after the Big Bang were crucial for the development of the universe as we know it. During this brief period, the fundamental forces separated, quarks formed hadrons, and light elements began to form.",
						],
						directContent: [],
						children: [
							{
								heading: ["Planck Epoch"],
								summary: [
									"The earliest known period of the universe.",
								],
								longSummary: [
									"During the Planck epoch, from zero to approximately 10^-43 seconds after the Big Bang, all four fundamental forces were unified as a single force.",
								],
								directContent: [
									"This epoch is named after Max Planck, the founder of quantum theory.",
								],
								children: [] as string[],
							},
							{
								heading: ["Inflationary Period"],
								summary: [
									"The rapid expansion of the early universe.",
								],
								longSummary: [
									"The inflationary period was an extremely rapid expansion of the universe that occurred between 10^-36 to 10^-32 seconds after the Big Bang.",
								],
								directContent: [
									"Cosmic inflation explains why the universe appears flat and uniform at large scales.",
								],
								children: [] as string[],
							},
						],
					},
					{
						heading: ["Formation of Fundamental Forces"],
						summary: ["How the four fundamental forces separated."],
						longSummary: [
							"The four fundamental forces—gravity, electromagnetism, the strong nuclear force, and the weak nuclear force—were unified in the extreme heat of the early universe and separated as the universe cooled.",
						],
						directContent: [],
						children: [
							{
								heading: ["Symmetry Breaking"],
								summary: ["The process of force separation."],
								longSummary: [
									"Symmetry breaking is a phenomenon in which the universe transitions from a symmetric state to one with reduced symmetry, allowing the fundamental forces to separate.",
								],
								directContent: [
									"The concept of symmetry breaking in physics was developed by Yoichiro Nambu in the 1960s.",
								],
								children: [] as string[],
							},
							{
								heading: ["Electroweak Separation"],
								summary: [
									"The separation of electromagnetic and weak forces.",
								],
								longSummary: [
									"The electroweak interaction is the unified description of two of the four fundamental forces: electromagnetism and the weak interaction.",
								],
								directContent: [
									"The electroweak theory was developed by Sheldon Glashow, Abdus Salam, and Steven Weinberg, who shared the 1979 Nobel Prize in Physics for this work.",
								],
								children: [] as string[],
							},
						],
					},
				],
			},
			{
				heading: ["The Rise of Complexity"],
				summary: ["From simple atoms to the first complex molecules."],
				longSummary: [
					"Following the initial expansion and cooling of the universe, this chapter tracks how simple hydrogen and helium atoms formed, then clustered into stars where nuclear fusion created heavier elements. We explore stellar lifecycles and how supernovae scattered these elements across space, enabling the formation of planets and eventually complex organic molecules.",
				],
				directContent: [],
				children: [
					{
						heading: ["Element Formation in Stars"],
						summary: ["How fusion creates heavier elements."],
						longSummary: [
							"Stars act as cosmic factories, fusing lighter elements into heavier ones through nuclear fusion. This process, known as stellar nucleosynthesis, is responsible for creating most of the elements in the universe.",
						],
						directContent: [],
						children: [
							{
								heading: ["Hydrogen Fusion"],
								summary: [
									"The primary energy source in main sequence stars.",
								],
								longSummary: [
									"Hydrogen fusion is the process by which four hydrogen nuclei combine to form a helium nucleus, releasing energy that powers stars like our sun.",
								],
								directContent: [
									"The primary fusion path in our sun is called the proton-proton chain.",
								],
								children: [] as string[],
							},
							{
								heading: ["Helium Burning"],
								summary: ["The next stage of stellar fusion."],
								longSummary: [
									"When stars exhaust their hydrogen fuel, they begin to fuse helium into carbon and oxygen in a process called helium burning or the triple-alpha process.",
								],
								directContent: [
									"Helium burning typically occurs at temperatures around 100 million Kelvin.",
								],
								children: [] as string[],
							},
						],
					},
					{
						heading: ["Supernovae and Element Dispersal"],
						summary: ["How elements spread throughout galaxies."],
						longSummary: [
							"Supernovae are powerful explosions that mark the end of a star's life. These cosmic events distribute heavy elements throughout space, enriching the interstellar medium with the building blocks for new stars, planets, and eventually life.",
						],
						directContent: [],
						children: [
							{
								heading: ["Types of Supernovae"],
								summary: [
									"Different mechanisms for stellar explosions.",
								],
								longSummary: [
									"There are two main types of supernovae: Type Ia, which occur in binary star systems when a white dwarf accretes material from its companion; and Type II, which result from the collapse of massive stars.",
								],
								directContent: [
									"Type Ia supernovae are used as 'standard candles' to measure cosmic distances.",
								],
								children: [] as string[],
							},
							{
								heading: ["Heavy Element Creation"],
								summary: [
									"Formation of elements heavier than iron.",
								],
								longSummary: [
									"Elements heavier than iron cannot be produced through fusion in stellar cores because these reactions would consume rather than release energy. Instead, these elements form during supernovae through rapid neutron capture processes.",
								],
								directContent: [
									"Gold, platinum, and uranium are primarily created in neutron star mergers and supernovae.",
								],
								children: [] as string[],
							},
						],
					},
				],
			},
			{
				heading: ["The Emergence of Life"],
				summary: [
					"How chemistry transformed into biology on early Earth.",
				],
				longSummary: [
					"This chapter examines the conditions of early Earth and how they facilitated the transition from complex organic chemistry to self-replicating systems. We explore leading theories about the origin of life, from deep-sea hydrothermal vents to RNA world hypotheses, and how the first primitive cells may have developed their basic metabolic processes and protective membranes.",
				],
				directContent: [],
				children: [
					{
						heading: ["Prebiotic Chemistry"],
						summary: ["Chemical precursors to biological systems."],
						longSummary: [
							"Prebiotic chemistry refers to the chemical reactions that occurred on early Earth before the emergence of life, producing the organic compounds necessary for biological processes.",
						],
						directContent: [],
						children: [
							{
								heading: ["Miller-Urey Experiment"],
								summary: ["Simulating early Earth conditions."],
								longSummary: [
									"The Miller-Urey experiment, conducted in 1952, demonstrated that organic compounds including amino acids could be synthesized from simple inorganic precursors under conditions simulating early Earth's atmosphere.",
								],
								directContent: [
									"The experiment produced at least 11 of the 20 amino acids used in proteins by living organisms.",
								],
								children: [] as string[],
							},
							{
								heading: ["Formation of Amino Acids"],
								summary: ["Building blocks of proteins."],
								longSummary: [
									"Amino acids, the building blocks of proteins, could have formed on early Earth through various mechanisms, including atmospheric reactions, hydrothermal vents, and extraterrestrial delivery via meteorites.",
								],
								directContent: [
									"Amino acids have been found in meteorites, suggesting they may be common throughout the universe.",
								],
								children: [] as string[],
							},
						],
					},
					{
						heading: ["RNA World Hypothesis"],
						summary: [
							"RNA as the original self-replicating molecule.",
						],
						longSummary: [
							"The RNA world hypothesis suggests that before DNA and proteins, life was based on RNA molecules that could both store genetic information and catalyze chemical reactions.",
						],
						directContent: [],
						children: [
							{
								heading: ["RNA Catalysis"],
								summary: ["RNA molecules acting as enzymes."],
								longSummary: [
									"Ribozymes are RNA molecules that can catalyze chemical reactions, similar to protein enzymes. Their discovery supported the RNA world hypothesis by showing that RNA could have both carried genetic information and facilitated metabolism.",
								],
								directContent: [
									"The discovery of ribozymes by Thomas Cech and Sidney Altman earned them the Nobel Prize in Chemistry in 1989.",
								],
								children: [] as string[],
							},
							{
								heading: ["From RNA to DNA"],
								summary: ["The transition to modern genetics."],
								longSummary: [
									"The transition from an RNA-based world to the DNA-protein world we see today likely occurred gradually, with DNA evolving as a more stable storage medium for genetic information and proteins taking over most catalytic functions.",
								],
								directContent: [
									"DNA is more stable than RNA because its sugar component lacks an oxygen atom, making it less prone to degradation.",
								],
								children: [] as string[],
							},
						],
					},
					{
						heading: ["First Cell Membranes"],
						summary: [
							"Development of contained biological systems.",
						],
						longSummary: [
							"Cell membranes were crucial for the origin of life, providing enclosed environments where biochemical reactions could occur concentrated and protected from the external environment.",
						],
						directContent: [],
						children: [
							{
								heading: ["Lipid Formation"],
								summary: ["Self-assembling molecules."],
								longSummary: [
									"Lipids can spontaneously form bilayers in water due to their amphipathic nature, with hydrophilic heads facing the water and hydrophobic tails clustering together. This self-assembly property may have facilitated the formation of the first cell membranes.",
								],
								directContent: [
									"Simple lipids can form spontaneously under prebiotic conditions.",
								],
								children: [] as string[],
							},
							{
								heading: ["Protocells"],
								summary: ["Primitive cell-like structures."],
								longSummary: [
									"Protocells were simple membrane-bound compartments that preceded true cells, potentially providing environments where early metabolic reactions and replication could occur with some isolation from the external environment.",
								],
								directContent: [
									"Laboratory experiments have created protocells capable of growth and division.",
								],
								children: [] as string[],
							},
						],
					},
				],
			},
		],
	};

	const accelerateChapter1: Document = {
		title: ["CHAPTER 1", "ACCELERATE"],
		children: [
			{
				heading: ["FOCUS ON CAPABILITIES, NOT MATURITY"],
				children: [
					"Technology leaders need to deliver software quickly and reliably to win in the market. For many companies, this requires significant changes to the way we deliver software. The key to successful change is measuring and understanding the right things with a focus on capabilities—not on maturity.",
					"While maturity models are very popular in the industry, we cannot stress enough that maturity models are not the appropriate tool to use or mindset to have. Instead, shifting to a capabilities model of measurement is essential for organizations wanting to accelerate software delivery. This is due to four factors.",
					"First, maturity models focus on helping an organization “arrive” at a mature state and then declare themselves done with their journey, whereas technology transformations should follow a continuous improvement paradigm. Alternatively, capability models focus on helping an organization continually improve and progress, realizing that the technological and business landscape is ever-changing. The most innovative companies and highest-performing organizations are always striving to be better and never consider themselves “mature” or “done” with their improvement or transformation journey—and we see this in our research.",
					"Second, maturity models are quite often a “lock-step” or linear formula, prescribing a similar set of technologies, tooling, or capabilities for every set of teams and organizations to progress through. Maturity models assume that “Level 1” and “Level 2” look the same across all teams and organizations, but those of us who work in technology know this is not the case. In contrast, capability models are multidimensional and dynamic, allowing different parts of the organization to take a customized approach to improvement, and focus on capabilities that will give them the most benefit based on their current context and their short and long-term goals. Teams have their own context, their own systems, their own goals, and their own constraints, and what we should focus on next to accelerate our transformation depends on those things.",
					"Third, capability models focus on key outcomes and how the capabilities, or levers, drive improvement in those outcomes—that is, they are outcome based. This provides technical leadership with clear direction and strategy on high-level goals (with a focus on capabilities to improve key outcomes). It also enables team leaders and individual contributors to set improvement goals related to the capabilities their team is focusing on for the current time period. Most maturity models simply measure the technical proficiency or tooling install base in an organization without tying it to outcomes. These end up being vanity metrics: while they can be relatively easy to measure, they don’t tell us anything about the impact they have on the business.",
					"Fourth, maturity models define a static level of technological, process, and organizational abilities to achieve. They do not take into account the ever-changing nature of the technology and business landscape. Our own research and data have confirmed that the industry is changing: what is good enough and even “high-performing” today is no longer good enough in the next year. In contrast, capability models allow for dynamically changing environments and allow teams and organizations to focus on developing the skills and capabilities needed to remain competitive.",
					"By focusing on a capabilities paradigm, organizations can continuously drive improvement. And by focusing on the right capabilities, organizations can drive improvements in their outcomes, allowing them to develop and deliver software with improved speed and stability. In fact, we see that the highest performers do exactly this, continually reaching for gains year over year and never settling for yesterday’s accomplishments.",
				],
				summary: [
					"Focus on capabilities, not maturity, to deliver software faster and more reliably.",
				],
				longSummary: [
					"To succeed in the market, technology leaders must deliver software quickly and reliably, necessitating changes in delivery methods. The focus should be on measuring capabilities rather than maturity. Maturity models are inadequate because they emphasize a final state over continuous improvement, enforce linear approaches instead of allowing customized progress, measure technical skills without linking to business outcomes, and define static abilities rather than adapting to changes. By concentrating on capabilities, organizations can continuously enhance outcomes, delivering software with greater speed and stability. Top performers consistently strive for improvement, never resting on past achievements.",
				],
				imageUrl:
					"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747118087/blog-cover-images/vurzbjckk1ortnfucjxx.webp",
			},
			{
				heading: [
					"EVIDENCE-BASED TRANSFORMATIONS FOCUS ON KEY CAPABILITIES",
				],
				children: [
					"Within both capability and maturity model frameworks, there are disagreements about which capabilities to focus on. Product vendors often favor capabilities that align with their product offerings. Consultants favor capabilities that align with their background, their offering, and their homegrown assessment tool. We have seen organizations try to design their own assessment models, choose solutions that align with the skill sets of internal champions, or succumb to analysis paralysis because of the sheer number of areas that need improvement in their organization.",
					"A more guided, evidence-based solution is needed, and the approach discussed in this book describes such a solution.",
					"Our research has yielded insights into what enables both software delivery performance and organizational performance as seen in profitability, productivity, and market share. In fact, our research shows that none of the following often-cited factors predicted performance:",
					"-   age and technology used for the application (for example, mainframe “systems of record” vs. greenfield “systems of engagement”)\n-   whether operations teams or development teams performed deployments\n-   whether a change approval board (CAB) is implemented",
					"The things that do make a difference in the success of software delivery and organizational performance are those that the highest performers and most innovative companies use to get ahead. Our research has identified 24 key capabilities that drive improvement in software delivery performance and, in turn, organizational performance. These capabilities are easy to define, measure, and improve.[1](blob:https://johnfactotum.github.io/b23d1f9e-06ce-4628-b67b-e1d158a07526#F1) This book will get you started on defining and measuring these capabilities. We will also point you to some fantastic resources for improving them, so you can accelerate your own technology transformation journey.",
				],
				summary: [
					"Discover 24 key capabilities driving top software delivery and organizational performance improvements.",
				],
				longSummary: [
					"In capability and maturity model frameworks, there's debate over which capabilities to prioritize, often influenced by product vendors and consultants promoting their own offerings. Organizations frequently struggle by creating their own assessment models, relying on internal champions' skills, or getting stuck in analysis paralysis due to numerous improvement areas. This book offers a guided, evidence-based solution, revealing that software delivery and organizational performance aren't determined by application age, technology, team type, or change approval boards. Instead, the top performers excel by utilizing 24 key capabilities that are straightforward to define, measure, and improve, with the book providing guidance and resources for enhancement.",
				],
				imageUrl:
					"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747118098/blog-cover-images/azi2mbmbehgxexfme1pk.webp",
			},
			{
				heading: ["THE VALUE OF ADOPTING DEVOPS"],
				children: [
					"You may be asking yourself: How do we know that these capabilities are drivers of technology and organizational performance, and why can we say it with such confidence?",
					"The findings from our research program show clearly that the value of adopting DevOps is even larger than we had initially thought, and the gap between high and low performers continues to grow.",
					"We discuss how we measure software delivery performance and how our cohort performs in detail in the following chapter. To summarize, in 2017 we found that, when compared to low performers, the high performers have:",
					"-   46 times more frequent code deployments\n-   440 times faster lead time from commit to deploy\n-   170 times faster mean time to recover from downtime\n-   5 times lower change failure rate (1/5 as likely for a change to fail)",
					"When compared to the 2016 results, the gap between high performers and low performers narrowed for tempo (deployment frequency and change lead time) and widened for stability (mean time to recover and change failure rate). We speculate that this is due to low-performing teams working to increase tempo but not investing enough in building quality into the process. The result is larger deployment failures that take more time to restore service. High performers understand that they don’t have to trade speed for stability or vice versa, because by building quality in they get both.",
					"You may be wondering: How do high-performing teams achieve such amazing software delivery performance? They do this by turning the right levers—that is, by improving the right capabilities.",
					"Over our four-year research program we have been able to identify the capabilities that drive performance in software delivery and impact organizational performance, and we have found that they work for all types of organizations. Our research investigated organizations of all sizes, in all industries, using legacy and greenfield technology stacks around the world—so the findings in this book will apply to the teams in your organization too.",
					"* * *",
					"[1](blob:https://johnfactotum.github.io/b23d1f9e-06ce-4628-b67b-e1d158a07526#Ch1)These 24 capabilities are listed, along with a pointer to the chapter that discusses them, in Appendix A.",
				],
				summary: [
					"DevOps boosts performance: high performers deploy faster, recover quicker, and maintain stability effortlessly.",
				],
				longSummary: [
					"Our research reveals that the benefits of adopting DevOps are greater than initially anticipated, with the disparity between high and low performers widening. In 2017, high performers achieved significantly more frequent code deployments, drastically faster lead times from commit to deploy, quicker recovery from downtime, and a lower change failure rate compared to low performers. Despite changes in tempo and stability since 2016, high performers demonstrate that speed and stability can coexist by integrating quality into their processes. Our four-year study identifies 24 key capabilities that enhance software delivery and organizational performance across various industries and technology stacks.",
				],
				imageUrl:
					"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747118108/blog-cover-images/fhlmmaoocmvvslyjr7cb.webp",
			},
		],
		summary: [
			"Unlock competitive edge: Embrace DevOps capabilities for rapid, reliable software delivery and transformation.",
		],
		longSummary: [
			"To stay competitive, organizations must shift from traditional, lengthy projects to agile methods, using small teams and rapid user feedback to deliver value quickly. Software is crucial in this transformation, with DevOps practices enabling the creation of secure, resilient systems at scale. Despite some success, 31% of the industry lacks essential practices like continuous integration and Lean principles. There's a disconnect between executive and practitioner views on DevOps maturity, emphasizing the need to measure capabilities rather than maturity. High performers excel by focusing on 24 key capabilities that enhance software delivery and organizational performance, achieving remarkable results without sacrificing stability. This book provides guidance on defining, measuring, and improving these capabilities, demonstrating that the benefits of DevOps are greater than initially realized.",
		],
	};

	const designing_data_intesive_2: Document = {
		title: ["Designing Data Intensive Applications"],
		summary: [],
		longSummary: [],
		children: [
			{
				heading: [
					"# **Chapter 1. Reliable, Scalable, and Maintainable Applications**",
				],
				children: [
					"> *The Internet was done so well that most people think of it as a natural resource like the Pacific Ocean, rather than something that was man-made. When was the last time a technology with a scale like that was so error-free?*",
					"> [Alan Kay](http://www.drdobbs.com/architecture-and-design/interview-with-alan-kay/240003442), in interview with *Dr Dobb’s Journal* (2012)",
					"![](blob:https://johnfactotum.github.io/98311b34-f5db-426c-af8f-f5320f18485f)",
					"Many applications today are *data-intensive*, as opposed to *compute-intensive*. Raw CPU power is rarely a limiting factor for these applications—bigger problems are usually the amount of data, the complexity of data, and the speed at which it is changing.",
					"A data-intensive application is typically built from standard building blocks that provide commonly needed functionality. For example, many applications need to:",
					"* Store data so that they, or another application, can find it again later (*databases*)",
					"* Remember the result of an expensive operation, to speed up reads (*caches*)",
					"* Allow users to search data by keyword or filter it in various ways (*search indexes*)",
					"* Send a message to another process, to be handled asynchronously (*stream processing*)",
					"* Periodically crunch a large amount of accumulated data (*batch processing*)",
					"If that sounds painfully obvious, that’s just because these *data systems* are such a successful abstraction: we use them all the time without thinking too much. When building an application, most engineers wouldn’t dream of writing a new data storage engine from scratch, because databases are a perfectly good tool for the job.",
					"But reality is not that simple. There are many database systems with different characteristics, because different applications have different requirements. There are various approaches to caching, several ways of building search indexes, and so on. When building an application, we still need to figure out which tools and which approaches are the most appropriate for the task at hand. And it can be hard to combine tools when you need to do something that a single tool cannot do alone.",
					"This book is a journey through both the principles and the practicalities of data systems, and how you can use them to build data-intensive applications. We will explore what different tools have in common, what distinguishes them, and how they achieve their characteristics.",
					"In this chapter, we will start by exploring the fundamentals of what we are trying to achieve: reliable, scalable, and maintainable data systems. We’ll clarify what those things mean, outline some ways of thinking about them, and go over the basics that we will need for later chapters. In the following chapters we will continue layer by layer, looking at different design decisions that need to be considered when working on a data-intensive application.",
					[
						{
							heading: ["# **Thinking About Data Systems**"],
							children: [
								"We typically think of databases, queues, caches, etc. as being very different categories of tools. Although a database and a message queue have some superficial similarity—both store data for some time—they have very different access patterns, which means different performance characteristics, and thus very different implementations.",
								"So why should we lump them all together under an umbrella term like *data systems*?",
								"Many new tools for data storage and processing have emerged in recent years. They are optimized for a variety of different use cases, and they no longer neatly fit into traditional categories \\[[1]()\\]. For example, there are datastores that are also used as message queues (Redis), and there are message queues with database-like durability guarantees (Apache Kafka). The boundaries between the categories are becoming blurred.",
								"Secondly, increasingly many applications now have such demanding or wide-ranging requirements that a single tool can no longer meet all of its data processing and storage needs. Instead, the work is broken down into tasks that *can* be performed efficiently on a single tool, and those different tools are stitched together using application code.",
								"For example, if you have an application-managed caching layer (using Memcached or similar), or a full-text search server (such as Elasticsearch or Solr) separate from your main database, it is normally the application code’s responsibility to keep those caches and indexes in sync with the main database. [Figure 1-1](blob:https://johnfactotum.github.io/9d0f9c6d-5469-483b-94e3-d57d8bc53c62#fig_introduction_composite) gives a glimpse of what this may look like (we will go into detail in later chapters).",
								"![ddia 0101](blob:https://johnfactotum.github.io/a32155e3-9f73-4c51-9c9d-922ca8ad88be)",
								"###### *Figure 1-1. One possible architecture for a data system that combines several components.*",
								"When you combine several tools in order to provide a service, the service’s interface or application programming interface (API) usually hides those implementation details from clients. Now you have essentially created a new, special-purpose data system from smaller, general-purpose components. Your composite data system may provide certain guarantees: e.g., that the cache will be correctly invalidated or updated on writes so that outside clients see consistent results. You are now not only an application developer, but also a data system designer.",
								"If you are designing a data system or service, a lot of tricky questions arise. How do you ensure that the data remains correct and complete, even when things go wrong internally? How do you provide consistently good performance to clients, even when parts of your system are degraded? How do you scale to handle an increase in load? What does a good API for the service look like?",
								"There are many factors that may influence the design of a data system, including the skills and experience of the people involved, legacy system dependencies, the timescale for delivery, your organization’s tolerance of different kinds of risk, regulatory constraints, etc. Those factors depend very much on the situation.",
								"In this book, we focus on three concerns that are important in most software systems:",
								"Reliability",
								"The system should continue to work *correctly* (performing the correct function at the desired level of performance) even in the face of *adversity* (hardware or software faults, and even human error). See [“Reliability”](blob:https://johnfactotum.github.io/9d0f9c6d-5469-483b-94e3-d57d8bc53c62#sec_introduction_reliability).",
								"Scalability",
								"As the system *grows* (in data volume, traffic volume, or complexity), there should be reasonable ways of dealing with that growth. See [“Scalability”](blob:https://johnfactotum.github.io/9d0f9c6d-5469-483b-94e3-d57d8bc53c62#sec_introduction_scalability).",
								"Maintainability",
								"Over time, many different people will work on the system (engineering and operations, both maintaining current behavior and adapting the system to new use cases), and they should all be able to work on it *productively*. See [“Maintainability”](blob:https://johnfactotum.github.io/9d0f9c6d-5469-483b-94e3-d57d8bc53c62#sec_introduction_maintainability).",
								"These words are often cast around without a clear understanding of what they mean. In the interest of thoughtful engineering, we will spend the rest of this chapter exploring ways of thinking about reliability, scalability, and maintainability. Then, in the following chapters, we will look at various techniques, architectures, and algorithms that are used in order to achieve those goals.",
								"![ddia 0101](blob:https://johnfactotum.github.io/a32155e3-9f73-4c51-9c9d-922ca8ad88be)",
								"###### *Figure 1-1. One possible architecture for a data system that combines several components.*",
							],
							summary: [
								"Explore how to design reliable, scalable, and maintainable data systems with composite tools.",
							],
							longSummary: [
								"Databases, queues, and caches are increasingly overlapping due to new data storage and processing tools, leading to composite data systems that require application code to synchronize different components. As a developer, you also become a data system designer, tackling challenges in data correctness, performance, and scaling. This book addresses three critical concerns: reliability (ensuring correct operation under adversity), scalability (managing growth in volume or complexity), and maintainability (enabling productive collaboration over time). The upcoming chapters will delve into techniques, architectures, and algorithms to achieve these objectives.",
							],
							imageUrl:
								"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280080/blog-cover-images/fd1yugrsidpjzutrmajc.webp",
						},
						{
							heading: ["# **Reliability**"],
							children: [
								"Everybody has an intuitive idea of what it means for something to be reliable or unreliable. For software, typical expectations include:",
								"* The application performs the function that the user expected.",
								"* It can tolerate the user making mistakes or using the software in unexpected ways.",
								"* Its performance is good enough for the required use case, under the expected load and data volume.",
								"* The system prevents any unauthorized access and abuse.",
								"If all those things together mean “working correctly,” then we can understand *reliability* as meaning, roughly, “continuing to work correctly, even when things go wrong.”",
								"The things that can go wrong are called *faults*, and systems that anticipate faults and can cope with them are called *fault-tolerant* or *resilient*. The former term is slightly misleading: it suggests that we could make a system tolerant of every possible kind of fault, which in reality is not feasible. If the entire planet Earth (and all servers on it) were swallowed by a black hole, tolerance of that fault would require web hosting in space—good luck getting that budget item approved. So it only makes sense to talk about tolerating *certain types* of faults.",
								"Note that a fault is not the same as a failure \\[[2]()\\]. A fault is usually defined as one component of the system deviating from its spec, whereas a *failure* is when the system as a whole stops providing the required service to the user. It is impossible to reduce the probability of a fault to zero; therefore it is usually best to design fault-tolerance mechanisms that prevent faults from causing failures. In this book we cover several techniques for building reliable systems from unreliable parts.",
								"Counterintuitively, in such fault-tolerant systems, it can make sense to *increase* the rate of faults by triggering them deliberately—for example, by randomly killing individual processes without warning. Many critical bugs are actually due to poor error handling \\[[3]()\\]; by deliberately inducing faults, you ensure that the fault-tolerance machinery is continually exercised and tested, which can increase your confidence that faults will be handled correctly when they occur naturally. The Netflix *Chaos Monkey* \\[[4]()\\] is an example of this approach.",
								"Although we generally prefer tolerating faults over preventing faults, there are cases where prevention is better than cure (e.g., because no cure exists). This is the case with security matters, for example: if an attacker has compromised a system and gained access to sensitive data, that event cannot be undone. However, this book mostly deals with the kinds of faults that can be cured, as described in the following sections.",
								[
									{
										heading: ["## **Hardware Faults**"],
										children: [
											"When we think of causes of system failure, hardware faults quickly come to mind. Hard disks crash, RAM becomes faulty, the power grid has a blackout, someone unplugs the wrong network cable. Anyone who has worked with large datacenters can tell you that these things happen *all the time* when you have a lot of machines.",
											"Hard disks are reported as having a mean time to failure (MTTF) of about 10 to 50 years \\[[5](), [6]()\\]. Thus, on a storage cluster with 10,000 disks, we should expect on average one disk to die per day.",
											"Our first response is usually to add redundancy to the individual hardware components in order to reduce the failure rate of the system. Disks may be set up in a RAID configuration, servers may have dual power supplies and hot-swappable CPUs, and datacenters may have batteries and diesel generators for backup power. When one component dies, the redundant component can take its place while the broken component is replaced. This approach cannot completely prevent hardware problems from causing failures, but it is well understood and can often keep a machine running uninterrupted for years.",
											"Until recently, redundancy of hardware components was sufficient for most applications, since it makes total failure of a single machine fairly rare. As long as you can restore a backup onto a new machine fairly quickly, the downtime in case of failure is not catastrophic in most applications. Thus, multi-machine redundancy was only required by a small number of applications for which high availability was absolutely essential.",
											"However, as data volumes and applications’ computing demands have increased, more applications have begun using larger numbers of machines, which proportionally increases the rate of hardware faults. Moreover, in some cloud platforms such as Amazon Web Services (AWS) it is fairly common for virtual machine instances to become unavailable without warning \\[[7]()\\], as the platforms are designed to prioritize flexibility and elasticity[i]() over single-machine reliability.",
											"Hence there is a move toward systems that can tolerate the loss of entire machines, by using software fault-tolerance techniques in preference or in addition to hardware redundancy. Such systems also have operational advantages: a single-server system requires planned downtime if you need to reboot the machine (to apply operating system security patches, for example), whereas a system that can tolerate machine failure can be patched one node at a time, without downtime of the entire system (a *rolling upgrade*; see [Chapter 4]()).",
										],
										summary: [
											"As data grows, software fault-tolerance outshines hardware redundancy, ensuring seamless operations.",
										],
										longSummary: [
											"System failures in large datacenters often arise from hardware issues like disk crashes, faulty RAM, power outages, or network problems. With a cluster of 10,000 disks, expect one disk failure daily. Traditionally, RAID, dual power supplies, and backup generators mitigated these issues. However, as data and computing demands grow, applications use more machines, increasing fault rates. Cloud platforms like AWS now prioritize flexibility over single-machine reliability, shifting to software fault-tolerance techniques that manage entire machine losses and allow rolling upgrades without downtime.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280086/blog-cover-images/h6n2qykookfksbylpvd2.webp",
									},
									{
										heading: ["## **Software Errors**"],
										children: [
											"We usually think of hardware faults as being random and independent from each other: one machine’s disk failing does not imply that another machine’s disk is going to fail. There may be weak correlations (for example due to a common cause, such as the temperature in the server rack), but otherwise it is unlikely that a large number of hardware components will fail at the same time.",
											"Another class of fault is a systematic error within the system \\[[8]()\\]. Such faults are harder to anticipate, and because they are correlated across nodes, they tend to cause many more system failures than uncorrelated hardware faults \\[[5]()\\]. Examples include:",
											"* A software bug that causes every instance of an application server to crash when given a particular bad input. For example, consider the leap second on June 30, 2012, that caused many applications to hang simultaneously due to a bug in the Linux kernel \\[[9]()\\].",
											"* A runaway process that uses up some shared resource—CPU time, memory, disk space, or network bandwidth.",
											"* A service that the system depends on that slows down, becomes unresponsive, or starts returning corrupted responses.",
											"* Cascading failures, where a small fault in one component triggers a fault in another component, which in turn triggers further faults \\[[10]()\\].",
											"The bugs that cause these kinds of software faults often lie dormant for a long time until they are triggered by an unusual set of circumstances. In those circumstances, it is revealed that the software is making some kind of assumption about its environment—and while that assumption is usually true, it eventually stops being true for some reason \\[[11]()\\].",
											"There is no quick solution to the problem of systematic faults in software. Lots of small things can help: carefully thinking about assumptions and interactions in the system; thorough testing; process isolation; allowing processes to crash and restart; measuring, monitoring, and analyzing system behavior in production. If a system is expected to provide some guarantee (for example, in a message queue, that the number of incoming messages equals the number of outgoing messages), it can constantly check itself while it is running and raise an alert if a discrepancy is found \\[[12]()\\].",
										],
										summary: [
											"Systematic software faults, unlike random hardware errors, trigger cascading failures under specific conditions.",
										],
										longSummary: [
											"Hardware faults are often seen as random and independent, but systematic errors, such as software bugs and cascading failures, are more challenging to predict and can cause widespread issues due to their correlated nature. These faults, like the 2012 leap second bug, often remain hidden until unusual conditions expose flawed assumptions about the environment. While there's no quick fix for systematic faults, effective strategies include scrutinizing assumptions, thorough testing, process isolation, enabling crash-and-restart, monitoring production behavior, and implementing self-checking mechanisms to alert when discrepancies occur.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280087/blog-cover-images/moxs3gpn6rpllbagk0xr.webp",
									},
									{
										heading: ["## **Human Errors**"],
										children: [
											"Humans design and build software systems, and the operators who keep the systems running are also human. Even when they have the best intentions, humans are known to be unreliable. For example, one study of large internet services found that configuration errors by operators were the leading cause of outages, whereas hardware faults (servers or network) played a role in only 10–25% of outages \\[[13]()\\].",
											"How do we make our systems reliable, in spite of unreliable humans? The best systems combine several approaches:",
											"* Design systems in a way that minimizes opportunities for error. For example, well-designed abstractions, APIs, and admin interfaces make it easy to do “the right thing” and discourage “the wrong thing.” However, if the interfaces are too restrictive people will work around them, negating their benefit, so this is a tricky balance to get right.",
											"* Decouple the places where people make the most mistakes from the places where they can cause failures. In particular, provide fully featured non-production *sandbox* environments where people can explore and experiment safely, using real data, without affecting real users.",
											"* Test thoroughly at all levels, from unit tests to whole-system integration tests and manual tests \\[[3]()\\]. Automated testing is widely used, well understood, and especially valuable for covering corner cases that rarely arise in normal operation.",
											"* Allow quick and easy recovery from human errors, to minimize the impact in the case of a failure. For example, make it fast to roll back configuration changes, roll out new code gradually (so that any unexpected bugs affect only a small subset of users), and provide tools to recompute data (in case it turns out that the old computation was incorrect).",
											"* Set up detailed and clear monitoring, such as performance metrics and error rates. In other engineering disciplines this is referred to as *telemetry*. (Once a rocket has left the ground, telemetry is essential for tracking what is happening, and for understanding failures \\[[14]()\\].) Monitoring can show us early warning signals and allow us to check whether any assumptions or constraints are being violated. When a problem occurs, metrics can be invaluable in diagnosing the issue.",
											"* Implement good management practices and training—a complex and important aspect, and beyond the scope of this book.",
										],
										summary: [
											"Enhance system reliability by minimizing human error with design, testing, and monitoring strategies.",
										],
										longSummary: [
											"Humans, while essential in designing, building, and operating software systems, are prone to errors, particularly in configuration, leading to outages. To enhance system reliability despite human fallibility, several strategies should be employed: design interfaces that minimize error opportunities, decouple error-prone areas from failure points using safe sandbox environments, conduct thorough testing at all levels, enable quick recovery through fast rollbacks and gradual code deployment, establish detailed monitoring and telemetry for early problem detection, and implement effective management practices and training. These combined approaches help maintain system reliability despite the inherent unreliability of human operators.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280087/blog-cover-images/kmgupotdyalzgobp2i3w.webp",
									},
									{
										heading: [
											"## **How Important Is Reliability?**",
										],
										children: [
											"Reliability is not just for nuclear power stations and air traffic control software—more mundane applications are also expected to work reliably. Bugs in business applications cause lost productivity (and legal risks if figures are reported incorrectly), and outages of ecommerce sites can have huge costs in terms of lost revenue and damage to reputation.",
											"Even in “noncritical” applications we have a responsibility to our users. Consider a parent who stores all their pictures and videos of their children in your photo application \\[[15]()\\]. How would they feel if that database was suddenly corrupted? Would they know how to restore it from a backup?",
											"There are situations in which we may choose to sacrifice reliability in order to reduce development cost (e.g., when developing a prototype product for an unproven market) or operational cost (e.g., for a service with a very narrow profit margin)—but we should be very conscious of when we are cutting corners.",
										],
										summary: [
											"Reliability matters everywhere, from business apps to family photo storage—beware of cutting corners.",
										],
										longSummary: [
											"Reliability is crucial not only for critical systems like nuclear power stations and air traffic control but also for everyday applications. Bugs in business software can lead to lost productivity and legal issues, while ecommerce outages can incur significant costs. Even in noncritical applications, we owe users reliability, such as parents storing irreplaceable family photos. While there may be times to prioritize cost over reliability, it's essential to be aware of when corners are being cut.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280087/blog-cover-images/deb5sm6os2wvihodubqi.webp",
									},
								],
							],
							summary: [
								"Software reliability means performing correctly under stress, anticipating faults, and ensuring user trust.",
							],
							longSummary: [
								"Reliability in software ensures systems perform expected functions, handle user errors, maintain performance under load, and prevent unauthorized access. It involves fault tolerance, allowing systems to manage faults without failing. Testing error handling is vital, but prevention, especially for security, is crucial. Hardware faults in datacenters are mitigated by redundancy, but software fault-tolerance is now key due to increased data demands. Systematic software faults require careful testing and monitoring. Human errors, a major outage cause, need systems designed to minimize mistakes and enable quick recovery. Reliability is essential to avoid productivity loss, legal risks, and high costs.",
							],
							imageUrl:
								"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280078/blog-cover-images/on4euvwih5nieog38c6k.webp",
						},
						{
							heading: ["# **Scalability**"],
							children: [
								"Even if a system is working reliably today, that doesn’t mean it will necessarily work reliably in the future. One common reason for degradation is increased load: perhaps the system has grown from 10,000 concurrent users to 100,000 concurrent users, or from 1 million to 10 million. Perhaps it is processing much larger volumes of data than it did before.",
								"*Scalability* is the term we use to describe a system’s ability to cope with increased load. Note, however, that it is not a one-dimensional label that we can attach to a system: it is meaningless to say “X is scalable” or “Y doesn’t scale.” Rather, discussing scalability means considering questions like “If the system grows in a particular way, what are our options for coping with the growth?” and “How can we add computing resources to handle the additional load?”",
								[
									{
										heading: ["## **Describing Load**"],
										children: [
											"First, we need to succinctly describe the current load on the system; only then can we discuss growth questions (what happens if our load doubles?). Load can be described with a few numbers which we call *load parameters*. The best choice of parameters depends on the architecture of your system: it may be requests per second to a web server, the ratio of reads to writes in a database, the number of simultaneously active users in a chat room, the hit rate on a cache, or something else. Perhaps the average case is what matters for you, or perhaps your bottleneck is dominated by a small number of extreme cases.",
											"To make this idea more concrete, let’s consider Twitter as an example, using data published in November 2012 \\[[16]()\\]. Two of Twitter’s main operations are:",
											"Post tweet",
											"A user can publish a new message to their followers (4.6k requests/sec on average, over 12k requests/sec at peak).",
											"Home timeline",
											"A user can view tweets posted by the people they follow (300k requests/sec).",
											"Simply handling 12,000 writes per second (the peak rate for posting tweets) would be fairly easy. However, Twitter’s scaling challenge is not primarily due to tweet volume, but due to *fan-out*[ii]()—each user follows many people, and each user is followed by many people. There are broadly two ways of implementing these two operations:",
											"1. Posting a tweet simply inserts the new tweet into a global collection of tweets. When a user requests their home timeline, look up all the people they follow, find all the tweets for each of those users, and merge them (sorted by time). In a relational database like in [Figure 1-2](blob:https://johnfactotum.github.io/9d0f9c6d-5469-483b-94e3-d57d8bc53c62#fig_twitter_relational), you could write a query such as:",
											"   ```\n   SELECT tweets.*, users.* FROM tweets\n     JOIN users   ON tweets.sender_id    = users.id\n     JOIN follows ON follows.followee_id = users.id\n     WHERE follows.follower_id = current_user\n   ```",
											"2. Maintain a cache for each user’s home timeline—like a mailbox of tweets for each recipient user (see [Figure 1-3](blob:https://johnfactotum.github.io/9d0f9c6d-5469-483b-94e3-d57d8bc53c62#fig_twitter_timelines)). When a user *posts a tweet*, look up all the people who follow that user, and insert the new tweet into each of their home timeline caches. The request to read the home timeline is then cheap, because its result has been computed ahead of time.",
											"![ddia 0102](blob:https://johnfactotum.github.io/bf11ad58-c256-4473-91de-8cbbfe2f1a6d)",
											"###### *Figure 1-2. Simple relational schema for implementing a Twitter home timeline.*",
											"![ddia 0103](blob:https://johnfactotum.github.io/b7fce79d-6e7c-41b3-8508-3fbe50fccc4d)",
											"###### *Figure 1-3. Twitter’s data pipeline for delivering tweets to followers, with load parameters as of November 2012 \\[[16]()\\].*",
											"The first version of Twitter used approach 1, but the systems struggled to keep up with the load of home timeline queries, so the company switched to approach 2. This works better because the average rate of published tweets is almost two orders of magnitude lower than the rate of home timeline reads, and so in this case it’s preferable to do more work at write time and less at read time.",
											"However, the downside of approach 2 is that posting a tweet now requires a lot of extra work. On average, a tweet is delivered to about 75 followers, so 4.6k tweets per second become 345k writes per second to the home timeline caches. But this average hides the fact that the number of followers per user varies wildly, and some users have over 30 million followers. This means that a single tweet may result in over 30 million writes to home timelines! Doing this in a timely manner—Twitter tries to deliver tweets to followers within five seconds—is a significant challenge.",
											"In the example of Twitter, the distribution of followers per user (maybe weighted by how often those users tweet) is a key load parameter for discussing scalability, since it determines the fan-out load. Your application may have very different characteristics, but you can apply similar principles to reasoning about its load.",
											"The final twist of the Twitter anecdote: now that approach 2 is robustly implemented, Twitter is moving to a hybrid of both approaches. Most users’ tweets continue to be fanned out to home timelines at the time when they are posted, but a small number of users with a very large number of followers (i.e., celebrities) are excepted from this fan-out. Tweets from any celebrities that a user may follow are fetched separately and merged with that user’s home timeline when it is read, like in approach 1. This hybrid approach is able to deliver consistently good performance. We will revisit this example in [Chapter 12]() after we have covered some more technical ground.",
										],
										summary: [
											"Understanding load parameters is crucial for scalability: Twitter's fan-out challenge exemplifies this.",
										],
										longSummary: [
											"Load parameters are vital for assessing system load and planning growth, varying by architecture and focusing on average or extreme cases. In 2012, Twitter handled 4.6k tweets/sec (12k peak) and 300k home timeline requests/sec. The main challenge was fan-out, as users had many followers. Initially, Twitter queried a global tweet collection for timeline reads but switched to pre-computing timelines at write time, inserting tweets into followers' caches. This improved performance, as reads outnumbered writes, despite generating 345k writes/sec from 4.6k tweets/sec. A hybrid approach was adopted for celebrity tweets to maintain performance. Understanding load distribution is crucial for scalability.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280096/blog-cover-images/w0njrbkjauss53jpwx8d.webp",
									},
									{
										heading: [
											"## **Describing Performance**",
										],
										children: [
											"Once you have described the load on your system, you can investigate what happens when the load increases. You can look at it in two ways:",
											"* When you increase a load parameter and keep the system resources (CPU, memory, network bandwidth, etc.) unchanged, how is the performance of your system affected?",
											"* When you increase a load parameter, how much do you need to increase the resources if you want to keep performance unchanged?",
											"Both questions require performance numbers, so let’s look briefly at describing the performance of a system.",
											"In a batch processing system such as Hadoop, we usually care about *throughput*—the number of records we can process per second, or the total time it takes to run a job on a dataset of a certain size.[iii]() In online systems, what’s usually more important is the service’s *response time*—that is, the time between a client sending a request and receiving a response.",
											[
												{
													heading: [
														"# **Latency and response time**",
													],
													children: [
														"*Latency* and *response time* are often used synonymously, but they are not the same. The response time is what the client sees: besides the actual time to process the request (the *service time*), it includes network delays and queueing delays. Latency is the duration that a request is waiting to be handled—during which it is *latent*, awaiting service \\[[17]()\\].",
														"Even if you only make the same request over and over again, you’ll get a slightly different response time on every try. In practice, in a system handling a variety of requests, the response time can vary a lot. We therefore need to think of response time not as a single number, but as a *distribution* of values that you can measure.",
														"In [Figure 1-4](blob:https://johnfactotum.github.io/9d0f9c6d-5469-483b-94e3-d57d8bc53c62#fig_lognormal), each gray bar represents a request to a service, and its height shows how long that request took. Most requests are reasonably fast, but there are occasional *outliers* that take much longer. Perhaps the slow requests are intrinsically more expensive, e.g., because they process more data. But even in a scenario where you’d think all requests should take the same time, you get variation: random additional latency could be introduced by a context switch to a background process, the loss of a network packet and TCP retransmission, a garbage collection pause, a page fault forcing a read from disk, mechanical vibrations in the server rack \\[[18]()\\], or many other causes.",
														"![ddia 0104](blob:https://johnfactotum.github.io/0da5cb90-5d0a-4d24-b8c5-8d71d50cccd2)",
														"###### *Figure 1-4. Illustrating mean and percentiles: response times for a sample of 100 requests to a service.*",
														"It’s common to see the *average* response time of a service reported. (Strictly speaking, the term “average” doesn’t refer to any particular formula, but in practice it is usually understood as the *arithmetic mean*: given *n* values, add up all the values, and divide by *n*.) However, the mean is not a very good metric if you want to know your “typical” response time, because it doesn’t tell you how many users actually experienced that delay.",
														"Usually it is better to use *percentiles*. If you take your list of response times and sort it from fastest to slowest, then the *median* is the halfway point: for example, if your median response time is 200 ms, that means half your requests return in less than 200 ms, and half your requests take longer than that.",
														"This makes the median a good metric if you want to know how long users typically have to wait: half of user requests are served in less than the median response time, and the other half take longer than the median. The median is also known as the *50th percentile*, and sometimes abbreviated as *p50*. Note that the median refers to a single request; if the user makes several requests (over the course of a session, or because several resources are included in a single page), the probability that at least one of them is slower than the median is much greater than 50%.",
														"In order to figure out how bad your outliers are, you can look at higher percentiles: the *95th*, *99th*, and *99.9th* percentiles are common (abbreviated *p95*, *p99*, and *p999*). They are the response time thresholds at which 95%, 99%, or 99.9% of requests are faster than that particular threshold. For example, if the 95th percentile response time is 1.5 seconds, that means 95 out of 100 requests take less than 1.5 seconds, and 5 out of 100 requests take 1.5 seconds or more. This is illustrated in [Figure 1-4](blob:https://johnfactotum.github.io/9d0f9c6d-5469-483b-94e3-d57d8bc53c62#fig_lognormal).",
														"High percentiles of response times, also known as *tail latencies*, are important because they directly affect users’ experience of the service. For example, Amazon describes response time requirements for internal services in terms of the 99.9th percentile, even though it only affects 1 in 1,000 requests. This is because the customers with the slowest requests are often those who have the most data on their accounts because they have made many purchases—that is, they’re the most valuable customers \\[[19]()\\]. It’s important to keep those customers happy by ensuring the website is fast for them: Amazon has also observed that a 100 ms increase in response time reduces sales by 1% \\[[20]()\\], and others report that a 1-second slowdown reduces a customer satisfaction metric by 16% \\[[21](), [22]()\\].",
														"On the other hand, optimizing the 99.99th percentile (the slowest 1 in 10,000 requests) was deemed too expensive and to not yield enough benefit for Amazon’s purposes. Reducing response times at very high percentiles is difficult because they are easily affected by random events outside of your control, and the benefits are diminishing.",
														"For example, percentiles are often used in *service level objectives* (SLOs) and *service level agreements* (SLAs), contracts that define the expected performance and availability of a service. An SLA may state that the service is considered to be up if it has a median response time of less than 200 ms and a 99th percentile under 1 s (if the response time is longer, it might as well be down), and the service may be required to be up at least 99.9% of the time. These metrics set expectations for clients of the service and allow customers to demand a refund if the SLA is not met.",
														"Queueing delays often account for a large part of the response time at high percentiles. As a server can only process a small number of things in parallel (limited, for example, by its number of CPU cores), it only takes a small number of slow requests to hold up the processing of subsequent requests—an effect sometimes known as *head-of-line blocking*. Even if those subsequent requests are fast to process on the server, the client will see a slow overall response time due to the time waiting for the prior request to complete. Due to this effect, it is important to measure response times on the client side.",
														"When generating load artificially in order to test the scalability of a system, the load-generating client needs to keep sending requests independently of the response time. If the client waits for the previous request to complete before sending the next one, that behavior has the effect of artificially keeping the queues shorter in the test than they would be in reality, which skews the measurements \\[[23]()\\].",
														[
															{
																heading: [
																	"##### **Percentiles in Practice**",
																],
																children: [
																	"High percentiles become especially important in backend services that are called multiple times as part of serving a single end-user request. Even if you make the calls in parallel, the end-user request still needs to wait for the slowest of the parallel calls to complete. It takes just one slow call to make the entire end-user request slow, as illustrated in [Figure 1-5](blob:https://johnfactotum.github.io/9d0f9c6d-5469-483b-94e3-d57d8bc53c62#fig_tail_amplification). Even if only a small percentage of backend calls are slow, the chance of getting a slow call increases if an end-user request requires multiple backend calls, and so a higher proportion of end-user requests end up being slow (an effect known as *tail latency amplification* \\[[24]()\\]).",
																	"If you want to add response time percentiles to the monitoring dashboards for your services, you need to efficiently calculate them on an ongoing basis. For example, you may want to keep a rolling window of response times of requests in the last 10 minutes. Every minute, you calculate the median and various percentiles over the values in that window and plot those metrics on a graph.",
																	"The naïve implementation is to keep a list of response times for all requests within the time window and to sort that list every minute. If that is too inefficient for you, there are algorithms that can calculate a good approximation of percentiles at minimal CPU and memory cost, such as forward decay \\[[25]()\\], t-digest \\[[26]()\\], or HdrHistogram \\[[27]()\\]. Beware that averaging percentiles, e.g., to reduce the time resolution or to combine data from several machines, is mathematically meaningless—the right way of aggregating response time data is to add the histograms \\[[28]()\\].",
																	"![ddia 0105](blob:https://johnfactotum.github.io/547a4f19-229b-4c39-b19e-42ba75d51a50)",
																	"###### *Figure 1-5. When several backend calls are needed to serve a request, it takes just a single slow backend request to slow down the entire end-user request.*",
																],
																summary: [
																	"Efficient percentile calculation is vital to prevent tail latency amplification in backend services.",
																],
																longSummary: [
																	"High percentiles are vital in backend services managing multiple calls per end-user request, as even one slow call can delay the entire request due to tail latency amplification. This means a small percentage of slow backend calls can significantly impact the end-user experience. Efficient calculation methods are essential for monitoring response time percentiles. Instead of storing and sorting all response times, use algorithms like forward decay, t-digest, or HdrHistogram to approximate percentiles with minimal resources. Remember, averaging percentiles is mathematically meaningless; instead, combine histograms for accurate analysis.",
																],
																imageUrl:
																	"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280114/blog-cover-images/jkybqgamus6f3lwrzp8i.webp",
															},
														],
													],
													summary: [
														"Discover how tail latencies impact user experience and sales, and why percentiles matter.",
													],
													longSummary: [
														"Response time includes processing, network, and queueing delays, while latency is the initial wait before a request is handled. Response times vary, forming a distribution. Percentiles provide better insights than averages, with the median showing typical wait times and higher percentiles highlighting outliers. Tail latencies affect key customers; for example, Amazon found a 100ms increase reduces sales by 1%. Percentiles are vital in SLOs and SLAs, and queueing delays impact high-percentile response times. Efficient percentile calculation methods like forward decay or HdrHistogram are essential for monitoring.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280105/blog-cover-images/vxl3mx6xc1vrvp6aab1n.webp",
												},
											],
										],
										summary: [
											"Explore how system load impacts performance and why high-percentile response times matter.",
										],
										longSummary: [
											"To investigate system performance under increased load, consider two scenarios: increasing load parameters while keeping resources constant, and determining necessary resource increases to maintain performance. In batch systems like Hadoop, throughput is key, while online systems prioritize response time, which includes processing, network, and queueing delays. Response times vary, forming a distribution where percentiles, not averages, better reflect user experience. High-percentile response times, crucial for backend services, can significantly impact end-user experience due to tail latency amplification. Efficient percentile calculation methods like t-digest or HdrHistogram are recommended, as averaging percentiles is ineffective.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280096/blog-cover-images/df1c04coxz3fhu3gaw5z.webp",
									},
									{
										heading: [
											"## **Approaches for Coping with Load**",
										],
										children: [
											"Now that we have discussed the parameters for describing load and metrics for measuring performance, we can start discussing scalability in earnest: how do we maintain good performance even when our load parameters increase by some amount?",
											"An architecture that is appropriate for one level of load is unlikely to cope with 10 times that load. If you are working on a fast-growing service, it is therefore likely that you will need to rethink your architecture on every order of magnitude load increase—or perhaps even more often than that.",
											"People often talk of a dichotomy between *scaling up* (*vertical scaling*, moving to a more powerful machine) and *scaling out* (*horizontal scaling*, distributing the load across multiple smaller machines). Distributing load across multiple machines is also known as a *shared-nothing* architecture. A system that can run on a single machine is often simpler, but high-end machines can become very expensive, so very intensive workloads often can’t avoid scaling out. In reality, good architectures usually involve a pragmatic mixture of approaches: for example, using several fairly powerful machines can still be simpler and cheaper than a large number of small virtual machines.",
											"Some systems are *elastic*, meaning that they can automatically add computing resources when they detect a load increase, whereas other systems are scaled manually (a human analyzes the capacity and decides to add more machines to the system). An elastic system can be useful if load is highly unpredictable, but manually scaled systems are simpler and may have fewer operational surprises (see [“Rebalancing Partitions”]()).",
											"While distributing stateless services across multiple machines is fairly straightforward, taking stateful data systems from a single node to a distributed setup can introduce a lot of additional complexity. For this reason, common wisdom until recently was to keep your database on a single node (scale up) until scaling cost or high-availability requirements forced you to make it distributed.",
											"As the tools and abstractions for distributed systems get better, this common wisdom may change, at least for some kinds of applications. It is conceivable that distributed data systems will become the default in the future, even for use cases that don’t handle large volumes of data or traffic. Over the course of the rest of this book we will cover many kinds of distributed data systems, and discuss how they fare not just in terms of scalability, but also ease of use and maintainability.",
											"The architecture of systems that operate at large scale is usually highly specific to the application—there is no such thing as a generic, one-size-fits-all scalable architecture (informally known as *magic scaling sauce*). The problem may be the volume of reads, the volume of writes, the volume of data to store, the complexity of the data, the response time requirements, the access patterns, or (usually) some mixture of all of these plus many more issues.",
											"For example, a system that is designed to handle 100,000 requests per second, each 1 kB in size, looks very different from a system that is designed for 3 requests per minute, each 2 GB in size—even though the two systems have the same data throughput.",
											"An architecture that scales well for a particular application is built around assumptions of which operations will be common and which will be rare—the load parameters. If those assumptions turn out to be wrong, the engineering effort for scaling is at best wasted, and at worst counterproductive. In an early-stage startup or an unproven product it’s usually more important to be able to iterate quickly on product features than it is to scale to some hypothetical future load.",
											"Even though they are specific to a particular application, scalable architectures are nevertheless usually built from general-purpose building blocks, arranged in familiar patterns. In this book we discuss those building blocks and patterns.",
										],
										summary: [
											"Scalable architecture requires tailored strategies; no universal solution fits every application's unique demands.",
										],
										longSummary: [
											"Scalability means maintaining performance as load increases, requiring fast-growing services to rethink architecture. Scaling up uses more powerful machines, while scaling out uses multiple smaller ones. Effective architectures combine both and can be elastic or manually scaled. Stateless services are easier to distribute than stateful ones. There's no one-size-fits-all solution; design depends on needs like read/write volumes and response times. Systems handling many small requests differ from those processing few large ones. Early-stage products should prioritize iteration speed over future scaling, using general-purpose building blocks in familiar patterns.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280097/blog-cover-images/kg7ylrltyohqx2rg38u8.webp",
									},
								],
							],
							summary: [
								"Scalability challenges: How systems adapt to growing loads and maintain performance under pressure.",
							],
							longSummary: [
								"Future reliability isn't guaranteed, especially with increased load. Scalability requires understanding load parameters and options like adding resources. Twitter's journey shows this: they moved from querying a global tweet collection to pre-computing timelines, then a hybrid approach for celebrity tweets. Scalability planning involves analyzing performance impacts and resource adjustments. Response time is crucial, with percentiles offering better insights than averages, as seen with Amazon's sales impact. Effective monitoring needs efficient percentile calculations. Scalability balances vertical and horizontal scaling, with elastic or manual adjustments. Stateless services are easier to distribute, and early-stage products should prioritize iteration speed.",
							],
							imageUrl:
								"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280080/blog-cover-images/jamsu9sczkbukim9wzn0.webp",
						},
						{
							heading: ["# **Maintainability**"],
							children: [
								"It is well known that the majority of the cost of software is not in its initial development, but in its ongoing maintenance—fixing bugs, keeping its systems operational, investigating failures, adapting it to new platforms, modifying it for new use cases, repaying technical debt, and adding new features.",
								"Yet, unfortunately, many people working on software systems dislike maintenance of so-called *legacy* systems—perhaps it involves fixing other people’s mistakes, or working with platforms that are now outdated, or systems that were forced to do things they were never intended for. Every legacy system is unpleasant in its own way, and so it is difficult to give general recommendations for dealing with them.",
								"However, we can and should design software in such a way that it will hopefully minimize pain during maintenance, and thus avoid creating legacy software ourselves. To this end, we will pay particular attention to three design principles for software systems:",
								"Operability",
								"Make it easy for operations teams to keep the system running smoothly.",
								"Simplicity",
								"Make it easy for new engineers to understand the system, by removing as much complexity as possible from the system. (Note this is not the same as simplicity of the user interface.)",
								"Evolvability",
								"Make it easy for engineers to make changes to the system in the future, adapting it for unanticipated use cases as requirements change. Also known as *extensibility*, *modifiability*, or *plasticity*.",
								"As previously with reliability and scalability, there are no easy solutions for achieving these goals. Rather, we will try to think about systems with operability, simplicity, and evolvability in mind.",
								[
									{
										heading: [
											"## **Operability: Making Life Easy for Operations**",
										],
										children: [
											"It has been suggested that “good operations can often work around the limitations of bad (or incomplete) software, but good software cannot run reliably with bad operations” \\[[12]()\\]. While some aspects of operations can and should be automated, it is still up to humans to set up that automation in the first place and to make sure it’s working correctly.",
											"Operations teams are vital to keeping a software system running smoothly. A good operations team typically is responsible for the following, and more \\[[29]()\\]:",
											"* Monitoring the health of the system and quickly restoring service if it goes into a bad state",
											"* Tracking down the cause of problems, such as system failures or degraded performance",
											"* Keeping software and platforms up to date, including security patches",
											"* Keeping tabs on how different systems affect each other, so that a problematic change can be avoided before it causes damage",
											"* Anticipating future problems and solving them before they occur (e.g., capacity planning)",
											"* Establishing good practices and tools for deployment, configuration management, and more",
											"* Performing complex maintenance tasks, such as moving an application from one platform to another",
											"* Maintaining the security of the system as configuration changes are made",
											"* Defining processes that make operations predictable and help keep the production environment stable",
											"* Preserving the organization’s knowledge about the system, even as individual people come and go",
											"Good operability means making routine tasks easy, allowing the operations team to focus their efforts on high-value activities. Data systems can do various things to make routine tasks easy, including:",
											"* Providing visibility into the runtime behavior and internals of the system, with good monitoring",
											"* Providing good support for automation and integration with standard tools",
											"* Avoiding dependency on individual machines (allowing machines to be taken down for maintenance while the system as a whole continues running uninterrupted)",
											"* Providing good documentation and an easy-to-understand operational model (“If I do X, Y will happen”)",
											"* Providing good default behavior, but also giving administrators the freedom to override defaults when needed",
											"* Self-healing where appropriate, but also giving administrators manual control over the system state when needed",
											"* Exhibiting predictable behavior, minimizing surprises",
										],
										summary: [
											"Effective operations teams ensure software reliability, overcoming limitations and maintaining seamless system performance.",
										],
										longSummary: [
											"Good operations teams are essential for maintaining smooth software system functionality, as they can often compensate for poor software, unlike good software which cannot function well with poor operations. Key responsibilities of a strong operations team include monitoring system health, restoring services, troubleshooting issues, applying security patches, and anticipating future problems. They establish best practices for deployment, configuration, and maintenance, while ensuring security and stability. Effective operability involves simplifying routine tasks through comprehensive monitoring, automation support, machine independence, thorough documentation, sensible defaults with flexibility, self-healing capabilities, and predictable system behavior to minimize surprises.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280090/blog-cover-images/ntrfuqrqgf3rqzflhwzi.webp",
									},
									{
										heading: [
											"## **Simplicity: Managing Complexity**",
										],
										children: [
											"Small software projects can have delightfully simple and expressive code, but as projects get larger, they often become very complex and difficult to understand. This complexity slows down everyone who needs to work on the system, further increasing the cost of maintenance. A software project mired in complexity is sometimes described as a *big ball of mud* \\[[30]()\\].",
											"There are various possible symptoms of complexity: explosion of the state space, tight coupling of modules, tangled dependencies, inconsistent naming and terminology, hacks aimed at solving performance problems, special-casing to work around issues elsewhere, and many more. Much has been said on this topic already \\[[31](), [32](), [33]()\\].",
											"When complexity makes maintenance hard, budgets and schedules are often overrun. In complex software, there is also a greater risk of introducing bugs when making a change: when the system is harder for developers to understand and reason about, hidden assumptions, unintended consequences, and unexpected interactions are more easily overlooked. Conversely, reducing complexity greatly improves the maintainability of software, and thus simplicity should be a key goal for the systems we build.",
											"Making a system simpler does not necessarily mean reducing its functionality; it can also mean removing *accidental* complexity. Moseley and Marks \\[[32]()\\] define complexity as accidental if it is not inherent in the problem that the software solves (as seen by the users) but arises only from the implementation.",
											"One of the best tools we have for removing accidental complexity is *abstraction*. A good abstraction can hide a great deal of implementation detail behind a clean, simple-to-understand façade. A good abstraction can also be used for a wide range of different applications. Not only is this reuse more efficient than reimplementing a similar thing multiple times, but it also leads to higher-quality software, as quality improvements in the abstracted component benefit all applications that use it.",
											"For example, high-level programming languages are abstractions that hide machine code, CPU registers, and syscalls. SQL is an abstraction that hides complex on-disk and in-memory data structures, concurrent requests from other clients, and inconsistencies after crashes. Of course, when programming in a high-level language, we are still using machine code; we are just not using it *directly*, because the programming language abstraction saves us from having to think about it.",
											"However, finding good abstractions is very hard. In the field of distributed systems, although there are many good algorithms, it is much less clear how we should be packaging them into abstractions that help us keep the complexity of the system at a manageable level.",
											"Throughout this book, we will keep our eyes open for good abstractions that allow us to extract parts of a large system into well-defined, reusable components.",
										],
										summary: [
											"Unlock simplicity in software: master abstraction to tackle complexity and enhance maintainability.",
										],
										longSummary: [
											"Large software projects often become complex, making maintenance difficult, costly, and prone to bugs due to issues like state space explosion, tight coupling, and tangled dependencies. Simplicity should be a key goal to improve maintainability, which involves removing accidental complexity—complexity arising from implementation rather than the problem itself. Abstraction is a powerful tool for this, as it hides implementation details and promotes reuse, exemplified by high-level programming languages and SQL. However, finding effective abstractions is challenging, particularly in distributed systems. This book explores good abstractions to extract parts of large systems into well-defined, reusable components.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280090/blog-cover-images/hj9nekb5wje3mqolahf9.webp",
									},
									{
										heading: [
											"## **Evolvability: Making Change Easy**",
										],
										children: [
											"It’s extremely unlikely that your system’s requirements will remain unchanged forever. They are much more likely to be in constant flux: you learn new facts, previously unanticipated use cases emerge, business priorities change, users request new features, new platforms replace old platforms, legal or regulatory requirements change, growth of the system forces architectural changes, etc.",
											"In terms of organizational processes, *Agile* working patterns provide a framework for adapting to change. The Agile community has also developed technical tools and patterns that are helpful when developing software in a frequently changing environment, such as test-driven development (TDD) and refactoring.",
											"Most discussions of these Agile techniques focus on a fairly small, local scale (a couple of source code files within the same application). In this book, we search for ways of increasing agility on the level of a larger data system, perhaps consisting of several different applications or services with different characteristics. For example, how would you “refactor” Twitter’s architecture for assembling home timelines ([“Describing Load”](blob:https://johnfactotum.github.io/9d0f9c6d-5469-483b-94e3-d57d8bc53c62#sec_introduction_scalability_load)) from approach 1 to approach 2?",
											"The ease with which you can modify a data system, and adapt it to changing requirements, is closely linked to its simplicity and its abstractions: simple and easy-to-understand systems are usually easier to modify than complex ones. But since this is such an important idea, we will use a different word to refer to agility on a data system level: *evolvability* \\[[34]()\\].",
										],
										summary: [
											"Explore system evolvability: adapting large data systems with Agile methodologies for seamless change.",
										],
										longSummary: [
											"System requirements are constantly evolving due to factors like new facts, use cases, business priorities, user requests, platform changes, legal requirements, and growth. Agile methodologies offer frameworks to adapt to these changes, utilizing technical tools such as test-driven development and refactoring. While Agile is often discussed in the context of small-scale applications, this book delves into enhancing agility at the larger data system level, which may include multiple applications or services. The ability to modify a data system is tied to its simplicity and abstractions, with simpler systems being easier to modify. This system-level agility is known as evolvability.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280095/blog-cover-images/mr1t2cwajthudj1aewk5.webp",
									},
								],
							],
							summary: [
								"Design software with operability, simplicity, and evolvability to avoid costly legacy systems.",
							],
							longSummary: [
								"The majority of software costs are tied to maintenance rather than initial development, yet many dislike maintaining legacy systems. To avoid creating legacy software, design with operability, simplicity, and evolvability in mind. Operability ensures smooth system operations through good monitoring, automation, and documentation. Simplicity reduces accidental complexity, improving maintainability without sacrificing functionality, often through effective abstraction. Evolvability allows systems to adapt to changing requirements, facilitated by Agile methodologies and technical tools like test-driven development. Good operations can mitigate bad software, but not vice versa, highlighting the importance of a competent operations team in maintaining system health and stability.",
							],
							imageUrl:
								"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280079/blog-cover-images/opvtqjdfvfug94wuqz1m.webp",
						},
						{
							heading: ["# **Summary**"],
							children: [
								"In this chapter, we have explored some fundamental ways of thinking about data-intensive applications. These principles will guide us through the rest of the book, where we dive into deep technical detail.",
								"An application has to meet various requirements in order to be useful. There are *functional requirements* (what it should do, such as allowing data to be stored, retrieved, searched, and processed in various ways), and some *nonfunctional requirements* (general properties like security, reliability, compliance, scalability, compatibility, and maintainability). In this chapter we discussed reliability, scalability, and maintainability in detail.",
								"*Reliability* means making systems work correctly, even when faults occur. Faults can be in hardware (typically random and uncorrelated), software (bugs are typically systematic and hard to deal with), and humans (who inevitably make mistakes from time to time). Fault-tolerance techniques can hide certain types of faults from the end user.",
								"*Scalability* means having strategies for keeping performance good, even when load increases. In order to discuss scalability, we first need ways of describing load and performance quantitatively. We briefly looked at Twitter’s home timelines as an example of describing load, and response time percentiles as a way of measuring performance. In a scalable system, you can add processing capacity in order to remain reliable under high load.",
								"*Maintainability* has many facets, but in essence it’s about making life better for the engineering and operations teams who need to work with the system. Good abstractions can help reduce complexity and make the system easier to modify and adapt for new use cases. Good operability means having good visibility into the system’s health, and having effective ways of managing it.",
								"There is unfortunately no easy fix for making applications reliable, scalable, or maintainable. However, there are certain patterns and techniques that keep reappearing in different kinds of applications. In the next few chapters we will take a look at some examples of data systems and analyze how they work toward those goals.",
								"Later in the book, in [Part III](), we will look at patterns for systems that consist of several components working together, such as the one in [Figure 1-1](blob:https://johnfactotum.github.io/9d0f9c6d-5469-483b-94e3-d57d8bc53c62#fig_introduction_composite).",
								"##### **Footnotes**",
								"[i]() Defined in [“Approaches for Coping with Load”](blob:https://johnfactotum.github.io/9d0f9c6d-5469-483b-94e3-d57d8bc53c62#sec_introduction_load).",
								"[ii]() A term borrowed from electronic engineering, where it describes the number of logic gate inputs that are attached to another gate’s output. The output needs to supply enough current to drive all the attached inputs. In transaction processing systems, we use it to describe the number of requests to other services that we need to make in order to serve one incoming request.",
								"[iii]() In an ideal world, the running time of a batch job is the size of the dataset divided by the throughput. In practice, the running time is often longer, due to skew (data not being spread evenly across worker processes) and needing to wait for the slowest task to complete.",
								"##### **References**",
								"\\[[1]()\\] Michael Stonebraker and Uğur Çetintemel: “[‘One Size Fits All’: An Idea Whose Time Has Come and Gone](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.68.9136&rep=rep1&type=pdf),” at *21st International Conference on Data Engineering* (ICDE), April 2005.",
								"\\[[2]()\\] Walter L. Heimerdinger and Charles B. Weinstock: “[A Conceptual Framework for System Fault Tolerance](http://www.sei.cmu.edu/reports/92tr033.pdf),” Technical Report CMU/SEI-92-TR-033, Software Engineering Institute, Carnegie Mellon University, October 1992.",
								"\\[[3]()\\] Ding Yuan, Yu Luo, Xin Zhuang, et al.: “[Simple Testing Can Prevent Most Critical Failures: An Analysis of Production Failures in Distributed Data-Intensive Systems](https://www.usenix.org/system/files/conference/osdi14/osdi14-paper-yuan.pdf),” at *11th USENIX Symposium on Operating Systems Design and Implementation* (OSDI), October 2014.",
								"\\[[4]()\\] Yury Izrailevsky and Ariel Tseitlin: “[The Netflix Simian Army](http://techblog.netflix.com/2011/07/netflix-simian-army.html),” *techblog.netflix.com*, July 19, 2011.",
								"\\[[5]()\\] Daniel Ford, François Labelle, Florentina I. Popovici, et al.: “[Availability in Globally Distributed Storage Systems](http://research.google.com/pubs/archive/36737.pdf),” at *9th USENIX Symposium on Operating Systems Design and Implementation* (OSDI), October 2010.",
								"\\[[6]()\\] Brian Beach: “[Hard Drive Reliability Update – Sep 2014](https://www.backblaze.com/blog/hard-drive-reliability-update-september-2014/),” *backblaze.com*, September 23, 2014.",
								"\\[[7]()\\] Laurie Voss: “[AWS: The Good, the Bad and the Ugly](https://web.archive.org/web/20160429075023/http://blog.awe.sm/2012/12/18/aws-the-good-the-bad-and-the-ugly/),” *blog.awe.sm*, December 18, 2012.",
								"\\[[8]()\\] Haryadi S. Gunawi, Mingzhe Hao, Tanakorn Leesatapornwongsa, et al.: “[What Bugs Live in the Cloud?](http://ucare.cs.uchicago.edu/pdf/socc14-cbs.pdf),” at *5th ACM Symposium on Cloud Computing* (SoCC), November 2014. [doi:10.1145/2670979.2670986](http://dx.doi.org/10.1145/2670979.2670986)",
								"\\[[9]()\\] Nelson Minar: “[Leap Second Crashes Half the Internet](http://www.somebits.com/weblog/tech/bad/leap-second-2012.html),” *somebits.com*, July 3, 2012.",
								"\\[[10]()\\] Amazon Web Services: “[Summary of the Amazon EC2 and Amazon RDS Service Disruption in the US East Region](http://aws.amazon.com/message/65648/),” *aws.amazon.com*, April 29, 2011.",
								"\\[[11]()\\] Richard I. Cook: “[How Complex Systems Fail](http://web.mit.edu/2.75/resources/random/How%20Complex%20Systems%20Fail.pdf),” Cognitive Technologies Laboratory, April 2000.",
								"\\[[12]()\\] Jay Kreps: “[Getting Real About Distributed System Reliability](http://blog.empathybox.com/post/19574936361/getting-real-about-distributed-system-reliability),” *blog.empathybox.com*, March 19, 2012.",
								"\\[[13]()\\] David Oppenheimer, Archana Ganapathi, and David A. Patterson: “[Why Do Internet Services Fail, and What Can Be Done About It?](http://static.usenix.org/legacy/events/usits03/tech/full_papers/oppenheimer/oppenheimer.pdf),” at *4th USENIX Symposium on Internet Technologies and Systems* (USITS), March 2003.",
								"\\[[14]()\\] Nathan Marz: “[Principles of Software Engineering, Part 1](http://nathanmarz.com/blog/principles-of-software-engineering-part-1.html),” *nathanmarz.com*, April 2, 2013.",
								"\\[[15]()\\] Michael Jurewitz: “[The Human Impact of Bugs](http://jury.me/blog/2013/3/14/the-human-impact-of-bugs),” *jury.me*, March 15, 2013.",
								"\\[[16]()\\] Raffi Krikorian: “[Timelines at Scale](http://www.infoq.com/presentations/Twitter-Timeline-Scalability),” at *QCon San Francisco*, November 2012.",
								"\\[[17]()\\] Martin Fowler: *Patterns of Enterprise Application Architecture*. Addison Wesley, 2002. ISBN: 978-0-321-12742-6",
								"\\[[18]()\\] Kelly Sommers: “[After all that run around, what caused 500ms disk latency even when we replaced physical server?](https://twitter.com/kellabyte/status/532930540777635840)” *twitter.com*, November 13, 2014.",
								"\\[[19]()\\] Giuseppe DeCandia, Deniz Hastorun, Madan Jampani, et al.: “[Dynamo: Amazon’s Highly Available Key-Value Store](http://www.allthingsdistributed.com/files/amazon-dynamo-sosp2007.pdf),” at *21st ACM Symposium on Operating Systems Principles* (SOSP), October 2007.",
								"\\[[20]()\\] Greg Linden: “[Make Data Useful](http://glinden.blogspot.co.uk/2006/12/slides-from-my-talk-at-stanford.html),” slides from presentation at Stanford University Data Mining class (CS345), December 2006.",
								"\\[[21]()\\] Tammy Everts: “[The Real Cost of Slow Time vs Downtime](http://www.webperformancetoday.com/2014/11/12/real-cost-slow-time-vs-downtime-slides/),” *webperformancetoday.com*, November 12, 2014.",
								"\\[[22]()\\] Jake Brutlag: “[Speed Matters for Google Web Search](http://googleresearch.blogspot.co.uk/2009/06/speed-matters.html),” *googleresearch.blogspot.co.uk*, June 22, 2009.",
								"\\[[23]()\\] Tyler Treat: “[Everything You Know About Latency Is Wrong](http://bravenewgeek.com/everything-you-know-about-latency-is-wrong/),” *bravenewgeek.com*, December 12, 2015.",
								"\\[[24]()\\] Jeffrey Dean and Luiz André Barroso: “[The Tail at Scale](http://cacm.acm.org/magazines/2013/2/160173-the-tail-at-scale/fulltext),” *Communications of the ACM*, volume 56, number 2, pages 74–80, February 2013. [doi:10.1145/2408776.2408794](http://dx.doi.org/10.1145/2408776.2408794)",
								"\\[[25]()\\] Graham Cormode, Vladislav Shkapenyuk, Divesh Srivastava, and Bojian Xu: “[Forward Decay: A Practical Time Decay Model for Streaming Systems](http://dimacs.rutgers.edu/~graham/pubs/papers/fwddecay.pdf),” at *25th IEEE International Conference on Data Engineering* (ICDE), March 2009.",
								"\\[[26]()\\] Ted Dunning and Otmar Ertl: “[Computing Extremely Accurate Quantiles Using t-Digests](https://github.com/tdunning/t-digest),” *github.com*, March 2014.",
								"\\[[27]()\\] Gil Tene: “[HdrHistogram](http://www.hdrhistogram.org/),” *hdrhistogram.org*.",
								"\\[[28]()\\] Baron Schwartz: “[Why Percentiles Don’t Work the Way You Think](https://www.vividcortex.com/blog/why-percentiles-dont-work-the-way-you-think),” *vividcortex.com*, December 7, 2015.",
								"\\[[29]()\\] James Hamilton: “[On Designing and Deploying Internet-Scale Services](https://www.usenix.org/legacy/events/lisa07/tech/full_papers/hamilton/hamilton.pdf),” at *21st Large Installation System Administration Conference* (LISA), November 2007.",
								"\\[[30]()\\] Brian Foote and Joseph Yoder: “[Big Ball of Mud](http://www.laputan.org/pub/foote/mud.pdf),” at *4th Conference on Pattern Languages of Programs* (PLoP), September 1997.",
								"\\[[31]()\\] Frederick P Brooks: “No Silver Bullet – Essence and Accident in Software Engineering,” in *The Mythical Man-Month*, Anniversary edition, Addison-Wesley, 1995. ISBN: 978-0-201-83595-3",
								"\\[[32]()\\] Ben Moseley and Peter Marks: “[Out of the Tar Pit](http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.93.8928),” at *BCS Software Practice Advancement* (SPA), 2006.",
								"\\[[33]()\\] Rich Hickey: “[Simple Made Easy](http://www.infoq.com/presentations/Simple-Made-Easy),” at *Strange Loop*, September 2011.",
								"\\[[34]()\\] Hongyu Pei Breivold, Ivica Crnkovic, and Peter J. Eriksson: “[Analyzing Software Evolvability](http://www.mrtc.mdh.se/publications/1478.pdf),” at *32nd Annual IEEE International Computer Software and Applications Conference* (COMPSAC), July 2008. [doi:10.1109/COMPSAC.2008.50](http://dx.doi.org/10.1109/COMPSAC.2008.50)",
							],
							summary: [
								"Discover key principles of data-intensive apps: reliability, scalability, maintainability, and emerging patterns.",
							],
							longSummary: [
								"This chapter explores the core principles of data-intensive applications, highlighting the need to meet functional and nonfunctional requirements such as reliability, scalability, and maintainability. Reliability ensures systems work correctly despite faults and errors. Scalability involves maintaining performance under increased load, requiring clear metrics. Maintainability simplifies systems for engineering teams through effective abstractions. Although no simple solutions exist, recurring patterns and techniques are discussed in later chapters. The chapter references 34 sources, including academic papers and technical blogs, on topics like fault tolerance, system failures, and software design philosophies.",
							],
							imageUrl:
								"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280077/blog-cover-images/p7nu2y8fg8n3ftfwnelw.webp",
						},
					],
				],
				summary: [
					"Explore the complexities of building reliable, scalable, and maintainable data-intensive applications.",
				],
				longSummary: [
					"Alan Kay compared the Internet to a natural resource due to its reliability. Modern applications face challenges from data volume, complexity, and change rates, relying on databases, caches, and processing systems. This book explores data systems' principles, focusing on reliability, scalability, and maintainability. Reliability involves fault tolerance and managing errors, scalability requires understanding load and performance, and maintainability emphasizes simplicity. It discusses techniques and architectures to tackle these challenges, highlighting the importance of good abstractions and system evolvability.",
				],
				imageUrl:
					"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280069/blog-cover-images/fwxqhnga2h2t571khper.webp",
			},
			{
				heading: ["# **Chapter 2. Data Models and Query Languages**"],
				children: [
					"> *The limits of my language mean the limits of my world.*",
					"> Ludwig Wittgenstein, *Tractatus Logico-Philosophicus* (1922)",
					"![](blob:https://johnfactotum.github.io/5bc41926-5014-43f8-86aa-85f97bd8bff3)",
					"Data models are perhaps the most important part of developing software, because they have such a profound effect: not only on how the software is written, but also on how we *think about the problem* that we are solving.",
					"Most applications are built by layering one data model on top of another. For each layer, the key question is: how is it *represented* in terms of the next-lower layer? For example:",
					"1. As an application developer, you look at the real world (in which there are people, organizations, goods, actions, money flows, sensors, etc.) and model it in terms of objects or data structures, and APIs that manipulate those data structures. Those structures are often specific to your application.",
					"2. When you want to store those data structures, you express them in terms of a general-purpose data model, such as JSON or XML documents, tables in a relational database, or a graph model.",
					"3. The engineers who built your database software decided on a way of representing that JSON/XML/relational/graph data in terms of bytes in memory, on disk, or on a network. The representation may allow the data to be queried, searched, manipulated, and processed in various ways.",
					"4. On yet lower levels, hardware engineers have figured out how to represent bytes in terms of electrical currents, pulses of light, magnetic fields, and more.",
					"In a complex application there may be more intermediary levels, such as APIs built upon APIs, but the basic idea is still the same: each layer hides the complexity of the layers below it by providing a clean data model. These abstractions allow different groups of people—for example, the engineers at the database vendor and the application developers using their database—to work together effectively.",
					"There are many different kinds of data models, and every data model embodies assumptions about how it is going to be used. Some kinds of usage are easy and some are not supported; some operations are fast and some perform badly; some data transformations feel natural and some are awkward.",
					"It can take a lot of effort to master just one data model (think how many books there are on relational data modeling). Building software is hard enough, even when working with just one data model and without worrying about its inner workings. But since the data model has such a profound effect on what the software above it can and can’t do, it’s important to choose one that is appropriate to the application.",
					"In this chapter we will look at a range of general-purpose data models for data storage and querying (point 2 in the preceding list). In particular, we will compare the relational model, the document model, and a few graph-based data models. We will also look at various query languages and compare their use cases. In [Chapter 3]() we will discuss how storage engines work; that is, how these data models are actually implemented (point 3 in the list).",
					[
						{
							heading: [
								"# **Relational Model Versus Document Model**",
							],
							children: [
								"The best-known data model today is probably that of SQL, based on the relational model proposed by Edgar Codd in 1970 \\[[1]()\\]: data is organized into *relations* (called *tables* in SQL), where each relation is an unordered collection of *tuples* (*rows* in SQL).",
								"The relational model was a theoretical proposal, and many people at the time doubted whether it could be implemented efficiently. However, by the mid-1980s, relational database management systems (RDBMSes) and SQL had become the tools of choice for most people who needed to store and query data with some kind of regular structure. The dominance of relational databases has lasted around 25‒30 years—an eternity in computing history.",
								"The roots of relational databases lie in *business data processing*, which was performed on mainframe computers in the 1960s and ’70s. The use cases appear mundane from today’s perspective: typically *transaction processing* (entering sales or banking transactions, airline reservations, stock-keeping in warehouses) and *batch processing* (customer invoicing, payroll, reporting).",
								"Other databases at that time forced application developers to think a lot about the internal representation of the data in the database. The goal of the relational model was to hide that implementation detail behind a cleaner interface.",
								"Over the years, there have been many competing approaches to data storage and querying. In the 1970s and early 1980s, the *network model* and the *hierarchical model* were the main alternatives, but the relational model came to dominate them. Object databases came and went again in the late 1980s and early 1990s. XML databases appeared in the early 2000s, but have only seen niche adoption. Each competitor to the relational model generated a lot of hype in its time, but it never lasted \\[[2]()\\].",
								"As computers became vastly more powerful and networked, they started being used for increasingly diverse purposes. And remarkably, relational databases turned out to generalize very well, beyond their original scope of business data processing, to a broad variety of use cases. Much of what you see on the web today is still powered by relational databases, be it online publishing, discussion, social networking, ecommerce, games, software-as-a-service productivity applications, or much more.",
								[
									{
										heading: ["## **The Birth of NoSQL**"],
										children: [
											"Now, in the 2010s, *NoSQL* is the latest attempt to overthrow the relational model’s dominance. The name “NoSQL” is unfortunate, since it doesn’t actually refer to any particular technology—it was originally intended simply as a catchy Twitter hashtag for a meetup on open source, distributed, nonrelational databases in 2009 \\[[3]()\\]. Nevertheless, the term struck a nerve and quickly spread through the web startup community and beyond. A number of interesting database systems are now associated with the #NoSQL hashtag, and it has been retroactively reinterpreted as *Not Only SQL* \\[[4]()\\].",
											"There are several driving forces behind the adoption of NoSQL databases, including:",
											"* A need for greater scalability than relational databases can easily achieve, including very large datasets or very high write throughput",
											"* A widespread preference for free and open source software over commercial database products",
											"* Specialized query operations that are not well supported by the relational model",
											"* Frustration with the restrictiveness of relational schemas, and a desire for a more dynamic and expressive data model \\[[5]()\\]",
											"Different applications have different requirements, and the best choice of technology for one use case may well be different from the best choice for another use case. It therefore seems likely that in the foreseeable future, relational databases will continue to be used alongside a broad variety of nonrelational datastores—an idea that is sometimes called *polyglot persistence* \\[[3]()\\].",
										],
										summary: [
											"NoSQL revolutionized data management, challenging relational databases with scalability and flexibility in the 2010s.",
										],
										longSummary: [
											"In the 2010s, NoSQL emerged as a significant challenge to the dominance of relational databases. Initially a Twitter hashtag for a 2009 meetup on open source, distributed, nonrelational databases, NoSQL quickly evolved to mean Not Only SQL. Its adoption was driven by the need for greater scalability, a preference for open source software, specialized query operations, and frustration with restrictive relational schemas. Different applications have unique requirements, making technology choices vary by use case. Relational databases are likely to continue being used alongside nonrelational datastores, a strategy known as polyglot persistence.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747276339/blog-cover-images/cwp161ahfwm9uqbhvoax.webp",
									},
									{
										heading: [
											"## **The Object-Relational Mismatch**",
										],
										children: [
											"Most application development today is done in object-oriented programming languages, which leads to a common criticism of the SQL data model: if data is stored in relational tables, an awkward translation layer is required between the objects in the application code and the database model of tables, rows, and columns. The disconnect between the models is sometimes called an *impedance mismatch*.[i]()",
											"Object-relational mapping (ORM) frameworks like ActiveRecord and Hibernate reduce the amount of boilerplate code required for this translation layer, but they can’t completely hide the differences between the two models.",
											"For example, [Figure 2-1](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#fig_billgates_relational) illustrates how a résumé (a LinkedIn profile) could be expressed in a relational schema. The profile as a whole can be identified by a unique identifier, `user_id`. Fields like `first_name` and `last_name` appear exactly once per user, so they can be modeled as columns on the `users` table. However, most people have had more than one job in their career (positions), and people may have varying numbers of periods of education and any number of pieces of contact information. There is a one-to-many relationship from the user to these items, which can be represented in various ways:",
											"* In the traditional SQL model (prior to SQL:1999), the most common normalized representation is to put positions, education, and contact information in separate tables, with a foreign key reference to the `users` table, as in [Figure 2-1](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#fig_billgates_relational).",
											"* Later versions of the SQL standard added support for structured datatypes and XML data; this allowed multi-valued data to be stored within a single row, with support for querying and indexing inside those documents. These features are supported to varying degrees by Oracle, IBM DB2, MS SQL Server, and PostgreSQL \\[[6](), [7]()\\]. A JSON datatype is also supported by several databases, including IBM DB2, MySQL, and PostgreSQL \\[[8]()\\].",
											"* A third option is to encode jobs, education, and contact info as a JSON or XML document, store it on a text column in the database, and let the application interpret its structure and content. In this setup, you typically cannot use the database to query for values inside that encoded column.",
											"![ddia 0201](blob:https://johnfactotum.github.io/c9da0fff-af6e-4d30-85c1-33ed257637fa)",
											"###### *Figure 2-1. Representing a LinkedIn profile using a relational schema. Photo of Bill Gates courtesy of Wikimedia Commons, Ricardo Stuckert, Agência Brasil.*",
											"For a data structure like a résumé, which is mostly a self-contained *document*, a JSON representation can be quite appropriate: see [Example 2-1](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#fig_billgates_json). JSON has the appeal of being much simpler than XML. Document-oriented databases like MongoDB \\[[9]()\\], RethinkDB \\[[10]()\\], CouchDB \\[[11]()\\], and Espresso \\[[12]()\\] support this data model.",
											"##### *Example 2-1. Representing a LinkedIn profile as a JSON document*",
											'```\n{\n  "user_id":     251,\n  "first_name":  "Bill",\n  "last_name":   "Gates",\n  "summary":     "Co-chair of the Bill & Melinda Gates... Active blogger.",\n  "region_id":   "us:91",\n  "industry_id": 131,\n  "photo_url":   "/p/7/000/253/05b/308dd6e.jpg",\n  "positions": [\n    {"job_title": "Co-chair", "organization": "Bill & Melinda Gates Foundation"},\n    {"job_title": "Co-founder, Chairman", "organization": "Microsoft"}\n  ],\n  "education": [\n    {"school_name": "Harvard University",       "start": 1973, "end": 1975},\n    {"school_name": "Lakeside School, Seattle", "start": null, "end": null}\n  ],\n  "contact_info": {\n    "blog":    "http://thegatesnotes.com",\n    "twitter": "http://twitter.com/BillGates"\n  }\n}\n```',
											"Some developers feel that the JSON model reduces the impedance mismatch between the application code and the storage layer. However, as we shall see in [Chapter 4](), there are also problems with JSON as a data encoding format. The lack of a schema is often cited as an advantage; we will discuss this in [“Schema flexibility in the document model”](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#sec_datamodels_schema_flexibility).",
											"The JSON representation has better *locality* than the multi-table schema in [Figure 2-1](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#fig_billgates_relational). If you want to fetch a profile in the relational example, you need to either perform multiple queries (query each table by `user_id`) or perform a messy multi-way join between the `users` table and its subordinate tables. In the JSON representation, all the relevant information is in one place, and one query is sufficient.",
											"The one-to-many relationships from the user profile to the user’s positions, educational history, and contact information imply a tree structure in the data, and the JSON representation makes this tree structure explicit (see [Figure 2-2](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#fig_json_tree)).",
											"![ddia 0202](blob:https://johnfactotum.github.io/d654869b-6fd9-4a64-a52b-88835c083399)",
											"###### *Figure 2-2. One-to-many relationships forming a tree structure.*",
										],
										summary: [
											"Overcome SQL and code mismatch: explore JSON for efficient, unified data representation.",
										],
										longSummary: [
											"Object-oriented programming often clashes with SQL data models, creating an 'impedance mismatch' that necessitates a translation layer. While ORM frameworks help, they can't fully bridge these differences. For instance, simple fields like first_name fit neatly into a users table, but one-to-many relationships, such as positions or education, require more complex handling. Traditional SQL uses separate tables with foreign keys, while newer versions support structured datatypes or JSON/XML encoding in text columns. For document-like structures like résumés, JSON representation, as used in databases like MongoDB, offers better locality and explicit tree structures, potentially reducing impedance mismatch.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747276339/blog-cover-images/obw8sbdda5tjzo1eekxv.webp",
									},
									{
										heading: [
											"## **Many-to-One and Many-to-Many Relationships**",
										],
										children: [
											'In [Example 2-1](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#fig_billgates_json) in the preceding section, `region_id` and `industry_id` are given as IDs, not as plain-text strings `"Greater Seattle Area"` and `"Philanthropy"`. Why?',
											"If the user interface has free-text fields for entering the region and the industry, it makes sense to store them as plain-text strings. But there are advantages to having standardized lists of geographic regions and industries, and letting users choose from a drop-down list or autocompleter:",
											"* Consistent style and spelling across profiles",
											"* Avoiding ambiguity (e.g., if there are several cities with the same name)",
											"* Ease of updating—the name is stored in only one place, so it is easy to update across the board if it ever needs to be changed (e.g., change of a city name due to political events)",
											"* Localization support—when the site is translated into other languages, the standardized lists can be localized, so the region and industry can be displayed in the viewer’s language",
											'* Better search—e.g., a search for philanthropists in the state of Washington can match this profile, because the list of regions can encode the fact that Seattle is in Washington (which is not apparent from the string `"Greater Seattle Area"`)',
											"Whether you store an ID or a text string is a question of duplication. When you use an ID, the information that is meaningful to humans (such as the word *Philanthropy*) is stored in only one place, and everything that refers to it uses an ID (which only has meaning within the database). When you store the text directly, you are duplicating the human-meaningful information in every record that uses it.",
											"The advantage of using an ID is that because it has no meaning to humans, it never needs to change: the ID can remain the same, even if the information it identifies changes. Anything that is meaningful to humans may need to change sometime in the future—and if that information is duplicated, all the redundant copies need to be updated. That incurs write overheads, and risks inconsistencies (where some copies of the information are updated but others aren’t). Removing such duplication is the key idea behind *normalization* in databases.[ii]()",
											"###### **Note**",
											"Database administrators and developers love to argue about normalization and denormalization, but we will suspend judgment for now. In [Part III]() of this book we will return to this topic and explore systematic ways of dealing with caching, denormalization, and derived data.",
											"Unfortunately, normalizing this data requires *many-to-one* relationships (many people live in one particular region, many people work in one particular industry), which don’t fit nicely into the document model. In relational databases, it’s normal to refer to rows in other tables by ID, because joins are easy. In document databases, joins are not needed for one-to-many tree structures, and support for joins is often weak.[iii]()",
											"If the database itself does not support joins, you have to emulate a join in application code by making multiple queries to the database. (In this case, the lists of regions and industries are probably small and slow-changing enough that the application can simply keep them in memory. But nevertheless, the work of making the join is shifted from the database to the application code.)",
											"Moreover, even if the initial version of an application fits well in a join-free document model, data has a tendency of becoming more interconnected as features are added to applications. For example, consider some changes we could make to the résumé example:",
											"Organizations and schools as entities",
											"In the previous description, `organization` (the company where the user worked) and `school_name` (where they studied) are just strings. Perhaps they should be references to entities instead? Then each organization, school, or university could have its own web page (with logo, news feed, etc.); each résumé could link to the organizations and schools that it mentions, and include their logos and other information (see [Figure 2-3](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#fig_datamodels_linked_entity) for an example from LinkedIn).",
											"Recommendations",
											"Say you want to add a new feature: one user can write a recommendation for another user. The recommendation is shown on the résumé of the user who was recommended, together with the name and photo of the user making the recommendation. If the recommender updates their photo, any recommendations they have written need to reflect the new photo. Therefore, the recommendation should have a reference to the author’s profile.",
											"![ddia 0203](blob:https://johnfactotum.github.io/2dc99fa9-3ee5-493e-b977-3de3decc3f05)",
											"###### *Figure 2-3. The company name is not just a string, but a link to a company entity. Screenshot of linkedin.com.*",
											"[Figure 2-4](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#fig_datamodels_many_to_many) illustrates how these new features require many-to-many relationships. The data within each dotted rectangle can be grouped into one document, but the references to organizations, schools, and other users need to be represented as references, and require joins when queried.",
											"![ddia 0204](blob:https://johnfactotum.github.io/37d0117a-8e89-4b05-8db6-3c7a58438923)",
											"###### *Figure 2-4. Extending résumés with many-to-many relationships.*",
										],
										summary: [
											"Using IDs ensures consistency, localization, and efficient updates, but complicates document database relationships.",
										],
										longSummary: [
											"Using IDs instead of plain-text strings offers several advantages, including consistent style, ease of updates, localization support, and improved search capabilities. This approach reduces duplication by storing human-meaningful information in one place, while everything else uses an ID. IDs remain unchanged even if the information they identify changes, avoiding inconsistencies. However, this normalization requires many-to-one relationships that don't fit well into document models, necessitating multiple queries to emulate joins. As applications evolve, data becomes more interconnected, requiring joins for features like user recommendations, leading to debates on normalization and denormalization, which will be explored further in Part III.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747276340/blog-cover-images/onazcrjoukhvjtitmnrr.webp",
									},
									{
										heading: [
											"## **Are Document Databases Repeating History?**",
										],
										children: [
											"While many-to-many relationships and joins are routinely used in relational databases, document databases and NoSQL reopened the debate on how best to represent such relationships in a database. This debate is much older than NoSQL—in fact, it goes back to the very earliest computerized database systems.",
											"The most popular database for business data processing in the 1970s was IBM’s *Information Management System* (IMS), originally developed for stock-keeping in the Apollo space program and first commercially released in 1968 \\[[13]()\\]. It is still in use and maintained today, running on OS/390 on IBM mainframes \\[[14]()\\].",
											"The design of IMS used a fairly simple data model called the *hierarchical model*, which has some remarkable similarities to the JSON model used by document databases \\[[2]()\\]. It represented all data as a tree of records nested within records, much like the JSON structure of [Figure 2-2](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#fig_json_tree).",
											"Like document databases, IMS worked well for one-to-many relationships, but it made many-to-many relationships difficult, and it didn’t support joins. Developers had to decide whether to duplicate (denormalize) data or to manually resolve references from one record to another. These problems of the 1960s and ’70s were very much like the problems that developers are running into with document databases today \\[[15]()\\].",
											"Various solutions were proposed to solve the limitations of the hierarchical model. The two most prominent were the *relational model* (which became SQL, and took over the world) and the *network model* (which initially had a large following but eventually faded into obscurity). The “great debate” between these two camps lasted for much of the 1970s \\[[2]()\\].",
											"Since the problem that the two models were solving is still so relevant today, it’s worth briefly revisiting this debate in today’s light.",
											[
												{
													heading: [
														"### **The network model**",
													],
													children: [
														"The network model was standardized by a committee called the Conference on Data Systems Languages (CODASYL) and implemented by several different database vendors; it is also known as the *CODASYL model* \\[[16]()\\].",
														'The CODASYL model was a generalization of the hierarchical model. In the tree structure of the hierarchical model, every record has exactly one parent; in the network model, a record could have multiple parents. For example, there could be one record for the `"Greater Seattle Area"` region, and every user who lived in that region could be linked to it. This allowed many-to-one and many-to-many relationships to be modeled.',
														"The links between records in the network model were not foreign keys, but more like pointers in a programming language (while still being stored on disk). The only way of accessing a record was to follow a path from a root record along these chains of links. This was called an *access path*.",
														"In the simplest case, an access path could be like the traversal of a linked list: start at the head of the list, and look at one record at a time until you find the one you want. But in a world of many-to-many relationships, several different paths can lead to the same record, and a programmer working with the network model had to keep track of these different access paths in their head.",
														"A query in CODASYL was performed by moving a cursor through the database by iterating over lists of records and following access paths. If a record had multiple parents (i.e., multiple incoming pointers from other records), the application code had to keep track of all the various relationships. Even CODASYL committee members admitted that this was like navigating around an *n*\\-dimensional data space \\[[17]()\\].",
														"Although manual access path selection was able to make the most efficient use of the very limited hardware capabilities in the 1970s (such as tape drives, whose seeks are extremely slow), the problem was that they made the code for querying and updating the database complicated and inflexible. With both the hierarchical and the network model, if you didn’t have a path to the data you wanted, you were in a difficult situation. You could change the access paths, but then you had to go through a lot of handwritten database query code and rewrite it to handle the new access paths. It was difficult to make changes to an application’s data model.",
													],
													summary: [
														"Discover CODASYL: a complex 1970s database model with flexible relationships but rigid querying.",
													],
													longSummary: [
														"The CODASYL network model, standardized by the Conference on Data Systems Languages, expanded the hierarchical model by allowing records to have multiple parents, enabling many-to-one and many-to-many relationships. Instead of using foreign keys, it utilized links akin to pointers, requiring access paths to navigate records from root records. Queries involved moving a cursor through these paths, with application code managing relationships. While this approach efficiently utilized 1970s hardware, it complicated and inflexibly handled database querying and updating. Modifying an application's data model was challenging, necessitating rewriting query code to accommodate new access paths.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747276351/blog-cover-images/cs0oz6bnisr0gfd9zvzn.webp",
												},
												{
													heading: [
														"### **The relational model**",
													],
													children: [
														"What the relational model did, by contrast, was to lay out all the data in the open: a relation (table) is simply a collection of tuples (rows), and that’s it. There are no labyrinthine nested structures, no complicated access paths to follow if you want to look at the data. You can read any or all of the rows in a table, selecting those that match an arbitrary condition. You can read a particular row by designating some columns as a key and matching on those. You can insert a new row into any table without worrying about foreign key relationships to and from other tables.[iv]()",
														"In a relational database, the query optimizer automatically decides which parts of the query to execute in which order, and which indexes to use. Those choices are effectively the “access path,” but the big difference is that they are made automatically by the query optimizer, not by the application developer, so we rarely need to think about them.",
														"If you want to query your data in new ways, you can just declare a new index, and queries will automatically use whichever indexes are most appropriate. You don’t need to change your queries to take advantage of a new index. (See also [“Query Languages for Data”](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#sec_datamodels_query).) The relational model thus made it much easier to add new features to applications.",
														"Query optimizers for relational databases are complicated beasts, and they have consumed many years of research and development effort \\[[18]()\\]. But a key insight of the relational model was this: you only need to build a query optimizer once, and then all applications that use the database can benefit from it. If you don’t have a query optimizer, it’s easier to handcode the access paths for a particular query than to write a general-purpose optimizer—but the general-purpose solution wins in the long run.",
													],
													summary: [
														"Relational databases simplify data access, optimizing queries automatically without developer intervention.",
													],
													longSummary: [
														"The relational model simplifies data management by organizing data into tables (relations) with rows (tuples), eliminating complex nested structures and access paths. You can easily read rows based on conditions, use keys to find specific rows, and insert new rows without worrying about foreign key relationships. The query optimizer in relational databases automatically determines execution order and index usage, creating access paths without developer input. New indexes can be declared and used by queries without modification. Although query optimizers are complex and required extensive research, their development benefits all applications, offering a superior general-purpose solution over handcoding specific access paths.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747276348/blog-cover-images/psg2hc3uiwzxqa0cqfqj.webp",
												},
												{
													heading: [
														"### **Comparison to document databases**",
													],
													children: [
														"Document databases reverted back to the hierarchical model in one aspect: storing nested records (one-to-many relationships, like `positions`, `education`, and `contact_info` in [Figure 2-1](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#fig_billgates_relational)) within their parent record rather than in a separate table.",
														"However, when it comes to representing many-to-one and many-to-many relationships, relational and document databases are not fundamentally different: in both cases, the related item is referenced by a unique identifier, which is called a *foreign key* in the relational model and a *document reference* in the document model \\[[9]()\\]. That identifier is resolved at read time by using a join or follow-up queries. To date, document databases have not followed the path of CODASYL.",
													],
													summary: [
														"Document databases nest records, using unique identifiers like relational databases, but avoid CODASYL's path.",
													],
													longSummary: [
														"Document databases have returned to a hierarchical model by storing nested records within their parent records instead of separate tables. Despite this, they resemble relational databases in handling many-to-one and many-to-many relationships, using unique identifiers—foreign keys in relational models and document references in document models—resolved at read time through joins or follow-up queries. Unlike the CODASYL approach, document databases maintain their distinct structure.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747276351/blog-cover-images/wvpgg7r3cpiwwye7fzwz.webp",
												},
											],
										],
										summary: [
											"The debate on database models—relational vs. document—remains crucial in modern data management.",
										],
										longSummary: [
											"The debate on representing many-to-many relationships in databases, dating back to IBM's IMS in 1968, remains relevant today with the rise of document databases and NoSQL. IMS, like modern document databases, excelled in one-to-many relationships but struggled with many-to-many relationships, lacking join support and requiring data duplication or manual reference resolution. The 1970s saw a \"great debate\" between the relational model, which became dominant, and the network model, known as the CODASYL model, which faded. The relational model's simplicity and automatic query optimization made it superior, while document databases reverted to hierarchical models, using unique identifiers for complex relationships.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747276340/blog-cover-images/uoqpfahdgyr11g6j0rkw.webp",
									},
									{
										heading: [
											"## **Relational Versus Document Databases Today**",
										],
										children: [
											"There are many differences to consider when comparing relational databases to document databases, including their fault-tolerance properties (see [Chapter 5]()) and handling of concurrency (see [Chapter 7]()). In this chapter, we will concentrate only on the differences in the data model.",
											"The main arguments in favor of the document data model are schema flexibility, better performance due to locality, and that for some applications it is closer to the data structures used by the application. The relational model counters by providing better support for joins, and many-to-one and many-to-many relationships.",
											[
												{
													heading: [
														"### **Which data model leads to simpler application code?**",
													],
													children: [
														"If the data in your application has a document-like structure (i.e., a tree of one-to-many relationships, where typically the entire tree is loaded at once), then it’s probably a good idea to use a document model. The relational technique of *shredding*—splitting a document-like structure into multiple tables (like `positions`, `education`, and `contact_info` in [Figure 2-1](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#fig_billgates_relational))—can lead to cumbersome schemas and unnecessarily complicated application code.",
														"The document model has limitations: for example, you cannot refer directly to a nested item within a document, but instead you need to say something like “the second item in the list of positions for user 251” (much like an access path in the hierarchical model). However, as long as documents are not too deeply nested, that is not usually a problem.",
														"The poor support for joins in document databases may or may not be a problem, depending on the application. For example, many-to-many relationships may never be needed in an analytics application that uses a document database to record which events occurred at which time \\[[19]()\\].",
														"However, if your application does use many-to-many relationships, the document model becomes less appealing. It’s possible to reduce the need for joins by denormalizing, but then the application code needs to do additional work to keep the denormalized data consistent. Joins can be emulated in application code by making multiple requests to the database, but that also moves complexity into the application and is usually slower than a join performed by specialized code inside the database. In such cases, using a document model can lead to significantly more complex application code and worse performance \\[[15]()\\].",
														"It’s not possible to say in general which data model leads to simpler application code; it depends on the kinds of relationships that exist between data items. For highly interconnected data, the document model is awkward, the relational model is acceptable, and graph models (see [“Graph-Like Data Models”](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#sec_datamodels_graph)) are the most natural.",
													],
													summary: [
														"Choose the right data model: document for trees, relational for joins, graph for networks.",
													],
													longSummary: [
														"Use a document model for applications with a tree of one-to-many relationships. While they struggle with referencing nested items and joins, these issues are manageable unless documents are deeply nested. For many-to-many relationships, document models are less ideal due to the need for denormalization or emulating joins, complicating code and reducing performance. Choose your data model based on data relationships: document models for tree-structured data, relational models for interconnected data with some joins, and graph models for highly interconnected data.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747276357/blog-cover-images/lizxdkpmwcvzgqmbgovu.webp",
												},
												{
													heading: [
														"### **Schema flexibility in the document model**",
													],
													children: [
														"Most document databases, and the JSON support in relational databases, do not enforce any schema on the data in documents. XML support in relational databases usually comes with optional schema validation. No schema means that arbitrary keys and values can be added to a document, and when reading, clients have no guarantees as to what fields the documents may contain.",
														"Document databases are sometimes called *schemaless*, but that’s misleading, as the code that reads the data usually assumes some kind of structure—i.e., there is an implicit schema, but it is not enforced by the database \\[[20]()\\]. A more accurate term is *schema-on-read* (the structure of the data is implicit, and only interpreted when the data is read), in contrast with *schema-on-write* (the traditional approach of relational databases, where the schema is explicit and the database ensures all written data conforms to it) \\[[21]()\\].",
														"Schema-on-read is similar to dynamic (runtime) type checking in programming languages, whereas schema-on-write is similar to static (compile-time) type checking. Just as the advocates of static and dynamic type checking have big debates about their relative merits \\[[22]()\\], enforcement of schemas in database is a contentious topic, and in general there’s no right or wrong answer.",
														"The difference between the approaches is particularly noticeable in situations where an application wants to change the format of its data. For example, say you are currently storing each user’s full name in one field, and you instead want to store the first name and last name separately \\[[23]()\\]. In a document database, you would just start writing new documents with the new fields and have code in the application that handles the case when old documents are read. For example:",
														'```\nif (user && user.name && !user.first_name) {\n    // Documents written before Dec 8, 2013 don\'t have first_name\n    user.first_name = user.name.split(" ")[0];\n}\n```',
														"On the other hand, in a “statically typed” database schema, you would typically perform a *migration* along the lines of:",
														"```\nALTER TABLE users ADD COLUMN first_name text;\nUPDATE users SET first_name = split_part(name, ' ', 1);      -- PostgreSQL\nUPDATE users SET first_name = substring_index(name, ' ', 1);      -- MySQL\n```",
														"Schema changes have a bad reputation of being slow and requiring downtime. This reputation is not entirely deserved: most relational database systems execute the `ALTER TABLE` statement in a few milliseconds. MySQL is a notable exception—it copies the entire table on `ALTER TABLE`, which can mean minutes or even hours of downtime when altering a large table—although various tools exist to work around this limitation \\[[24](), [25](), [26]()\\].",
														"Running the `UPDATE` statement on a large table is likely to be slow on any database, since every row needs to be rewritten. If that is not acceptable, the application can leave `first_name` set to its default of `NULL` and fill it in at read time, like it would with a document database.",
														"The schema-on-read approach is advantageous if the items in the collection don’t all have the same structure for some reason (i.e., the data is heterogeneous)—for example, because:",
														"* There are many different types of objects, and it is not practical to put each type of object in its own table.",
														"* The structure of the data is determined by external systems over which you have no control and which may change at any time.",
														"In situations like these, a schema may hurt more than it helps, and schemaless documents can be a much more natural data model. But in cases where all records are expected to have the same structure, schemas are a useful mechanism for documenting and enforcing that structure. We will discuss schemas and schema evolution in more detail in [Chapter 4]().",
													],
													summary: [
														"Document databases adapt to change easily, unlike rigid relational databases with fixed schemas.",
													],
													longSummary: [
														"Document databases, often termed schemaless, actually use schema-on-read, interpreting structure when data is accessed, unlike traditional relational databases that use schema-on-write with explicit schemas. This distinction is crucial when altering data formats; document databases allow new documents with new fields, managing old formats in application code, while relational databases require migrations using ALTER TABLE and UPDATE statements. Although schema changes are often seen as slow, most systems execute ALTER TABLE quickly, except MySQL. Schema-on-read is advantageous for heterogeneous data collections with varying structures, but explicit schemas are beneficial when records share the same structure, ensuring consistency.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747276360/blog-cover-images/bialiu2w1jtwwj1dcokw.webp",
												},
												{
													heading: [
														"### **Data locality for queries**",
													],
													children: [
														"A document is usually stored as a single continuous string, encoded as JSON, XML, or a binary variant thereof (such as MongoDB’s BSON). If your application often needs to access the entire document (for example, to render it on a web page), there is a performance advantage to this *storage locality*. If data is split across multiple tables, like in [Figure 2-1](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#fig_billgates_relational), multiple index lookups are required to retrieve it all, which may require more disk seeks and take more time.",
														"The locality advantage only applies if you need large parts of the document at the same time. The database typically needs to load the entire document, even if you access only a small portion of it, which can be wasteful on large documents. On updates to a document, the entire document usually needs to be rewritten—only modifications that don’t change the encoded size of a document can easily be performed in place \\[[19]()\\]. For these reasons, it is generally recommended that you keep documents fairly small and avoid writes that increase the size of a document \\[[9]()\\]. These performance limitations significantly reduce the set of situations in which document databases are useful.",
														"It’s worth pointing out that the idea of grouping related data together for locality is not limited to the document model. For example, Google’s Spanner database offers the same locality properties in a relational data model, by allowing the schema to declare that a table’s rows should be interleaved (nested) within a parent table \\[[27]()\\]. Oracle allows the same, using a feature called *multi-table index cluster tables* \\[[28]()\\]. The *column-family* concept in the Bigtable data model (used in Cassandra and HBase) has a similar purpose of managing locality \\[[29]()\\].",
														"We will also see more on locality in [Chapter 3]().",
													],
													summary: [
														"Efficient data storage: JSON/XML boost performance, but keep documents small for optimal updates.",
													],
													longSummary: [
														"Documents stored as continuous strings in formats like JSON or XML offer performance benefits by enabling storage locality, which is advantageous when accessing entire documents, as it avoids multiple index lookups typical in relational models. However, this benefit diminishes when only small portions are needed, as the entire document is loaded. Updates necessitate rewriting the whole document, so it's best to keep documents small and avoid modifications that increase size. Grouping related data for locality isn't unique to document models; similar features exist in relational models like Google's Spanner, Oracle's multi-table index cluster tables, and Bigtable's column-family concept.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747276360/blog-cover-images/xb5qvyz0pbc3nyadajre.webp",
												},
												{
													heading: [
														"### **Convergence of document and relational databases**",
													],
													children: [
														"Most relational database systems (other than MySQL) have supported XML since the mid-2000s. This includes functions to make local modifications to XML documents and the ability to index and query inside XML documents, which allows applications to use data models very similar to what they would do when using a document database.",
														"PostgreSQL since version 9.3 \\[[8]()\\], MySQL since version 5.7, and IBM DB2 since version 10.5 \\[[30]()\\] also have a similar level of support for JSON documents. Given the popularity of JSON for web APIs, it is likely that other relational databases will follow in their footsteps and add JSON support.",
														"On the document database side, RethinkDB supports relational-like joins in its query language, and some MongoDB drivers automatically resolve database references (effectively performing a client-side join, although this is likely to be slower than a join performed in the database since it requires additional network round-trips and is less optimized).",
														"It seems that relational and document databases are becoming more similar over time, and that is a good thing: the data models complement each other.[v]() If a database is able to handle document-like data and also perform relational queries on it, applications can use the combination of features that best fits their needs.",
														"A hybrid of the relational and document models is a good route for databases to take in the future.",
													],
													summary: [
														"Relational and document databases converge, blending strengths for a hybrid future in data management.",
													],
													longSummary: [
														"Since the mid-2000s, most relational databases have supported XML, offering functions for local modifications, indexing, and querying within XML documents. PostgreSQL, MySQL, and IBM DB2 have similarly embraced JSON, reflecting its popularity in web APIs. Document databases like RethinkDB now support relational-like joins, while MongoDB provides client-side join functionality via database references. This convergence of relational and document databases is advantageous, as their data models complement each other. A hybrid approach, combining relational and document models, is a promising direction for future database development.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747276358/blog-cover-images/xe2pihcinhcs4txbjtzs.webp",
												},
											],
										],
										summary: [
											"Relational vs. document databases: Choose based on data structure, relationships, and performance needs.",
										],
										longSummary: [
											"When comparing relational and document databases, key differences include fault-tolerance, concurrency handling, and data model flexibility. Document databases offer schema flexibility, better performance due to data locality, and alignment with application data structures, ideal for tree-structured data. They struggle with many-to-many relationships and require denormalization or complex code for joins. Relational databases excel at handling interconnected data with joins and enforce schemas, beneficial for consistent data structures. Document databases use schema-on-read for easy adaptation, while relational databases need schema migrations. Both models are converging, suggesting a hybrid approach may be the future.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747276341/blog-cover-images/mtys2ysvxvjfwo2qbx76.webp",
									},
								],
							],
							summary: [
								"Relational databases, dominant since the 1980s, face challenges from NoSQL and document models.",
							],
							longSummary: [
								"The relational model, introduced by Edgar Codd in 1970, organizes data into tables and became dominant by the mid-1980s, surpassing other database models. Initially used in business, it now powers diverse web applications. In the 2010s, NoSQL emerged for scalability and specialized queries, using a JSON model for better data locality but struggling with many-to-many relationships. Relational databases excel in interconnected data with joins, while document databases are ideal for tree-structured data. Both models are converging, offering complementary strengths for future database solutions.",
							],
							imageUrl:
								"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747276321/blog-cover-images/ql34mg3s5yavtnmmae6a.webp",
						},
						{
							heading: ["# **Query Languages for Data**"],
							children: [
								"When the relational model was introduced, it included a new way of querying data: SQL is a *declarative* query language, whereas IMS and CODASYL queried the database using *imperative* code. What does that mean?",
								"Many commonly used programming languages are imperative. For example, if you have a list of animal species, you might write something like this to return only the sharks in the list:",
								'```\nfunction getSharks() {\n    var sharks = [];\n    for (var i = 0; i < animals.length; i++) {\n        if (animals[i].family === "Sharks") {\n            sharks.push(animals[i]);\n        }\n    }\n    return sharks;\n}\n```',
								"In the relational algebra, you would instead write:",
								"> *sharks = σfamily = “Sharks” (animals)*",
								"where σ (the Greek letter sigma) is the selection operator, returning only those animals that match the condition *family = “Sharks”*.",
								"When SQL was defined, it followed the structure of the relational algebra fairly closely:",
								"```\nSELECT * FROM animals WHERE family = 'Sharks';\n```",
								"An imperative language tells the computer to perform certain operations in a certain order. You can imagine stepping through the code line by line, evaluating conditions, updating variables, and deciding whether to go around the loop one more time.",
								"In a declarative query language, like SQL or relational algebra, you just specify the pattern of the data you want—what conditions the results must meet, and how you want the data to be transformed (e.g., sorted, grouped, and aggregated)—but not *how* to achieve that goal. It is up to the database system’s query optimizer to decide which indexes and which join methods to use, and in which order to execute various parts of the query.",
								"A declarative query language is attractive because it is typically more concise and easier to work with than an imperative API. But more importantly, it also hides implementation details of the database engine, which makes it possible for the database system to introduce performance improvements without requiring any changes to queries.",
								"For example, in the imperative code shown at the beginning of this section, the list of animals appears in a particular order. If the database wants to reclaim unused disk space behind the scenes, it might need to move records around, changing the order in which the animals appear. Can the database do that safely, without breaking queries?",
								"The SQL example doesn’t guarantee any particular ordering, and so it doesn’t mind if the order changes. But if the query is written as imperative code, the database can never be sure whether the code is relying on the ordering or not. The fact that SQL is more limited in functionality gives the database much more room for automatic optimizations.",
								"Finally, declarative languages often lend themselves to parallel execution. Today, CPUs are getting faster by adding more cores, not by running at significantly higher clock speeds than before \\[[31]()\\]. Imperative code is very hard to parallelize across multiple cores and multiple machines, because it specifies instructions that must be performed in a particular order. Declarative languages have a better chance of getting faster in parallel execution because they specify only the pattern of the results, not the algorithm that is used to determine the results. The database is free to use a parallel implementation of the query language, if appropriate \\[[32]()\\].",
								[
									{
										heading: [
											"## **Declarative Queries on the Web**",
										],
										children: [
											"The advantages of declarative query languages are not limited to just databases. To illustrate the point, let’s compare declarative and imperative approaches in a completely different environment: a web browser.",
											"Say you have a website about animals in the ocean. The user is currently viewing the page on sharks, so you mark the navigation item “Sharks” as currently selected, like this:",
											'```\n<ul>\n    <li class="selected"> \n```',
											"[![1](blob:https://johnfactotum.github.io/8c04f3a5-edc3-4bec-800d-97b8aea6bc21)](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#callout_data_models_and_query_languages_CO1-1)",
											"**`<p>`**`Sharks`**`</p>`**[![2](blob:https://johnfactotum.github.io/4fb37c6d-0cd4-4ef8-ad77-0a2954542bc4)](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#callout_data_models_and_query_languages_CO1-2)**`<ul>`** **`<li>`**`Great White Shark`**`</li>`** **`<li>`**`Tiger Shark`**`</li>`** **`<li>`**`Hammerhead Shark`**`</li>`** **`</ul>`** **`</li>`** **`<li>`** **`<p>`**`Whales`**`</p>`** **`<ul>`** **`<li>`**`Blue Whale`**`</li>`** **`<li>`**`Humpback Whale`**`</li>`** **`<li>`**`Fin Whale`**`</li>`** **`</ul>`** **`</li>`** **`</ul>`**",
											"[![1](blob:https://johnfactotum.github.io/8c04f3a5-edc3-4bec-800d-97b8aea6bc21)](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#co_data_models_and_query_languages_CO1-1)",
											'The selected item is marked with the CSS class `"selected"`.',
											"[![2](blob:https://johnfactotum.github.io/4fb37c6d-0cd4-4ef8-ad77-0a2954542bc4)](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#co_data_models_and_query_languages_CO1-2)",
											"`<p>Sharks</p>` is the title of the currently selected page.",
											"Now say you want the title of the currently selected page to have a blue background, so that it is visually highlighted. This is easy, using CSS:",
											"```\nli.selected > p {\n    background-color: blue;\n}\n```",
											'Here the CSS selector `li.selected > p` declares the pattern of elements to which we want to apply the blue style: namely, all `<p>` elements whose direct parent is an `<li>` element with a CSS class of `selected`. The element `<p>Sharks</p>` in the example matches this pattern, but `<p>Whales</p>` does not match because its `<li>` parent lacks `class="selected"`.',
											"If you were using XSL instead of CSS, you could do something similar:",
											'```\n<xsl:template match="li[@class=\'selected\']/p">\n    <fo:block background-color="blue">\n        <xsl:apply-templates/>\n    </fo:block>\n</xsl:template>\n```',
											"Here, the XPath expression `li[@class='selected']/p` is equivalent to the CSS selector `li.selected > p` in the previous example. What CSS and XSL have in common is that they are both *declarative* languages for specifying the styling of a document.",
											"Imagine what life would be like if you had to use an imperative approach. In JavaScript, using the core Document Object Model (DOM) API, the result might look something like this:",
											'```\nvar liElements = document.getElementsByTagName("li");\nfor (var i = 0; i < liElements.length; i++) {\n    if (liElements[i].className === "selected") {\n        var children = liElements[i].childNodes;\n        for (var j = 0; j < children.length; j++) {\n            var child = children[j];\n            if (child.nodeType === Node.ELEMENT_NODE && child.tagName === "P") {\n                child.setAttribute("style", "background-color: blue");\n            }\n        }\n    }\n}\n```',
											"This JavaScript imperatively sets the element `<p>Sharks</p>` to have a blue background, but the code is awful. Not only is it much longer and harder to understand than the CSS and XSL equivalents, but it also has some serious problems:",
											"* If the `selected` class is removed (e.g., because the user clicks a different page), the blue color won’t be removed, even if the code is rerun—and so the item will remain highlighted until the entire page is reloaded. With CSS, the browser automatically detects when the `li.selected > p` rule no longer applies and removes the blue background as soon as the `selected` class is removed.",
											'* If you want to take advantage of a new API, such as `document.getElementsByClassName("selected")` or even `document.evaluate()`—which may improve performance—you have to rewrite the code. On the other hand, browser vendors can improve the performance of CSS and XPath without breaking compatibility.',
											"In a web browser, using declarative CSS styling is much better than manipulating styles imperatively in JavaScript. Similarly, in databases, declarative query languages like SQL turned out to be much better than imperative query APIs.[vi]()",
										],
										summary: [
											"Declarative languages simplify styling and querying, outperforming imperative methods in web and database tasks.",
										],
										longSummary: [
											'Declarative query languages offer significant advantages beyond databases, as seen in web browsers. For instance, styling a "Sharks" navigation item with a blue background is straightforward using the declarative CSS selector "li.selected > p". Similarly, XSL with XPath expressions provides a declarative approach. In contrast, the imperative JavaScript method using the DOM API is longer, harder to understand, and less adaptable, as it doesn\'t automatically update styling when classes change and requires code rewrites for new APIs. Just as CSS is superior for styling, declarative query languages like SQL outperform imperative query APIs for databases.',
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747276333/blog-cover-images/fjksepp9bjsq4hxjdbim.webp",
									},
									{
										heading: ["## **MapReduce Querying**"],
										children: [
											"*MapReduce* is a programming model for processing large amounts of data in bulk across many machines, popularized by Google \\[[33]()\\]. A limited form of MapReduce is supported by some NoSQL datastores, including MongoDB and CouchDB, as a mechanism for performing read-only queries across many documents.",
											"MapReduce in general is described in more detail in [Chapter 10](). For now, we’ll just briefly discuss MongoDB’s use of the model.",
											"MapReduce is neither a declarative query language nor a fully imperative query API, but somewhere in between: the logic of the query is expressed with snippets of code, which are called repeatedly by the processing framework. It is based on the `map` (also known as `collect`) and `reduce` (also known as `fold` or `inject`) functions that exist in many functional programming languages.",
											"To give an example, imagine you are a marine biologist, and you add an observation record to your database every time you see animals in the ocean. Now you want to generate a report saying how many sharks you have sighted per month.",
											"In PostgreSQL you might express that query like this:",
											"```\nSELECT date_trunc('month', observation_timestamp) AS observation_month, \n```",
											"[![1](blob:https://johnfactotum.github.io/8c04f3a5-edc3-4bec-800d-97b8aea6bc21)](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#callout_data_models_and_query_languages_CO2-1)",
											"**`sum`**`(num_animals)`**`AS`**`total_animals`**`FROM`**`observations`**`WHERE`**`family = 'Sharks'`**`GROUP`** **`BY`**`observation_month;`",
											"[![1](blob:https://johnfactotum.github.io/8c04f3a5-edc3-4bec-800d-97b8aea6bc21)](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#co_data_models_and_query_languages_CO2-1)",
											"The `date_trunc('month', timestamp)` function determines the calendar month containing `timestamp`, and returns another timestamp representing the beginning of that month. In other words, it rounds a timestamp down to the nearest month.",
											"This query first filters the observations to only show species in the `Sharks` family, then groups the observations by the calendar month in which they occurred, and finally adds up the number of animals seen in all observations in that month.",
											"The same can be expressed with MongoDB’s MapReduce feature as follows:",
											"```\ndb.observations.mapReduce(\n    function map() { \n```",
											"[![2](blob:https://johnfactotum.github.io/4fb37c6d-0cd4-4ef8-ad77-0a2954542bc4)](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#callout_data_models_and_query_languages_CO3-2)",
											'**`var`**`year =`**`this`**`.observationTimestamp.getFullYear();`**`var`**`month =`**`this`**`.observationTimestamp.getMonth() + 1; emit(year + "-" + month,`**`this`**`.numAnimals);`[![3](blob:https://johnfactotum.github.io/71ac6ac2-169c-4fad-b494-59f09ef3781a)](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#callout_data_models_and_query_languages_CO3-3)`},`**`function`**`reduce(key, values) {`[![4](blob:https://johnfactotum.github.io/959e9794-1908-4e32-9394-14cf23e3de62)](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#callout_data_models_and_query_languages_CO3-4)**`return`**`Array.sum(values);`[![5](blob:https://johnfactotum.github.io/31106dc7-5697-4559-b11f-2375ba48ee3e)](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#callout_data_models_and_query_languages_CO3-5)`}, { query: { family: "Sharks" },`[![1](blob:https://johnfactotum.github.io/8c04f3a5-edc3-4bec-800d-97b8aea6bc21)](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#callout_data_models_and_query_languages_CO3-1)`out: "monthlySharkReport"`[![6](blob:https://johnfactotum.github.io/f7dd9cd2-14dd-4e78-979d-1b7e8d78497b)](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#callout_data_models_and_query_languages_CO3-6)`} );`',
											"[![1](blob:https://johnfactotum.github.io/8c04f3a5-edc3-4bec-800d-97b8aea6bc21)](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#co_data_models_and_query_languages_CO3-5)",
											"The filter to consider only shark species can be specified declaratively (this is a MongoDB-specific extension to MapReduce).",
											"[![2](blob:https://johnfactotum.github.io/4fb37c6d-0cd4-4ef8-ad77-0a2954542bc4)](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#co_data_models_and_query_languages_CO3-1)",
											"The JavaScript function `map` is called once for every document that matches `query`, with `this` set to the document object.",
											"[![3](blob:https://johnfactotum.github.io/71ac6ac2-169c-4fad-b494-59f09ef3781a)](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#co_data_models_and_query_languages_CO3-2)",
											'The `map` function emits a key (a string consisting of year and month, such as `"2013-12"` or `"2014-1"`) and a value (the number of animals in that observation).',
											"[![4](blob:https://johnfactotum.github.io/959e9794-1908-4e32-9394-14cf23e3de62)](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#co_data_models_and_query_languages_CO3-3)",
											"The key-value pairs emitted by `map` are grouped by key. For all key-value pairs with the same key (i.e., the same month and year), the `reduce` function is called once.",
											"[![5](blob:https://johnfactotum.github.io/31106dc7-5697-4559-b11f-2375ba48ee3e)](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#co_data_models_and_query_languages_CO3-4)",
											"The `reduce` function adds up the number of animals from all observations in a particular month.",
											"[![6](blob:https://johnfactotum.github.io/f7dd9cd2-14dd-4e78-979d-1b7e8d78497b)](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#co_data_models_and_query_languages_CO3-6)",
											"The final output is written to the collection `monthlySharkReport`.",
											"For example, say the `observations` collection contains these two documents:",
											'```\n{\n    observationTimestamp: Date.parse("Mon, 25 Dec 1995 12:34:56 GMT"),\n    family:     "Sharks",\n    species:    "Carcharodon carcharias",\n    numAnimals: 3\n}\n{\n    observationTimestamp: Date.parse("Tue, 12 Dec 1995 16:17:18 GMT"),\n    family:     "Sharks",\n    species:    "Carcharias taurus",\n    numAnimals: 4\n}\n```',
											'The `map` function would be called once for each document, resulting in `emit("1995-12", 3)` and `emit("1995-12", 4)`. Subsequently, the `reduce` function would be called with `reduce("1995-12", [3, 4])`, returning `7`.',
											"The `map` and `reduce` functions are somewhat restricted in what they are allowed to do. They must be *pure* functions, which means they only use the data that is passed to them as input, they cannot perform additional database queries, and they must not have any side effects. These restrictions allow the database to run the functions anywhere, in any order, and rerun them on failure. However, they are nevertheless powerful: they can parse strings, call library functions, perform calculations, and more.",
											"MapReduce is a fairly low-level programming model for distributed execution on a cluster of machines. Higher-level query languages like SQL can be implemented as a pipeline of MapReduce operations (see [Chapter 10]()), but there are also many distributed implementations of SQL that don’t use MapReduce. Note there is nothing in SQL that constrains it to running on a single machine, and MapReduce doesn’t have a monopoly on distributed query execution.",
											"Being able to use JavaScript code in the middle of a query is a great feature for advanced queries, but it’s not limited to MapReduce—some SQL databases can be extended with JavaScript functions too \\[[34]()\\].",
											"A usability problem with MapReduce is that you have to write two carefully coordinated JavaScript functions, which is often harder than writing a single query. Moreover, a declarative query language offers more opportunities for a query optimizer to improve the performance of a query. For these reasons, MongoDB 2.2 added support for a declarative query language called the *aggregation pipeline* \\[[9]()\\]. In this language, the same shark-counting query looks like this:",
											'```\ndb.observations.aggregate([\n    { $match: { family: "Sharks" } },\n    { $group: {\n        _id: {\n            year:  { $year:  "$observationTimestamp" },\n            month: { $month: "$observationTimestamp" }\n        },\n        totalAnimals: { $sum: "$numAnimals" }\n    } }\n]);\n```',
											"The aggregation pipeline language is similar in expressiveness to a subset of SQL, but it uses a JSON-based syntax rather than SQL’s English-sentence-style syntax; the difference is perhaps a matter of taste. The moral of the story is that a NoSQL system may find itself accidentally reinventing SQL, albeit in disguise.",
										],
										summary: [
											"Discover how MapReduce revolutionizes data processing, bridging SQL and NoSQL with JavaScript functions.",
										],
										longSummary: [
											"MapReduce is a programming model for processing large datasets across multiple machines, popularized by Google and supported by NoSQL datastores like MongoDB and CouchDB. It operates between declarative and imperative query languages, using code snippets repeatedly called by the processing framework. In MongoDB, MapReduce is used for tasks like counting shark sightings per month, requiring JavaScript functions: map emits key-value pairs, and reduce sums by key. These functions must be pure to run anywhere. However, MongoDB later introduced a more user-friendly 'aggregation pipeline' with JSON syntax, reflecting how NoSQL systems often evolve to incorporate SQL-like functionality.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747276338/blog-cover-images/lrxgt3h12xvru1oct1hm.webp",
									},
								],
							],
							summary: [
								"SQL's declarative power surpasses imperative methods, optimizing performance and simplifying complex queries.",
							],
							longSummary: [
								"SQL, a declarative query language, contrasts with imperative languages by allowing you to specify what you want without detailing how to achieve it, enhancing conciseness and performance. Declarative languages like SQL and CSS are ideal for parallel execution and hide implementation details, offering flexibility and ease of use. MapReduce, used for processing large data, requires JavaScript functions for tasks like counting shark sightings in MongoDB. However, MongoDB's introduction of an SQL-like 'aggregation pipeline' shows NoSQL systems adopting SQL-like features for user-friendliness.",
							],
							imageUrl:
								"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747276321/blog-cover-images/niewduzzkjrnnug0s2fp.webp",
						},
						{
							heading: ["# **Graph-Like Data Models**"],
							children: [
								"We saw earlier that many-to-many relationships are an important distinguishing feature between different data models. If your application has mostly one-to-many relationships (tree-structured data) or no relationships between records, the document model is appropriate.",
								"But what if many-to-many relationships are very common in your data? The relational model can handle simple cases of many-to-many relationships, but as the connections within your data become more complex, it becomes more natural to start modeling your data as a graph.",
								"A graph consists of two kinds of objects: *vertices* (also known as *nodes* or *entities*) and *edges* (also known as *relationships* or *arcs*). Many kinds of data can be modeled as a graph. Typical examples include:",
								"Social graphs",
								"Vertices are people, and edges indicate which people know each other.",
								"The web graph",
								"Vertices are web pages, and edges indicate HTML links to other pages.",
								"Road or rail networks",
								"Vertices are junctions, and edges represent the roads or railway lines between them.",
								"Well-known algorithms can operate on these graphs: for example, car navigation systems search for the shortest path between two points in a road network, and PageRank can be used on the web graph to determine the popularity of a web page and thus its ranking in search results.",
								"In the examples just given, all the vertices in a graph represent the same kind of thing (people, web pages, or road junctions, respectively). However, graphs are not limited to such *homogeneous* data: an equally powerful use of graphs is to provide a consistent way of storing completely different types of objects in a single datastore. For example, Facebook maintains a single graph with many different types of vertices and edges: vertices represent people, locations, events, checkins, and comments made by users; edges indicate which people are friends with each other, which checkin happened in which location, who commented on which post, who attended which event, and so on \\[[35]()\\].",
								"In this section we will use the example shown in [Figure 2-5](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#fig_datamodels_graph). It could be taken from a social network or a genealogical database: it shows two people, Lucy from Idaho and Alain from Beaune, France. They are married and living in London.",
								"![ddia 0205](blob:https://johnfactotum.github.io/cc1c93e2-0ded-4cd9-a3ae-400112b5c9b8)",
								"###### *Figure 2-5. Example of graph-structured data (boxes represent vertices, arrows represent edges).*",
								"There are several different, but related, ways of structuring and querying data in graphs. In this section we will discuss the *property graph* model (implemented by Neo4j, Titan, and InfiniteGraph) and the *triple-store* model (implemented by Datomic, AllegroGraph, and others). We will look at three declarative query languages for graphs: Cypher, SPARQL, and Datalog. Besides these, there are also imperative graph query languages such as Gremlin \\[[36]()\\] and graph processing frameworks like Pregel (see [Chapter 10]()).",
								[
									{
										heading: ["## **Property Graphs**"],
										children: [
											"In the property graph model, each vertex consists of:",
											"* A unique identifier",
											"* A set of outgoing edges",
											"* A set of incoming edges",
											"* A collection of properties (key-value pairs)",
											"Each edge consists of:",
											"* A unique identifier",
											"* The vertex at which the edge starts (the *tail vertex*)",
											"* The vertex at which the edge ends (the *head vertex*)",
											"* A label to describe the kind of relationship between the two vertices",
											"* A collection of properties (key-value pairs)",
											"You can think of a graph store as consisting of two relational tables, one for vertices and one for edges, as shown in [Example 2-2](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#fig_graph_sql_schema) (this schema uses the PostgreSQL `json` datatype to store the properties of each vertex or edge). The head and tail vertex are stored for each edge; if you want the set of incoming or outgoing edges for a vertex, you can query the `edges` table by `head_vertex` or `tail_vertex`, respectively.",
											"##### *Example 2-2. Representing a property graph using a relational schema*",
											"```\nCREATE TABLE vertices (\n    vertex_id   integer PRIMARY KEY,\n    properties  json\n);\n\nCREATE TABLE edges (\n    edge_id     integer PRIMARY KEY,\n    tail_vertex integer REFERENCES vertices (vertex_id),\n    head_vertex integer REFERENCES vertices (vertex_id),\n    label       text,\n    properties  json\n);\n\nCREATE INDEX edges_tails ON edges (tail_vertex);\nCREATE INDEX edges_heads ON edges (head_vertex);\n```",
											"Some important aspects of this model are:",
											"1. Any vertex can have an edge connecting it with any other vertex. There is no schema that restricts which kinds of things can or cannot be associated.",
											"2. Given any vertex, you can efficiently find both its incoming and its outgoing edges, and thus *traverse* the graph—i.e., follow a path through a chain of vertices—both forward and backward. (That’s why [Example 2-2](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#fig_graph_sql_schema) has indexes on both the `tail_vertex` and `head_vertex` columns.)",
											"3. By using different labels for different kinds of relationships, you can store several different kinds of information in a single graph, while still maintaining a clean data model.",
											"Those features give graphs a great deal of flexibility for data modeling, as illustrated in [Figure 2-5](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#fig_datamodels_graph). The figure shows a few things that would be difficult to express in a traditional relational schema, such as different kinds of regional structures in different countries (France has *départements* and *régions*, whereas the US has *counties* and *states*), quirks of history such as a country within a country (ignoring for now the intricacies of sovereign states and nations), and varying granularity of data (Lucy’s current residence is specified as a city, whereas her place of birth is specified only at the level of a state).",
											"You could imagine extending the graph to also include many other facts about Lucy and Alain, or other people. For instance, you could use it to indicate any food allergies they have (by introducing a vertex for each allergen, and an edge between a person and an allergen to indicate an allergy), and link the allergens with a set of vertices that show which foods contain which substances. Then you could write a query to find out what is safe for each person to eat. Graphs are good for evolvability: as you add features to your application, a graph can easily be extended to accommodate changes in your application’s data structures.",
										],
										summary: [
											"Graph models: flexible, schema-free connections, efficient traversal, and adaptable to complex structures.",
										],
										longSummary: [
											"In the property graph model, each vertex and edge has a unique identifier, with vertices having properties and edges having labels and properties. This model allows any vertex to connect to another without schema restrictions, enabling efficient traversal through indexed vertices. Graphs can represent complex structures, such as varying regional organizations and historical quirks, by storing different relationship types with distinct labels. This flexibility supports data with varying granularity and excels in evolvability, allowing easy extension for new features and changing data structures, making it ideal for modeling intricate and dynamic systems.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747276330/blog-cover-images/atkprzbwzro9a67koyfc.webp",
									},
									{
										heading: [
											"## **The Cypher Query Language**",
										],
										children: [
											"*Cypher* is a declarative query language for property graphs, created for the Neo4j graph database \\[[37]()\\]. (It is named after a character in the movie *The Matrix* and is not related to ciphers in cryptography \\[[38]()\\].)",
											"[Example 2-3](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#fig_cypher_create) shows the Cypher query to insert the lefthand portion of [Figure 2-5](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#fig_datamodels_graph) into a graph database. The rest of the graph can be added similarly and is omitted for readability. Each vertex is given a symbolic name like `USA` or `Idaho`, and other parts of the query can use those names to create edges between the vertices, using an arrow notation: `(Idaho) -[:WITHIN]-> (USA)` creates an edge labeled `WITHIN`, with `Idaho` as the tail node and `USA` as the head node.",
											"##### *Example 2-3. A subset of the data in [Figure 2-5](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#fig_datamodels_graph), represented as a Cypher query*",
											"```\nCREATE\n  (NAmerica:Location {name:'North America', type:'continent'}),\n  (USA:Location      {name:'United States', type:'country'  }),\n  (Idaho:Location    {name:'Idaho',         type:'state'    }),\n  (Lucy:Person       {name:'Lucy' }),\n  (Idaho) -[:WITHIN]->  (USA)  -[:WITHIN]-> (NAmerica),\n  (Lucy)  -[:BORN_IN]-> (Idaho)\n```",
											"When all the vertices and edges of [Figure 2-5](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#fig_datamodels_graph) are added to the database, we can start asking interesting questions: for example, *find the names of all the people who emigrated from the United States to Europe*. To be more precise, here we want to find all the vertices that have a `BORN_IN` edge to a location within the US, and also a `LIVING_IN` edge to a location within Europe, and return the `name` property of each of those vertices.",
											"[Example 2-4](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#fig_cypher_query) shows how to express that query in Cypher. The same arrow notation is used in a `MATCH` clause to find patterns in the graph: `(person) -[:BORN_IN]-> ()` matches any two vertices that are related by an edge labeled `BORN_IN`. The tail vertex of that edge is bound to the variable `person`, and the head vertex is left unnamed.",
											"##### *Example 2-4. Cypher query to find people who emigrated from the US to Europe*",
											"```\nMATCH\n  (person) -[:BORN_IN]->  () -[:WITHIN*0..]-> (us:Location {name:'United States'}),\n  (person) -[:LIVES_IN]-> () -[:WITHIN*0..]-> (eu:Location {name:'Europe'})\nRETURN person.name\n```",
											"The query can be read as follows:",
											"> *Find any vertex (call it `person`) that meets both of the following conditions:*",
											'> 1. *`person` has an outgoing `BORN_IN` edge to some vertex. From that vertex, you can follow a chain of outgoing `WITHIN` edges until eventually you reach a vertex of type `Location`, whose `name` property is equal to `"United States"`.*\n> 2. *That same `person` vertex also has an outgoing `LIVES_IN` edge. Following that edge, and then a chain of outgoing `WITHIN` edges, you eventually reach a vertex of type `Location`, whose `name` property is equal to `"Europe"`.*',
											"> *For each such `person` vertex, return the `name` property.*",
											"There are several possible ways of executing the query. The description given here suggests that you start by scanning all the people in the database, examine each person’s birthplace and residence, and return only those people who meet the criteria.",
											"But equivalently, you could start with the two `Location` vertices and work backward. If there is an index on the `name` property, you can probably efficiently find the two vertices representing the US and Europe. Then you can proceed to find all locations (states, regions, cities, etc.) in the US and Europe respectively by following all incoming `WITHIN` edges. Finally, you can look for people who can be found through an incoming `BORN_IN` or `LIVES_IN` edge at one of the location vertices.",
											"As is typical for a declarative query language, you don’t need to specify such execution details when writing the query: the query optimizer automatically chooses the strategy that is predicted to be the most efficient, so you can get on with writing the rest of your application.",
										],
										summary: [
											"Cypher: Effortlessly query Neo4j graphs with intuitive syntax and powerful pattern matching.",
										],
										longSummary: [
											"Cypher is a declarative query language designed for the Neo4j database, enabling users to create and query property graphs using an intuitive arrow notation. For instance, vertices like 'USA' or 'Idaho' are connected with edges using syntax such as '(Idaho) -[:WITHIN]-> (USA)'. The MATCH clause allows for complex queries to identify patterns, such as tracking emigration from the US to Europe through relationship chains. As a declarative language, Cypher lets users specify desired data without detailing execution strategies, with the query optimizer selecting the most efficient method, whether scanning all entities or leveraging indexes.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747276329/blog-cover-images/ouq4ekjgwdeoil9krtdf.webp",
									},
									{
										heading: [
											"## **Graph Queries in SQL**",
										],
										children: [
											"[Example 2-2](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#fig_graph_sql_schema) suggested that graph data can be represented in a relational database. But if we put graph data in a relational structure, can we also query it using SQL?",
											"The answer is yes, but with some difficulty. In a relational database, you usually know in advance which joins you need in your query. In a graph query, you may need to traverse a variable number of edges before you find the vertex you’re looking for—that is, the number of joins is not fixed in advance.",
											"In our example, that happens in the `() -[:WITHIN*0..]-> ()` rule in the Cypher query. A person’s `LIVES_IN` edge may point at any kind of location: a street, a city, a district, a region, a state, etc. A city may be `WITHIN` a region, a region `WITHIN` a state, a state `WITHIN` a country, etc. The `LIVES_IN` edge may point directly at the location vertex you’re looking for, or it may be several levels removed in the location hierarchy.",
											"In Cypher, `:WITHIN*0..` expresses that fact very concisely: it means “follow a `WITHIN` edge, zero or more times.” It is like the `*` operator in a regular expression.",
											"Since SQL:1999, this idea of variable-length traversal paths in a query can be expressed using something called *recursive common table expressions* (the `WITH RECURSIVE` syntax). [Example 2-5](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#fig_graph_sql_query) shows the same query—finding the names of people who emigrated from the US to Europe—expressed in SQL using this technique (supported in PostgreSQL, IBM DB2, Oracle, and SQL Server). However, the syntax is very clumsy in comparison to Cypher.",
											"##### *Example 2-5. The same query as [Example 2-4](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#fig_cypher_query), expressed in SQL using recursive common table expressions*",
											"```\nWITH RECURSIVE\n\n  -- in_usa is the set of vertex IDs of all locations within the United States\n  in_usa(vertex_id) AS (\n      SELECT vertex_id FROM vertices WHERE properties->>'name' = 'United States' \n```",
											"[![1](blob:https://johnfactotum.github.io/8c04f3a5-edc3-4bec-800d-97b8aea6bc21)](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#callout_data_models_and_query_languages_CO4-1)",
											"**`UNION`** **`SELECT`**`edges.tail_vertex`**`FROM`**`edges`[![2](blob:https://johnfactotum.github.io/4fb37c6d-0cd4-4ef8-ad77-0a2954542bc4)](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#callout_data_models_and_query_languages_CO4-2)**`JOIN`**`in_usa`**`ON`**`edges.head_vertex = in_usa.vertex_id`**`WHERE`**`edges.label = 'within' ),`*`-- in_europe is the set of vertex IDs of all locations within Europe`*`in_europe(vertex_id)`**`AS`**`(`**`SELECT`**`vertex_id`**`FROM`**`vertices`**`WHERE`**`properties->>'name' = 'Europe'`[![3](blob:https://johnfactotum.github.io/71ac6ac2-169c-4fad-b494-59f09ef3781a)](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#callout_data_models_and_query_languages_CO4-3)**`UNION`** **`SELECT`**`edges.tail_vertex`**`FROM`**`edges`**`JOIN`**`in_europe`**`ON`**`edges.head_vertex = in_europe.vertex_id`**`WHERE`**`edges.label = 'within' ),`*`-- born_in_usa is the set of vertex IDs of all people born in the US`*`born_in_usa(vertex_id)`**`AS`**`(`[![4](blob:https://johnfactotum.github.io/959e9794-1908-4e32-9394-14cf23e3de62)](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#callout_data_models_and_query_languages_CO4-4)**`SELECT`**`edges.tail_vertex`**`FROM`**`edges`**`JOIN`**`in_usa`**`ON`**`edges.head_vertex = in_usa.vertex_id`**`WHERE`**`edges.label = 'born_in' ),`*`-- lives_in_europe is the set of vertex IDs of all people living in Europe`*`lives_in_europe(vertex_id)`**`AS`**`(`[![5](blob:https://johnfactotum.github.io/31106dc7-5697-4559-b11f-2375ba48ee3e)](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#callout_data_models_and_query_languages_CO4-5)**`SELECT`**`edges.tail_vertex`**`FROM`**`edges`**`JOIN`**`in_europe`**`ON`**`edges.head_vertex = in_europe.vertex_id`**`WHERE`**`edges.label = 'lives_in' )`**`SELECT`**`vertices.properties->>'name'`**`FROM`**`vertices`*`-- join to find those people who were both born in the US *and* live in Europe`* **`JOIN`**`born_in_usa`**`ON`**`vertices.vertex_id = born_in_usa.vertex_id`[![6](blob:https://johnfactotum.github.io/f7dd9cd2-14dd-4e78-979d-1b7e8d78497b)](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#callout_data_models_and_query_languages_CO4-6)**`JOIN`**`lives_in_europe`**`ON`**`vertices.vertex_id = lives_in_europe.vertex_id;`",
											"[![1](blob:https://johnfactotum.github.io/8c04f3a5-edc3-4bec-800d-97b8aea6bc21)](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#co_data_models_and_query_languages_CO4-1)",
											'First find the vertex whose `name` property has the value `"United States"`, and make it the first element of the set of vertices `in_usa`.',
											"[![2](blob:https://johnfactotum.github.io/4fb37c6d-0cd4-4ef8-ad77-0a2954542bc4)](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#co_data_models_and_query_languages_CO4-2)",
											"Follow all incoming `within` edges from vertices in the set `in_usa`, and add them to the same set, until all incoming `within` edges have been visited.",
											"[![3](blob:https://johnfactotum.github.io/71ac6ac2-169c-4fad-b494-59f09ef3781a)](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#co_data_models_and_query_languages_CO4-3)",
											'Do the same starting with the vertex whose `name` property has the value `"Europe"`, and build up the set of vertices `in_europe`.',
											"[![4](blob:https://johnfactotum.github.io/959e9794-1908-4e32-9394-14cf23e3de62)](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#co_data_models_and_query_languages_CO4-4)",
											"For each of the vertices in the set `in_usa`, follow incoming `born_in` edges to find people who were born in some place within the United States.",
											"[![5](blob:https://johnfactotum.github.io/31106dc7-5697-4559-b11f-2375ba48ee3e)](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#co_data_models_and_query_languages_CO4-5)",
											"Similarly, for each of the vertices in the set `in_europe`, follow incoming `lives_in` edges to find people who live in Europe.",
											"[![6](blob:https://johnfactotum.github.io/f7dd9cd2-14dd-4e78-979d-1b7e8d78497b)](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#co_data_models_and_query_languages_CO4-6)",
											"Finally, intersect the set of people born in the USA with the set of people living in Europe, by joining them.",
											"If the same query can be written in 4 lines in one query language but requires 29 lines in another, that just shows that different data models are designed to satisfy different use cases. It’s important to pick a data model that is suitable for your application.",
										],
										summary: [
											"Cypher's elegance: 4-line graph queries vs. SQL's 29-line complexity. Choose wisely!",
										],
										longSummary: [
											"Graph data can be represented in relational databases using SQL, but it's more complex than using a dedicated graph query language like Cypher. SQL requires predefined joins, whereas graph queries often need to traverse a variable number of edges. Cypher's syntax, such as `:WITHIN*0..`, is more elegant and concise compared to SQL's recursive common table expressions. For instance, finding people who emigrated from the US to Europe takes just 4 lines in Cypher but 29 in SQL, highlighting the importance of choosing a data model that suits your application's needs. Different data models cater to different use cases.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747276330/blog-cover-images/styre29eqod0bifu0hmk.webp",
									},
									{
										heading: [
											"## **Triple-Stores and SPARQL**",
										],
										children: [
											"The triple-store model is mostly equivalent to the property graph model, using different words to describe the same ideas. It is nevertheless worth discussing, because there are various tools and languages for triple-stores that can be valuable additions to your toolbox for building applications.",
											"In a triple-store, all information is stored in the form of very simple three-part statements: (*subject*, *predicate*, *object*). For example, in the triple (*Jim*, *likes*, *bananas*), *Jim* is the subject, *likes* is the predicate (verb), and *bananas* is the object.",
											"The subject of a triple is equivalent to a vertex in a graph. The object is one of two things:",
											'1. A value in a primitive datatype, such as a string or a number. In that case, the predicate and object of the triple are equivalent to the key and value of a property on the subject vertex. For example, (*lucy*, *age*, *33*) is like a vertex `lucy` with properties `{"age":33}`.',
											"2. Another vertex in the graph. In that case, the predicate is an edge in the graph, the subject is the tail vertex, and the object is the head vertex. For example, in (*lucy*, *marriedTo*, *alain*) the subject and object *lucy* and *alain* are both vertices, and the predicate *marriedTo* is the label of the edge that connects them.",
											"[Example 2-6](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#fig_graph_n3_triples) shows the same data as in [Example 2-3](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#fig_cypher_create), written as triples in a format called *Turtle*, a subset of *Notation3* (*N3*) \\[[39]()\\].",
											"##### *Example 2-6. A subset of the data in [Figure 2-5](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#fig_datamodels_graph), represented as Turtle triples*",
											'```\n@prefix : <urn:example:>.\n_:lucy     a       :Person.\n_:lucy     :name   "Lucy".\n_:lucy     :bornIn _:idaho.\n_:idaho    a       :Location.\n_:idaho    :name   "Idaho".\n_:idaho    :type   "state".\n_:idaho    :within _:usa.\n_:usa      a       :Location.\n_:usa      :name   "United States".\n_:usa      :type   "country".\n_:usa      :within _:namerica.\n_:namerica a       :Location.\n_:namerica :name   "North America".\n_:namerica :type   "continent".\n```',
											'In this example, vertices of the graph are written as `_:`*`someName`*. The name doesn’t mean anything outside of this file; it exists only because we otherwise wouldn’t know which triples refer to the same vertex. When the predicate represents an edge, the object is a vertex, as in `_:idaho :within _:usa`. When the predicate is a property, the object is a string literal, as in `_:usa :name "United States"`.',
											"It’s quite repetitive to repeat the same subject over and over again, but fortunately you can use semicolons to say multiple things about the same subject. This makes the Turtle format quite nice and readable: see [Example 2-7](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#fig_graph_n3_shorthand).",
											"##### *Example 2-7. A more concise way of writing the data in [Example 2-6](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#fig_graph_n3_triples)*",
											'```\n@prefix : <urn:example:>.\n_:lucy     a :Person;   :name "Lucy";          :bornIn _:idaho.\n_:idaho    a :Location; :name "Idaho";         :type "state";   :within _:usa.\n_:usa      a :Location; :name "United States"; :type "country"; :within _:namerica.\n_:namerica a :Location; :name "North America"; :type "continent".\n```',
											[
												{
													heading: [
														"### **The semantic web**",
													],
													children: [
														"If you read more about triple-stores, you may get sucked into a maelstrom of articles written about the *semantic web*. The triple-store data model is completely independent of the semantic web—for example, Datomic \\[[40]()\\] is a triple-store that does not claim to have anything to do with it.[vii]() But since the two are so closely linked in many people’s minds, we should discuss them briefly.",
														"The semantic web is fundamentally a simple and reasonable idea: websites already publish information as text and pictures for humans to read, so why don’t they also publish information as machine-readable data for computers to read? The *Resource Description Framework* (RDF) \\[[41]()\\] was intended as a mechanism for different websites to publish data in a consistent format, allowing data from different websites to be automatically combined into a *web of data*—a kind of internet-wide “database of everything.”",
														"Unfortunately, the semantic web was overhyped in the early 2000s but so far hasn’t shown any sign of being realized in practice, which has made many people cynical about it. It has also suffered from a dizzying plethora of acronyms, overly complex standards proposals, and hubris.",
														"However, if you look past those failings, there is also a lot of good work that has come out of the semantic web project. Triples can be a good internal data model for applications, even if you have no interest in publishing RDF data on the semantic web.",
													],
													summary: [
														"Triple-stores excel as internal data models, despite the semantic web's unrealized potential.",
													],
													longSummary: [
														"Triple-stores, like Datomic, are often linked to the semantic web but are independent concepts. The semantic web aimed to create an internet-wide \"database of everything\" by using the Resource Description Framework (RDF) to publish machine-readable data alongside human-readable content. Despite initial hype in the early 2000s, it hasn't materialized due to excessive acronyms, complex standards, and hubris. However, the project has produced valuable work, and triples can be an effective internal data model for applications, even if you don't plan to publish RDF data on the semantic web.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747276348/blog-cover-images/vmqhb7pyvfw4dphljdzs.webp",
												},
												{
													heading: [
														"### **The RDF data model**",
													],
													children: [
														"The Turtle language we used in [Example 2-7](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#fig_graph_n3_shorthand) is a human-readable format for RDF data. Sometimes RDF is also written in an XML format, which does the same thing much more verbosely—see [Example 2-8](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#fig_graph_rdf_xml). Turtle/N3 is preferable as it is much easier on the eyes, and tools like Apache Jena \\[[42]()\\] can automatically convert between different RDF formats if necessary.",
														"##### *Example 2-8. The data of [Example 2-7](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#fig_graph_n3_shorthand), expressed using RDF/XML syntax*",
														'```\n<rdf:RDF xmlns="urn:example:"\n    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">\n\n  <Location rdf:nodeID="idaho">\n    <name>Idaho</name>\n    <type>state</type>\n    <within>\n      <Location rdf:nodeID="usa">\n        <name>United States</name>\n        <type>country</type>\n        <within>\n          <Location rdf:nodeID="namerica">\n            <name>North America</name>\n            <type>continent</type>\n          </Location>\n        </within>\n      </Location>\n    </within>\n  </Location>\n\n  <Person rdf:nodeID="lucy">\n    <name>Lucy</name>\n    <bornIn rdf:nodeID="idaho"/>\n  </Person>\n</rdf:RDF>\n```',
														"RDF has a few quirks due to the fact that it is designed for internet-wide data exchange. The subject, predicate, and object of a triple are often URIs. For example, a predicate might be an URI such as `<http://my-company.com/namespace#within>` or `<http://my-company.com/namespace#lives_in>`, rather than just `WITHIN` or `LIVES_IN`. The reasoning behind this design is that you should be able to combine your data with someone else’s data, and if they attach a different meaning to the word `within` or `lives_in`, you won’t get a conflict because their predicates are actually `<http://other.org/foo#within>` and `<http://other.org/foo#lives_in>`.",
														"The URL `<http://my-company.com/namespace>` doesn’t necessarily need to resolve to anything—from RDF’s point of view, it is simply a namespace. To avoid potential confusion with `http://` URLs, the examples in this section use non-resolvable URIs such as `urn:example:within`. Fortunately, you can just specify this prefix once at the top of the file, and then forget about it.",
													],
													summary: [
														"Discover how Turtle simplifies RDF data exchange with concise, human-readable syntax.",
													],
													longSummary: [
														"The Turtle language, used in Example 2-7, offers a human-readable format for RDF data, preferred over the verbose XML format in Example 2-8. Tools like Apache Jena facilitate conversion between RDF formats. RDF supports internet-wide data exchange using subjects, predicates, and objects as URIs to prevent conflicts when merging data from various sources. Predicates might use URIs like 'http://my-company.com/namespace#within' instead of simple terms like 'WITHIN'. These URIs serve as namespaces and don't need to resolve to actual URLs. Non-resolvable URIs, such as 'urn:example:within', can be used with prefixes defined at the file's start.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747276348/blog-cover-images/pop3ygcjtbagwg7wvm0g.webp",
												},
												{
													heading: [
														"### **The SPARQL query language**",
													],
													children: [
														"*SPARQL* is a query language for triple-stores using the RDF data model \\[[43]()\\]. (It is an acronym for *SPARQL Protocol and RDF Query Language*, pronounced “sparkle.”) It predates Cypher, and since Cypher’s pattern matching is borrowed from SPARQL, they look quite similar \\[[37]()\\].",
														"The same query as before—finding people who have moved from the US to Europe—is even more concise in SPARQL than it is in Cypher (see [Example 2-9](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#fig_sparql_query)).",
														"##### *Example 2-9. The same query as [Example 2-4](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#fig_cypher_query), expressed in SPARQL*",
														'```\nPREFIX : <urn:example:>\n\nSELECT ?personName WHERE {\n  ?person :name ?personName.\n  ?person :bornIn  / :within* / :name "United States".\n  ?person :livesIn / :within* / :name "Europe".\n}\n```',
														"The structure is very similar. The following two expressions are equivalent (variables start with a question mark in SPARQL):",
														"```\n(person) -[:BORN_IN]-> () -[:WITHIN*0..]-> (location)   # Cypher\n\n?person :bornIn / :within* ?location.                   # SPARQL\n```",
														'Because RDF doesn’t distinguish between properties and edges but just uses predicates for both, you can use the same syntax for matching properties. In the following expression, the variable `usa` is bound to any vertex that has a `name` property whose value is the string `"United States"`:',
														"```\n(usa {name:'United States'})   # Cypher\n\n?usa :name \"United States\".    # SPARQL\n```",
														"SPARQL is a nice query language—even if the semantic web never happens, it can be a powerful tool for applications to use internally.",
														[
															{
																heading: [
																	"##### **Graph Databases Compared to the Network Model**",
																],
																children: [
																	"In [“Are Document Databases Repeating History?”](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#sec_datamodels_codasyl) we discussed how CODASYL and the relational model competed to solve the problem of many-to-many relationships in IMS. At first glance, CODASYL’s network model looks similar to the graph model. Are graph databases the second coming of CODASYL in disguise?",
																	"No. They differ in several important ways:",
																	"* In CODASYL, a database had a schema that specified which record type could be nested within which other record type. In a graph database, there is no such restriction: any vertex can have an edge to any other vertex. This gives much greater flexibility for applications to adapt to changing requirements.",
																	"* In CODASYL, the only way to reach a particular record was to traverse one of the access paths to it. In a graph database, you can refer directly to any vertex by its unique ID, or you can use an index to find vertices with a particular value.",
																	"* In CODASYL, the children of a record were an ordered set, so the database had to maintain that ordering (which had consequences for the storage layout) and applications that inserted new records into the database had to worry about the positions of the new records in these sets. In a graph database, vertices and edges are not ordered (you can only sort the results when making a query).",
																	"* In CODASYL, all queries were imperative, difficult to write and easily broken by changes in the schema. In a graph database, you can write your traversal in imperative code if you want to, but most graph databases also support high-level, declarative query languages such as Cypher or SPARQL.",
																],
																summary: [
																	"Are document databases repeating history? Explore how graph databases revolutionize data relationships.",
																],
																longSummary: [
																	"In \"Are Document Databases Repeating History?\" the discussion highlights the competition between CODASYL and the relational model in addressing many-to-many relationships in IMS. While CODASYL's network model resembles the graph model, graph databases stand out due to their lack of schema restrictions on vertex connections, direct access to vertices by ID or indexes, and unordered vertices and edges that don't require maintenance. Additionally, graph databases support high-level, declarative query languages like Cypher or SPARQL, unlike the imperative queries of the past, which were complex to write and prone to breaking with schema changes.",
																],
																imageUrl:
																	"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747276360/blog-cover-images/pcenhicrfkynhobfekfe.webp",
															},
														],
													],
													summary: [
														"SPARQL: A powerful, concise query language for RDF triple-stores, predating Cypher's pattern matching.",
													],
													longSummary: [
														"SPARQL, pronounced \"sparkle,\" is a query language for triple-stores using the RDF data model, predating Cypher. Both share similarities, with Cypher's pattern matching inspired by SPARQL. SPARQL queries, like finding people who moved from the US to Europe, are often more concise. It uses predicates for properties and edges, offering a unified syntax. Despite the uncertain future of the semantic web, SPARQL is a powerful tool for internal applications. Unlike CODASYL's network model, graph databases using SPARQL or Cypher have no schema restrictions, support direct vertex access, and offer high-level, declarative queries.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747276349/blog-cover-images/gcmatxrkh2f7kxlrvm2g.webp",
												},
											],
										],
										summary: [
											"Triple-stores and property graphs: similar models, different terms, powerful data representation.",
										],
										longSummary: [
											"The triple-store model, similar to the property graph model, uses three-part statements: (subject, predicate, object). Subjects are like graph vertices, objects can be values or vertices, and predicates are edge labels. Formats like Turtle provide concise graph data representation. Triple-stores, such as Datomic, are useful for internal data models despite the semantic web's complexity. RDF uses URIs to prevent conflicts, and SPARQL is an efficient query language similar to Cypher. Unlike CODASYL's network model, graph databases lack schema restrictions and support high-level query languages.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747276332/blog-cover-images/av91xtaxjnmgej3qzhfo.webp",
									},
									{
										heading: [
											"## **The Foundation: Datalog**",
										],
										children: [
											"*Datalog* is a much older language than SPARQL or Cypher, having been studied extensively by academics in the 1980s \\[[44](), [45](), [46]()\\]. It is less well known among software engineers, but it is nevertheless important, because it provides the foundation that later query languages build upon.",
											"In practice, Datalog is used in a few data systems: for example, it is the query language of Datomic \\[[40]()\\], and Cascalog \\[[47]()\\] is a Datalog implementation for querying large datasets in Hadoop.[viii]()",
											"Datalog’s data model is similar to the triple-store model, generalized a bit. Instead of writing a triple as (*subject*, *predicate*, *object*), we write it as *predicate*(*subject*, *object*). [Example 2-10](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#fig_datalog_triples) shows how to write the data from our example in Datalog.",
											"##### *Example 2-10. A subset of the data in [Figure 2-5](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#fig_datamodels_graph), represented as Datalog facts*",
											"```\nname(namerica, 'North America').\ntype(namerica, continent).\n\nname(usa, 'United States').\ntype(usa, country).\nwithin(usa, namerica).\n\nname(idaho, 'Idaho').\ntype(idaho, state).\nwithin(idaho, usa).\n\nname(lucy, 'Lucy').\nborn_in(lucy, idaho).\n```",
											"Now that we have defined the data, we can write the same query as before, as shown in [Example 2-11](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#fig_datalog_query). It looks a bit different from the equivalent in Cypher or SPARQL, but don’t let that put you off. Datalog is a subset of Prolog, which you might have seen before if you’ve studied computer science.",
											"##### *Example 2-11. The same query as [Example 2-4](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#fig_cypher_query), expressed in Datalog*",
											"```\nwithin_recursive(Location, Name) :- name(Location, Name).     /* Rule 1 */\n\nwithin_recursive(Location, Name) :- within(Location, Via),    /* Rule 2 */\n                                    within_recursive(Via, Name).\n\nmigrated(Name, BornIn, LivingIn) :- name(Person, Name),       /* Rule 3 */\n                                    born_in(Person, BornLoc),\n                                    within_recursive(BornLoc, BornIn),\n                                    lives_in(Person, LivingLoc),\n                                    within_recursive(LivingLoc, LivingIn).\n\n?- migrated(Who, 'United States', 'Europe').\n/* Who = 'Lucy'. */\n```",
											"Cypher and SPARQL jump in right away with `SELECT`, but Datalog takes a small step at a time. We define *rules* that tell the database about new predicates: here, we define two new predicates, `within_recursive` and `migrated`. These predicates aren’t triples stored in the database, but instead they are derived from data or from other rules. Rules can refer to other rules, just like functions can call other functions or recursively call themselves. Like this, complex queries can be built up a small piece at a time.",
											"In rules, words that start with an uppercase letter are variables, and predicates are matched like in Cypher and SPARQL. For example, `name(Location, Name)` matches the triple `name(namerica, 'North America')` with variable bindings `Location = namerica` and `Name = 'North America'`.",
											"A rule applies if the system can find a match for *all* predicates on the righthand side of the `:-` operator. When the rule applies, it’s as though the lefthand side of the `:-` was added to the database (with variables replaced by the values they matched).",
											"One possible way of applying the rules is thus:",
											"1. `name(namerica, 'North America')` exists in the database, so rule 1 applies. It generates `within_recursive(namerica, 'North America')`.",
											"2. `within(usa, namerica)` exists in the database and the previous step generated `within_recursive(namerica, 'North America')`, so rule 2 applies. It generates `within_recursive(usa, 'North America')`.",
											"3. `within(idaho, usa)` exists in the database and the previous step generated `within_recursive(usa, 'North America')`, so rule 2 applies. It generates `within_recursive(idaho, 'North America')`.",
											"By repeated application of rules 1 and 2, the `within_recursive` predicate can tell us all the locations in North America (or any other location name) contained in our database. This process is illustrated in [Figure 2-6](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#fig_datalog_naive).",
											"![ddia 0206](blob:https://johnfactotum.github.io/5714cb8b-8908-4fbf-93a8-92bf97593780)",
											"###### *Figure 2-6. Determining that Idaho is in North America, using the Datalog rules from [Example 2-11](blob:https://johnfactotum.github.io/b980ba5f-a8f7-415e-ab16-dc85fa593497#fig_datalog_query).*",
											"Now rule 3 can find people who were born in some location `BornIn` and live in some location `LivingIn`. By querying with `BornIn = 'United States'` and `LivingIn = 'Europe'`, and leaving the person as a variable `Who`, we ask the Datalog system to find out which values can appear for the variable `Who`. So, finally we get the same answer as in the earlier Cypher and SPARQL queries.",
											"The Datalog approach requires a different kind of thinking to the other query languages discussed in this chapter, but it’s a very powerful approach, because rules can be combined and reused in different queries. It’s less convenient for simple one-off queries, but it can cope better if your data is complex.",
										],
										summary: [
											"Datalog: A powerful, rule-based query language for complex data relationships and recursive queries.",
										],
										longSummary: [
											"Datalog, a 1980s query language, influences SPARQL and Cypher and is used in systems like Datomic. It uses a triple-store-like model with predicates in the form predicate(subject, object). Unlike Cypher and SPARQL's SELECT statements, Datalog builds queries incrementally with rules that define new predicates. Variables, starting with uppercase letters, match predicates, and rules apply when all predicates on the right of the :- operator match. This approach excels in handling complex data relationships through recursive rule application, such as finding people who migrated from the United States to Europe.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747276330/blog-cover-images/hlwglgrobov9cqwpkvuo.webp",
									},
								],
							],
							summary: [
								"Graph databases excel in complex relationships, offering flexibility and efficiency over traditional models.",
							],
							longSummary: [
								"When selecting data models, many-to-many relationships are vital. Document models fit one-to-many or tree-structured data, while graph models excel with complex relationships using nodes and edges. Graphs manage both homogeneous and heterogeneous data, like Facebook's data graph. Key graph models include property graphs (Neo4j, Titan) and triple-stores (Datomic), with query languages such as Cypher, SPARQL, and Datalog. Cypher simplifies complex queries with concise syntax. Graph databases provide schema flexibility, direct vertex access, and support advanced query languages, unlike older network models.",
							],
							imageUrl:
								"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747276320/blog-cover-images/tlqhvgixudoatq7sljpq.webp",
						},
						{
							heading: ["# **Summary**"],
							children: [
								"Data models are a huge subject, and in this chapter we have taken a quick look at a broad variety of different models. We didn’t have space to go into all the details of each model, but hopefully the overview has been enough to whet your appetite to find out more about the model that best fits your application’s requirements.",
								"Historically, data started out being represented as one big tree (the hierarchical model), but that wasn’t good for representing many-to-many relationships, so the relational model was invented to solve that problem. More recently, developers found that some applications don’t fit well in the relational model either. New nonrelational “NoSQL” datastores have diverged in two main directions:",
								"1. *Document databases* target use cases where data comes in self-contained documents and relationships between one document and another are rare.",
								"2. *Graph databases* go in the opposite direction, targeting use cases where anything is potentially related to everything.",
								"All three models (document, relational, and graph) are widely used today, and each is good in its respective domain. One model can be emulated in terms of another model—for example, graph data can be represented in a relational database—but the result is often awkward. That’s why we have different systems for different purposes, not a single one-size-fits-all solution.",
								"One thing that document and graph databases have in common is that they typically don’t enforce a schema for the data they store, which can make it easier to adapt applications to changing requirements. However, your application most likely still assumes that data has a certain structure; it’s just a question of whether the schema is explicit (enforced on write) or implicit (handled on read).",
								"Each data model comes with its own query language or framework, and we discussed several examples: SQL, MapReduce, MongoDB’s aggregation pipeline, Cypher, SPARQL, and Datalog. We also touched on CSS and XSL/XPath, which aren’t database query languages but have interesting parallels.",
								"Although we have covered a lot of ground, there are still many data models left unmentioned. To give just a few brief examples:",
								"* Researchers working with genome data often need to perform *sequence-similarity searches*, which means taking one very long string (representing a DNA molecule) and matching it against a large database of strings that are similar, but not identical. None of the databases described here can handle this kind of usage, which is why researchers have written specialized genome database software like GenBank \\[[48]()\\].",
								"* Particle physicists have been doing Big Data–style large-scale data analysis for decades, and projects like the Large Hadron Collider (LHC) now work with hundreds of petabytes! At such a scale custom solutions are required to stop the hardware cost from spiraling out of control \\[[49]()\\].",
								"* *Full-text search* is arguably a kind of data model that is frequently used alongside databases. Information retrieval is a large specialist subject that we won’t cover in great detail in this book, but we’ll touch on search indexes in [Chapter 3]() and [Part III]().",
								"We have to leave it there for now. In the next chapter we will discuss some of the trade-offs that come into play when *implementing* the data models described in this chapter.",
								"##### **Footnotes**",
								"[i]() A term borrowed from electronics. Every electric circuit has a certain impedance (resistance to alternating current) on its inputs and outputs. When you connect one circuit’s output to another one’s input, the power transfer across the connection is maximized if the output and input impedances of the two circuits match. An impedance mismatch can lead to signal reflections and other troubles.",
								"[ii]() Literature on the relational model distinguishes several different normal forms, but the distinctions are of little practical interest. As a rule of thumb, if you’re duplicating values that could be stored in just one place, the schema is not normalized.",
								"[iii]() At the time of writing, joins are supported in RethinkDB, not supported in MongoDB, and only supported in predeclared views in CouchDB.",
								"[iv]() Foreign key constraints allow you to restrict modifications, but such constraints are not required by the relational model. Even with constraints, joins on foreign keys are performed at query time, whereas in CODASYL, the join was effectively done at insert time.",
								"[v]() Codd’s original description of the relational model \\[[1]()\\] actually allowed something quite similar to JSON documents within a relational schema. He called it *nonsimple domains*. The idea was that a value in a row doesn’t have to just be a primitive datatype like a number or a string, but could also be a nested relation (table)—so you can have an arbitrarily nested tree structure as a value, much like the JSON or XML support that was added to SQL over 30 years later.",
								"[vi]() IMS and CODASYL both used imperative query APIs. Applications typically used COBOL code to iterate over records in the database, one record at a time \\[[2](), [16]()\\].",
								"[vii]() Technically, Datomic uses 5-tuples rather than triples; the two additional fields are metadata for versioning.",
								"[viii]() Datomic and Cascalog use a Clojure S-expression syntax for Datalog. In the following examples we use a Prolog syntax, which is a little easier to read, but this makes no functional difference.",
								"##### **References**",
								"\\[[1]()\\] Edgar F. Codd: “[A Relational Model of Data for Large Shared Data Banks](https://www.seas.upenn.edu/~zives/03f/cis550/codd.pdf),” *Communications of the ACM*, volume 13, number 6, pages 377–387, June 1970. [doi:10.1145/362384.362685](http://dx.doi.org/10.1145/362384.362685)",
								"\\[[2]()\\] Michael Stonebraker and Joseph M. Hellerstein: “[What Goes Around Comes Around](http://mitpress2.mit.edu/books/chapters/0262693143chapm1.pdf),” in *Readings in Database Systems*, 4th edition, MIT Press, pages 2–41, 2005. ISBN: 978-0-262-69314-1",
								"\\[[3]()\\] Pramod J. Sadalage and Martin Fowler: *NoSQL Distilled*. Addison-Wesley, August 2012. ISBN: 978-0-321-82662-6",
								"\\[[4]()\\] Eric Evans: “[NoSQL: What’s in a Name?](http://blog.sym-link.com/2009/10/30/nosql_whats_in_a_name.html),” *blog.sym-link.com*, October 30, 2009.",
								"\\[[5]()\\] James Phillips: “[Surprises in Our NoSQL Adoption Survey](http://blog.couchbase.com/nosql-adoption-survey-surprises),” *blog.couchbase.com*, February 8, 2012.",
								"\\[[6]()\\] Michael Wagner: *SQL/XML:2006 – Evaluierung der Standardkonformität ausgewählter Datenbanksysteme*. Diplomica Verlag, Hamburg, 2010. ISBN: 978-3-836-64609-3",
								"\\[[7]()\\] “[XML Data in SQL Server](http://technet.microsoft.com/en-us/library/bb522446.aspx),” SQL Server 2012 documentation, *technet.microsoft.com*, 2013.",
								"\\[[8]()\\] “[PostgreSQL 9.3.1 Documentation](http://www.postgresql.org/docs/9.3/static/index.html),” The PostgreSQL Global Development Group, 2013.",
								"\\[[9]()\\] “[The MongoDB 2.4 Manual](http://docs.mongodb.org/manual/),” MongoDB, Inc., 2013.",
								"\\[[10]()\\] “[RethinkDB 1.11 Documentation](http://www.rethinkdb.com/docs/),” *rethinkdb.com*, 2013.",
								"\\[[11]()\\] “[Apache CouchDB 1.6 Documentation](http://docs.couchdb.org/en/latest/),” *docs.couchdb.org*, 2014.",
								"\\[[12]()\\] Lin Qiao, Kapil Surlaker, Shirshanka Das, et al.: “[On Brewing Fresh Espresso: LinkedIn’s Distributed Data Serving Platform](http://www.slideshare.net/amywtang/espresso-20952131),” at *ACM International Conference on Management of Data* (SIGMOD), June 2013.",
								"\\[[13]()\\] Rick Long, Mark Harrington, Robert Hain, and Geoff Nicholls: *[IMS Primer](http://www.redbooks.ibm.com/redbooks/pdfs/sg245352.pdf)*. IBM Redbook SG24-5352-00, IBM International Technical Support Organization, January 2000.",
								"\\[[14]()\\] Stephen D. Bartlett: “[IBM’s IMS—Myths, Realities, and Opportunities](ftp://public.dhe.ibm.com/software/data/ims/pdf/TCG2013015LI.pdf),” The Clipper Group Navigator, TCG2013015LI, July 2013.",
								"\\[[15]()\\] Sarah Mei: “[Why You Should Never Use MongoDB](http://www.sarahmei.com/blog/2013/11/11/why-you-should-never-use-mongodb/),” *sarahmei.com*, November 11, 2013.",
								"\\[[16]()\\] J. S. Knowles and D. M. R. Bell: “The CODASYL Model,” in *Databases—Role and Structure: An Advanced Course*, edited by P. M. Stocker, P. M. D. Gray, and M. P. Atkinson, pages 19–56, Cambridge University Press, 1984. ISBN: 978-0-521-25430-4",
								"\\[[17]()\\] Charles W. Bachman: “[The Programmer as Navigator](http://dl.acm.org/citation.cfm?id=362534),” *Communications of the ACM*, volume 16, number 11, pages 653–658, November 1973. [doi:10.1145/355611.362534](http://dx.doi.org/10.1145/355611.362534)",
								"\\[[18]()\\] Joseph M. Hellerstein, Michael Stonebraker, and James Hamilton: “[Architecture of a Database System](http://db.cs.berkeley.edu/papers/fntdb07-architecture.pdf),” *Foundations and Trends in Databases*, volume 1, number 2, pages 141–259, November 2007. [doi:10.1561/1900000002](http://dx.doi.org/10.1561/1900000002)",
								"\\[[19]()\\] Sandeep Parikh and Kelly Stirman: “[Schema Design for Time Series Data in MongoDB](http://blog.mongodb.org/post/65517193370/schema-design-for-time-series-data-in-mongodb),” *blog.mongodb.org*, October 30, 2013.",
								"\\[[20]()\\] Martin Fowler: “[Schemaless Data Structures](http://martinfowler.com/articles/schemaless/),” *martinfowler.com*, January 7, 2013.",
								"\\[[21]()\\] Amr Awadallah: “[Schema-on-Read vs. Schema-on-Write](http://www.slideshare.net/awadallah/schemaonread-vs-schemaonwrite),” at *Berkeley EECS RAD Lab Retreat*, Santa Cruz, CA, May 2009.",
								"\\[[22]()\\] Martin Odersky: “[The Trouble with Types](http://www.infoq.com/presentations/data-types-issues),” at *Strange Loop*, September 2013.",
								"\\[[23]()\\] Conrad Irwin: “[MongoDB—Confessions of a PostgreSQL Lover](https://speakerdeck.com/conradirwin/mongodb-confessions-of-a-postgresql-lover),” at *HTML5DevConf*, October 2013.",
								"\\[[24]()\\] “[Percona Toolkit Documentation: pt-online-schema-change](http://www.percona.com/doc/percona-toolkit/2.2/pt-online-schema-change.html),” Percona Ireland Ltd., 2013.",
								"\\[[25]()\\] Rany Keddo, Tobias Bielohlawek, and Tobias Schmidt: “[Large Hadron Migrator](https://github.com/soundcloud/lhm),” SoundCloud, 2013.",
								"\\[[26]()\\] Shlomi Noach: “[gh-ost: GitHub’s Online Schema Migration Tool for MySQL](http://githubengineering.com/gh-ost-github-s-online-migration-tool-for-mysql/),” *githubengineering.com*, August 1, 2016.",
								"\\[[27]()\\] James C. Corbett, Jeffrey Dean, Michael Epstein, et al.: “[Spanner: Google’s Globally-Distributed Database](http://research.google.com/archive/spanner.html),” at *10th USENIX Symposium on Operating System Design and Implementation* (OSDI), October 2012.",
								"\\[[28]()\\] Donald K. Burleson: “[Reduce I/O with Oracle Cluster Tables](http://www.dba-oracle.com/oracle_tip_hash_index_cluster_table.htm),” *dba-oracle.com*.",
								"\\[[29]()\\] Fay Chang, Jeffrey Dean, Sanjay Ghemawat, et al.: “[Bigtable: A Distributed Storage System for Structured Data](http://research.google.com/archive/bigtable.html),” at *7th USENIX Symposium on Operating System Design and Implementation* (OSDI), November 2006.",
								"\\[[30]()\\] Bobbie J. Cochrane and Kathy A. McKnight: “[DB2 JSON Capabilities, Part 1: Introduction to DB2 JSON](http://www.ibm.com/developerworks/data/library/techarticle/dm-1306nosqlforjson1/),” IBM developerWorks, June 20, 2013.",
								"\\[[31]()\\] Herb Sutter: “[The Free Lunch Is Over: A Fundamental Turn Toward Concurrency in Software](http://www.gotw.ca/publications/concurrency-ddj.htm),” *Dr. Dobb’s Journal*, volume 30, number 3, pages 202-210, March 2005.",
								"\\[[32]()\\] Joseph M. Hellerstein: “[The Declarative Imperative: Experiences and Conjectures in Distributed Logic](http://www.eecs.berkeley.edu/Pubs/TechRpts/2010/EECS-2010-90.pdf),” Electrical Engineering and Computer Sciences, University of California at Berkeley, Tech report UCB/EECS-2010-90, June 2010.",
								"\\[[33]()\\] Jeffrey Dean and Sanjay Ghemawat: “[MapReduce: Simplified Data Processing on Large Clusters](http://research.google.com/archive/mapreduce.html),” at *6th USENIX Symposium on Operating System Design and Implementation* (OSDI), December 2004.",
								"\\[[34]()\\] Craig Kerstiens: “[JavaScript in Your Postgres](https://blog.heroku.com/javascript_in_your_postgres),” *blog.heroku.com*, June 5, 2013.",
								"\\[[35]()\\] Nathan Bronson, Zach Amsden, George Cabrera, et al.: “[TAO: Facebook’s Distributed Data Store for the Social Graph](https://www.usenix.org/conference/atc13/technical-sessions/presentation/bronson),” at *USENIX Annual Technical Conference* (USENIX ATC), June 2013.",
								"\\[[36]()\\] “[Apache TinkerPop3.2.3 Documentation](http://tinkerpop.apache.org/docs/3.2.3/reference/),” *tinkerpop.apache.org*, October 2016.",
								"\\[[37]()\\] “[The Neo4j Manual v2.0.0](http://docs.neo4j.org/chunked/2.0.0/index.html),” Neo Technology, 2013.",
								"\\[[38]()\\] Emil Eifrem: [Twitter correspondence](https://twitter.com/emileifrem/status/419107961512804352), January 3, 2014.",
								"\\[[39]()\\] David Beckett and Tim Berners-Lee: “[Turtle – Terse RDF Triple Language](http://www.w3.org/TeamSubmission/turtle/),” W3C Team Submission, March 28, 2011.",
								"\\[[40]()\\] “[Datomic Development Resources](http://docs.datomic.com/),” Metadata Partners, LLC, 2013.",
								"\\[[41]()\\] W3C RDF Working Group: “[Resource Description Framework (RDF)](http://www.w3.org/RDF/),” *w3.org*, 10 February 2004.",
								"\\[[42]()\\] “[Apache Jena](http://jena.apache.org/),” Apache Software Foundation.",
								"\\[[43]()\\] Steve Harris, Andy Seaborne, and Eric Prud’hommeaux: “[SPARQL 1.1 Query Language](http://www.w3.org/TR/sparql11-query/),” W3C Recommendation, March 2013.",
								"\\[[44]()\\] Todd J. Green, Shan Shan Huang, Boon Thau Loo, and Wenchao Zhou: “[Datalog and Recursive Query Processing](http://blogs.evergreen.edu/sosw/files/2014/04/Green-Vol5-DBS-017.pdf),” *Foundations and Trends in Databases*, volume 5, number 2, pages 105–195, November 2013. [doi:10.1561/1900000017](http://dx.doi.org/10.1561/1900000017)",
								"\\[[45]()\\] Stefano Ceri, Georg Gottlob, and Letizia Tanca: “[What You Always Wanted to Know About Datalog (And Never Dared to Ask)](https://www.researchgate.net/profile/Letizia_Tanca/publication/3296132_What_you_always_wanted_to_know_about_Datalog_and_never_dared_to_ask/links/0fcfd50ca2d20473ca000000.pdf),” *IEEE Transactions on Knowledge and Data Engineering*, volume 1, number 1, pages 146–166, March 1989. [doi:10.1109/69.43410](http://dx.doi.org/10.1109/69.43410)",
								"\\[[46]()\\] Serge Abiteboul, Richard Hull, and Victor Vianu: *[Foundations of Databases](http://webdam.inria.fr/Alice/)*. Addison-Wesley, 1995. ISBN: 978-0-201-53771-0, available online at *webdam.inria.fr/Alice*",
								"\\[[47]()\\] Nathan Marz: “[Cascalog](http://cascalog.org/),” *cascalog.org*.",
								"\\[[48]()\\] Dennis A. Benson, Ilene Karsch-Mizrachi, David J. Lipman, et al.: “[GenBank](http://nar.oxfordjournals.org/content/36/suppl_1/D25.full-text-lowres.pdf),” *Nucleic Acids Research*, volume 36, Database issue, pages D25–D30, December 2007. [doi:10.1093/nar/gkm929](http://dx.doi.org/10.1093/nar/gkm929)",
								"\\[[49]()\\] Fons Rademakers: “[ROOT for Big Data Analysis](http://indico.cern.ch/getFile.py/access?contribId=13&resId=0&materialId=slides&confId=246453),” at *Workshop on the Future of Big Data Management*, London, UK, June 2013.",
							],
							summary: [
								"Explore data models: hierarchical, relational, and NoSQL, each excelling in unique domains.",
							],
							longSummary: [
								'Data models encompass hierarchical, relational, and nonrelational "NoSQL" systems, each excelling in specific domains. The hierarchical model began as a single tree structure, while the relational model was developed for many-to-many relationships. NoSQL datastores have evolved into document databases for self-contained data and graph databases for interconnected data. Although models can emulate each other, this often results in awkward implementations. Document and graph databases typically lack enforced schemas, allowing flexibility with changing requirements. Each model has its own query language, such as SQL, MapReduce, and Cypher. Specialized models exist for genome data, particle physics, and full-text search.',
							],
							imageUrl:
								"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747276321/blog-cover-images/mny79wfizlh4wj1rpzq5.webp",
						},
					],
				],
				summary: [
					"Choosing the right data model is crucial for software development and application efficiency.",
				],
				longSummary: [
					"Data models are crucial in software development, shaping how software is written and problems are conceptualized. Developers use structures like JSON, relational databases, and graph models to represent real-world scenarios. The relational model, introduced by Edgar Codd in 1970, became dominant for handling many-to-many relationships. NoSQL databases emerged in the 2010s for scalability and schema flexibility, challenging this dominance. Document databases excel with tree-structured data, while graph databases handle complex relationships. The choice of model depends on application needs, with polyglot persistence becoming common. Declarative query languages like SQL and Cypher offer concise querying.",
				],
				imageUrl:
					"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747276310/blog-cover-images/d1eybd4wjpvlpiduk2ag.webp",
			},
			{
				heading: ["# **Chapter 3. Storage and Retrieval**"],
				children: [
					"> *Wer Ordnung hält, ist nur zu faul zum Suchen.*",
					"> *(If you keep things tidily ordered, you’re just too lazy to go searching.)*",
					"> German proverb",
					"![](blob:https://johnfactotum.github.io/cd5e1842-fa05-4f12-916f-c19b0d356a05)",
					"On the most fundamental level, a database needs to do two things: when you give it some data, it should store the data, and when you ask it again later, it should give the data back to you.",
					"In [Chapter 2]() we discussed data models and query languages—i.e., the format in which you (the application developer) give the database your data, and the mechanism by which you can ask for it again later. In this chapter we discuss the same from the database’s point of view: how we can store the data that we’re given, and how we can find it again when we’re asked for it.",
					"Why should you, as an application developer, care how the database handles storage and retrieval internally? You’re probably not going to implement your own storage engine from scratch, but you *do* need to select a storage engine that is appropriate for your application, from the many that are available. In order to tune a storage engine to perform well on your kind of workload, you need to have a rough idea of what the storage engine is doing under the hood.",
					"In particular, there is a big difference between storage engines that are optimized for transactional workloads and those that are optimized for analytics. We will explore that distinction later in [“Transaction Processing or Analytics?”](blob:https://johnfactotum.github.io/faa0281e-3579-4962-b436-619702d86151#sec_storage_analytics), and in [“Column-Oriented Storage”](blob:https://johnfactotum.github.io/faa0281e-3579-4962-b436-619702d86151#sec_storage_column) we’ll discuss a family of storage engines that is optimized for analytics.",
					"However, first we’ll start this chapter by talking about storage engines that are used in the kinds of databases that you’re probably familiar with: traditional relational databases, and also most so-called NoSQL databases. We will examine two families of storage engines: *log-structured* storage engines, and *page-oriented* storage engines such as B-trees.",
					[
						{
							heading: [
								"# **Data Structures That Power Your Database**",
							],
							children: [
								"Consider the world’s simplest database, implemented as two Bash functions:",
								'```\n#!/bin/bash\n\ndb_set () {\n    echo "$1,$2" >> database\n}\n\ndb_get () {\n    grep "^$1," database | sed -e "s/^$1,//" | tail -n 1\n}\n```',
								"These two functions implement a key-value store. You can call `db_set key value`, which will store `key` and `value` in the database. The key and value can be (almost) anything you like—for example, the value could be a JSON document. You can then call `db_get key`, which looks up the most recent value associated with that particular key and returns it.",
								"And it works:",
								'```\n$ db_set 123456 \'{"name":"London","attractions":["Big Ben","London Eye"]}\'\n\n$ db_set 42 \'{"name":"San Francisco","attractions":["Golden Gate Bridge"]}\'\n\n$ db_get 42\n{"name":"San Francisco","attractions":["Golden Gate Bridge"]}\n```',
								"The underlying storage format is very simple: a text file where each line contains a key-value pair, separated by a comma (roughly like a CSV file, ignoring escaping issues). Every call to `db_set` appends to the end of the file, so if you update a key several times, the old versions of the value are not overwritten—you need to look at the last occurrence of a key in a file to find the latest value (hence the `tail -n 1` in `db_get`):",
								'```\n$ db_set 42 \'{"name":"San Francisco","attractions":["Exploratorium"]}\'\n\n$ db_get 42\n{"name":"San Francisco","attractions":["Exploratorium"]}\n\n$ cat database\n123456,{"name":"London","attractions":["Big Ben","London Eye"]}\n42,{"name":"San Francisco","attractions":["Golden Gate Bridge"]}\n42,{"name":"San Francisco","attractions":["Exploratorium"]}\n```',
								"Our `db_set` function actually has pretty good performance for something that is so simple, because appending to a file is generally very efficient. Similarly to what `db_set` does, many databases internally use a *log*, which is an append-only data file. Real databases have more issues to deal with (such as concurrency control, reclaiming disk space so that the log doesn’t grow forever, and handling errors and partially written records), but the basic principle is the same. Logs are incredibly useful, and we will encounter them several times in the rest of this book.",
								"###### **Note**",
								"The word *log* is often used to refer to application logs, where an application outputs text that describes what’s happening. In this book, *log* is used in the more general sense: an append-only sequence of records. It doesn’t have to be human-readable; it might be binary and intended only for other programs to read.",
								"On the other hand, our `db_get` function has terrible performance if you have a large number of records in your database. Every time you want to look up a key, `db_get` has to scan the entire database file from beginning to end, looking for occurrences of the key. In algorithmic terms, the cost of a lookup is *O*(*n*): if you double the number of records *n* in your database, a lookup takes twice as long. That’s not good.",
								"In order to efficiently find the value for a particular key in the database, we need a different data structure: an *index*. In this chapter we will look at a range of indexing structures and see how they compare; the general idea behind them is to keep some additional metadata on the side, which acts as a signpost and helps you to locate the data you want. If you want to search the same data in several different ways, you may need several different indexes on different parts of the data.",
								"An index is an *additional* structure that is derived from the primary data. Many databases allow you to add and remove indexes, and this doesn’t affect the contents of the database; it only affects the performance of queries. Maintaining additional structures incurs overhead, especially on writes. For writes, it’s hard to beat the performance of simply appending to a file, because that’s the simplest possible write operation. Any kind of index usually slows down writes, because the index also needs to be updated every time data is written.",
								"This is an important trade-off in storage systems: well-chosen indexes speed up read queries, but every index slows down writes. For this reason, databases don’t usually index everything by default, but require you—the application developer or database administrator—to choose indexes manually, using your knowledge of the application’s typical query patterns. You can then choose the indexes that give your application the greatest benefit, without introducing more overhead than necessary.",
								[
									{
										heading: ["## **Hash Indexes**"],
										children: [
											"Let’s start with indexes for key-value data. This is not the only kind of data you can index, but it’s very common, and it’s a useful building block for more complex indexes.",
											"Key-value stores are quite similar to the *dictionary* type that you can find in most programming languages, and which is usually implemented as a hash map (hash table). Hash maps are described in many algorithms textbooks \\[[1](), [2]()\\], so we won’t go into detail of how they work here. Since we already have hash maps for our in-memory data structures, why not use them to index our data on disk?",
											"Let’s say our data storage consists only of appending to a file, as in the preceding example. Then the simplest possible indexing strategy is this: keep an in-memory hash map where every key is mapped to a byte offset in the data file—the location at which the value can be found, as illustrated in [Figure 3-1](blob:https://johnfactotum.github.io/faa0281e-3579-4962-b436-619702d86151#fig_storage_csv_hash_index). Whenever you append a new key-value pair to the file, you also update the hash map to reflect the offset of the data you just wrote (this works both for inserting new keys and for updating existing keys). When you want to look up a value, use the hash map to find the offset in the data file, seek to that location, and read the value.",
											"![ddia 0301](blob:https://johnfactotum.github.io/7687e817-4cd1-4b6a-bb73-3820d96bf703)",
											"###### *Figure 3-1. Storing a log of key-value pairs in a CSV-like format, indexed with an in-memory hash map.*",
											"This may sound simplistic, but it is a viable approach. In fact, this is essentially what Bitcask (the default storage engine in Riak) does \\[[3]()\\]. Bitcask offers high-performance reads and writes, subject to the requirement that all the keys fit in the available RAM, since the hash map is kept completely in memory. The values can use more space than there is available memory, since they can be loaded from disk with just one disk seek. If that part of the data file is already in the filesystem cache, a read doesn’t require any disk I/O at all.",
											"A storage engine like Bitcask is well suited to situations where the value for each key is updated frequently. For example, the key might be the URL of a cat video, and the value might be the number of times it has been played (incremented every time someone hits the play button). In this kind of workload, there are a lot of writes, but there are not too many distinct keys—you have a large number of writes per key, but it’s feasible to keep all keys in memory.",
											"As described so far, we only ever append to a file—so how do we avoid eventually running out of disk space? A good solution is to break the log into segments of a certain size by closing a segment file when it reaches a certain size, and making subsequent writes to a new segment file. We can then perform *compaction* on these segments, as illustrated in [Figure 3-2](blob:https://johnfactotum.github.io/faa0281e-3579-4962-b436-619702d86151#fig_storage_compaction). Compaction means throwing away duplicate keys in the log, and keeping only the most recent update for each key.",
											"![ddia 0302](blob:https://johnfactotum.github.io/6d03420e-443f-4ad6-a968-674e062e1a22)",
											"###### *Figure 3-2. Compaction of a key-value update log (counting the number of times each cat video was played), retaining only the most recent value for each key.*",
											"Moreover, since compaction often makes segments much smaller (assuming that a key is overwritten several times on average within one segment), we can also merge several segments together at the same time as performing the compaction, as shown in [Figure 3-3](blob:https://johnfactotum.github.io/faa0281e-3579-4962-b436-619702d86151#fig_storage_merging). Segments are never modified after they have been written, so the merged segment is written to a new file. The merging and compaction of frozen segments can be done in a background thread, and while it is going on, we can still continue to serve read and write requests as normal, using the old segment files. After the merging process is complete, we switch read requests to using the new merged segment instead of the old segments—and then the old segment files can simply be deleted.",
											"![ddia 0303](blob:https://johnfactotum.github.io/8eb1d1db-fb0b-42fa-85b3-29bcd055152c)",
											"###### *Figure 3-3. Performing compaction and segment merging simultaneously.*",
											"Each segment now has its own in-memory hash table, mapping keys to file offsets. In order to find the value for a key, we first check the most recent segment’s hash map; if the key is not present we check the second-most-recent segment, and so on. The merging process keeps the number of segments small, so lookups don’t need to check many hash maps.",
											"Lots of detail goes into making this simple idea work in practice. Briefly, some of the issues that are important in a real implementation are:",
											"File format",
											"CSV is not the best format for a log. It’s faster and simpler to use a binary format that first encodes the length of a string in bytes, followed by the raw string (without need for escaping).",
											"Deleting records",
											"If you want to delete a key and its associated value, you have to append a special deletion record to the data file (sometimes called a *tombstone*). When log segments are merged, the tombstone tells the merging process to discard any previous values for the deleted key.",
											"Crash recovery",
											"If the database is restarted, the in-memory hash maps are lost. In principle, you can restore each segment’s hash map by reading the entire segment file from beginning to end and noting the offset of the most recent value for every key as you go along. However, that might take a long time if the segment files are large, which would make server restarts painful. Bitcask speeds up recovery by storing a snapshot of each segment’s hash map on disk, which can be loaded into memory more quickly.",
											"Partially written records",
											"The database may crash at any time, including halfway through appending a record to the log. Bitcask files include checksums, allowing such corrupted parts of the log to be detected and ignored.",
											"Concurrency control",
											"As writes are appended to the log in a strictly sequential order, a common implementation choice is to have only one writer thread. Data file segments are append-only and otherwise immutable, so they can be read concurrently by multiple threads.",
											"An append-only log seems wasteful at first glance: why don’t you update the file in place, overwriting the old value with the new value? But an append-only design turns out to be good for several reasons:",
											"* Appending and segment merging are sequential write operations, which are generally much faster than random writes, especially on magnetic spinning-disk hard drives. To some extent sequential writes are also preferable on flash-based *solid state drives* (SSDs) \\[[4]()\\]. We will discuss this issue further in [“Comparing B-Trees and LSM-Trees”](blob:https://johnfactotum.github.io/faa0281e-3579-4962-b436-619702d86151#sec_storage_btree_lsm_comparison).",
											"* Concurrency and crash recovery are much simpler if segment files are append-only or immutable. For example, you don’t have to worry about the case where a crash happened while a value was being overwritten, leaving you with a file containing part of the old and part of the new value spliced together.",
											"* Merging old segments avoids the problem of data files getting fragmented over time.",
											"However, the hash table index also has limitations:",
											"* The hash table must fit in memory, so if you have a very large number of keys, you’re out of luck. In principle, you could maintain a hash map on disk, but unfortunately it is difficult to make an on-disk hash map perform well. It requires a lot of random access I/O, it is expensive to grow when it becomes full, and hash collisions require fiddly logic \\[[5]()\\].",
											"* Range queries are not efficient. For example, you cannot easily scan over all keys between `kitty00000` and `kitty99999`—you’d have to look up each key individually in the hash maps.",
											"In the next section we will look at an indexing structure that doesn’t have those limitations.",
										],
										summary: [
											"In-memory hash maps boost key-value store performance, but require RAM and struggle with range queries.",
										],
										longSummary: [
											"Key-value stores achieve high performance using an in-memory hash map to index keys to byte offsets, similar to Bitcask. This method excels with frequent key updates if all keys fit in RAM. Disk space is managed by segmenting logs, compacting them to discard duplicates, and merging segments with individual hash maps. The append-only design allows faster sequential writes, simpler concurrency, and easier crash recovery. However, it requires the hash table to fit in memory, and range queries remain inefficient.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280140/blog-cover-images/vji0deen64evnxnrwpqj.webp",
									},
									{
										heading: [
											"## **SSTables and LSM-Trees**",
										],
										children: [
											"In [Figure 3-3](blob:https://johnfactotum.github.io/faa0281e-3579-4962-b436-619702d86151#fig_storage_merging), each log-structured storage segment is a sequence of key-value pairs. These pairs appear in the order that they were written, and values later in the log take precedence over values for the same key earlier in the log. Apart from that, the order of key-value pairs in the file does not matter.",
											"Now we can make a simple change to the format of our segment files: we require that the sequence of key-value pairs is *sorted by key*. At first glance, that requirement seems to break our ability to use sequential writes, but we’ll get to that in a moment.",
											"We call this format *Sorted String Table*, or *SSTable* for short. We also require that each key only appears once within each merged segment file (the compaction process already ensures that). SSTables have several big advantages over log segments with hash indexes:",
											"1. Merging segments is simple and efficient, even if the files are bigger than the available memory. The approach is like the one used in the *mergesort* algorithm and is illustrated in [Figure 3-4](blob:https://johnfactotum.github.io/faa0281e-3579-4962-b436-619702d86151#fig_storage_sstable_merging): you start reading the input files side by side, look at the first key in each file, copy the lowest key (according to the sort order) to the output file, and repeat. This produces a new merged segment file, also sorted by key.",
											"   ![ddia 0304](blob:https://johnfactotum.github.io/23a9a5c0-1300-4e2f-b791-f051c25acf14)",
											"###### *Figure 3-4. Merging several SSTable segments, retaining only the most recent value for each key.*",
											"   What if the same key appears in several input segments? Remember that each segment contains all the values written to the database during some period of time. This means that all the values in one input segment must be more recent than all the values in the other segment (assuming that we always merge adjacent segments). When multiple segments contain the same key, we can keep the value from the most recent segment and discard the values in older segments.",
											"2. In order to find a particular key in the file, you no longer need to keep an index of all the keys in memory. See [Figure 3-5](blob:https://johnfactotum.github.io/faa0281e-3579-4962-b436-619702d86151#fig_storage_sstable_index) for an example: say you’re looking for the key `handiwork`, but you don’t know the exact offset of that key in the segment file. However, you do know the offsets for the keys *handbag* and *handsome*, and because of the sorting you know that *handiwork* must appear between those two. This means you can jump to the offset for *handbag* and scan from there until you find *handiwork* (or not, if the key is not present in the file).",
											"   ![ddia 0305](blob:https://johnfactotum.github.io/f53a5a3e-f5ce-460b-bdfe-6a30540864a3)",
											"###### *Figure 3-5. An SSTable with an in-memory index.*",
											"   You still need an in-memory index to tell you the offsets for some of the keys, but it can be sparse: one key for every few kilobytes of segment file is sufficient, because a few kilobytes can be scanned very quickly.[i]()",
											"3. Since read requests need to scan over several key-value pairs in the requested range anyway, it is possible to group those records into a block and compress it before writing it to disk (indicated by the shaded area in [Figure 3-5](blob:https://johnfactotum.github.io/faa0281e-3579-4962-b436-619702d86151#fig_storage_sstable_index)). Each entry of the sparse in-memory index then points at the start of a compressed block. Besides saving disk space, compression also reduces the I/O bandwidth use.",
											[
												{
													heading: [
														"### **Constructing and maintaining SSTables**",
													],
													children: [
														"Fine so far—but how do you get your data to be sorted by key in the first place? Our incoming writes can occur in any order.",
														"Maintaining a sorted structure on disk is possible (see [“B-Trees”](blob:https://johnfactotum.github.io/faa0281e-3579-4962-b436-619702d86151#sec_storage_b_trees)), but maintaining it in memory is much easier. There are plenty of well-known tree data structures that you can use, such as red-black trees or AVL trees \\[[2]()\\]. With these data structures, you can insert keys in any order and read them back in sorted order.",
														"We can now make our storage engine work as follows:",
														"* When a write comes in, add it to an in-memory balanced tree data structure (for example, a red-black tree). This in-memory tree is sometimes called a *memtable*.",
														"* When the memtable gets bigger than some threshold—typically a few megabytes—write it out to disk as an SSTable file. This can be done efficiently because the tree already maintains the key-value pairs sorted by key. The new SSTable file becomes the most recent segment of the database. While the SSTable is being written out to disk, writes can continue to a new memtable instance.",
														"* In order to serve a read request, first try to find the key in the memtable, then in the most recent on-disk segment, then in the next-older segment, etc.",
														"* From time to time, run a merging and compaction process in the background to combine segment files and to discard overwritten or deleted values.",
														"This scheme works very well. It only suffers from one problem: if the database crashes, the most recent writes (which are in the memtable but not yet written out to disk) are lost. In order to avoid that problem, we can keep a separate log on disk to which every write is immediately appended, just like in the previous section. That log is not in sorted order, but that doesn’t matter, because its only purpose is to restore the memtable after a crash. Every time the memtable is written out to an SSTable, the corresponding log can be discarded.",
													],
													summary: [
														"Efficient data storage: In-memory trees handle writes, with logs ensuring crash recovery.",
													],
													longSummary: [
														"To maintain sorted data by key, the storage engine uses an in-memory balanced tree structure called a memtable, which accepts writes in any order. Once the memtable reaches a certain size, it is written to disk as an SSTable file, while new writes continue in a new memtable. Read requests first check the memtable, then older disk segments. Background processes merge and compact these segments to remove overwritten values. To prevent data loss during crashes, a separate log records every write immediately, allowing the memtable to be restored after a crash and discarded once written to an SSTable.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280160/blog-cover-images/a7uego7f3bkstor8iwnw.webp",
												},
												{
													heading: [
														"### **Making an LSM-tree out of SSTables**",
													],
													children: [
														"The algorithm described here is essentially what is used in LevelDB \\[[6]()\\] and RocksDB \\[[7]()\\], key-value storage engine libraries that are designed to be embedded into other applications. Among other things, LevelDB can be used in Riak as an alternative to Bitcask. Similar storage engines are used in Cassandra and HBase \\[[8]()\\], both of which were inspired by Google’s Bigtable paper \\[[9]()\\] (which introduced the terms *SSTable* and *memtable*).",
														"Originally this indexing structure was described by Patrick O’Neil et al. under the name *Log-Structured Merge-Tree* (or LSM-Tree) \\[[10]()\\], building on earlier work on log-structured filesystems \\[[11]()\\]. Storage engines that are based on this principle of merging and compacting sorted files are often called LSM storage engines.",
														"Lucene, an indexing engine for full-text search used by Elasticsearch and Solr, uses a similar method for storing its *term dictionary* \\[[12](), [13]()\\]. A full-text index is much more complex than a key-value index but is based on a similar idea: given a word in a search query, find all the documents (web pages, product descriptions, etc.) that mention the word. This is implemented with a key-value structure where the key is a word (a *term*) and the value is the list of IDs of all the documents that contain the word (the *postings list*). In Lucene, this mapping from term to postings list is kept in SSTable-like sorted files, which are merged in the background as needed \\[[14]()\\].",
													],
													summary: [
														"Discover how LSM-Trees power efficient data storage in LevelDB, RocksDB, and Lucene.",
													],
													longSummary: [
														"The algorithm used in LevelDB and RocksDB, key-value storage engine libraries, is based on the Log-Structured Merge-Tree (LSM-Tree) indexing structure, initially described by Patrick O'Neil et al. LSM storage engines merge and compact sorted files, a concept also utilized by Lucene, the indexing engine for Elasticsearch and Solr. While Lucene's full-text index is more complex than a key-value index, it operates on a similar principle: using a key-value structure where the key is a word and the value is a list of document IDs containing that word, enabling efficient document retrieval.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280162/blog-cover-images/bfk0g2rwbeoc9yudwgeg.webp",
												},
												{
													heading: [
														"### **Performance optimizations**",
													],
													children: [
														"As always, a lot of detail goes into making a storage engine perform well in practice. For example, the LSM-tree algorithm can be slow when looking up keys that do not exist in the database: you have to check the memtable, then the segments all the way back to the oldest (possibly having to read from disk for each one) before you can be sure that the key does not exist. In order to optimize this kind of access, storage engines often use additional *Bloom filters* \\[[15]()\\]. (A Bloom filter is a memory-efficient data structure for approximating the contents of a set. It can tell you if a key does not appear in the database, and thus saves many unnecessary disk reads for nonexistent keys.)",
														"There are also different strategies to determine the order and timing of how SSTables are compacted and merged. The most common options are *size-tiered* and *leveled* compaction. LevelDB and RocksDB use leveled compaction (hence the name of LevelDB), HBase uses size-tiered, and Cassandra supports both \\[[16]()\\]. In size-tiered compaction, newer and smaller SSTables are successively merged into older and larger SSTables. In leveled compaction, the key range is split up into smaller SSTables and older data is moved into separate “levels,” which allows the compaction to proceed more incrementally and use less disk space.",
														"Even though there are many subtleties, the basic idea of LSM-trees—keeping a cascade of SSTables that are merged in the background—is simple and effective. Even when the dataset is much bigger than the available memory it continues to work well. Since data is stored in sorted order, you can efficiently perform range queries (scanning all keys above some minimum and up to some maximum), and because the disk writes are sequential the LSM-tree can support remarkably high write throughput.",
													],
													summary: [
														"Optimize LSM-trees for speed: Bloom filters, compaction strategies, and efficient range queries boost performance.",
													],
													longSummary: [
														"LSM-tree storage engines need optimization for practical performance, particularly when looking up nonexistent keys, which can be slow. Bloom filters are often used to prevent unnecessary disk reads. There are different compaction strategies: size-tiered, where newer, smaller SSTables merge into older, larger ones, and leveled compaction, where the key range is split into smaller SSTables with older data in separate levels. Despite these complexities, the basic LSM-tree concept—maintaining a cascade of SSTables that merge in the background—remains effective for datasets larger than available memory, enabling efficient range queries and high write throughput through sequential disk writes.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280166/blog-cover-images/gpit3bedifatmmv3nec6.webp",
												},
											],
										],
										summary: [
											"SSTables optimize storage with sorted key-value pairs, enabling efficient merging and fast queries.",
										],
										longSummary: [
											"SSTables (Sorted String Tables) improve log-structured storage by sorting key-value pairs, allowing each key to appear once per segment. This simplifies merging, reduces the need for a full in-memory index, and enables data compression to save space and reduce I/O. Writes go to an in-memory balanced tree (memtable) and are periodically written to disk as SSTables. Background processes merge segments to remove outdated values, while a separate log prevents data loss during crashes. Used by LSM-tree storage engines like LevelDB and RocksDB, this method efficiently handles large datasets with high write throughput and effective range queries.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280139/blog-cover-images/ojjzptgz3jclabxix34m.webp",
									},
									{
										heading: ["## **B-Trees**"],
										children: [
											"The log-structured indexes we have discussed so far are gaining acceptance, but they are not the most common type of index. The most widely used indexing structure is quite different: the *B-tree*.",
											"Introduced in 1970 \\[[17]()\\] and called “ubiquitous” less than 10 years later \\[[18]()\\], B-trees have stood the test of time very well. They remain the standard index implementation in almost all relational databases, and many nonrelational databases use them too.",
											"Like SSTables, B-trees keep key-value pairs sorted by key, which allows efficient key-value lookups and range queries. But that’s where the similarity ends: B-trees have a very different design philosophy.",
											"The log-structured indexes we saw earlier break the database down into variable-size *segments*, typically several megabytes or more in size, and always write a segment sequentially. By contrast, B-trees break the database down into fixed-size *blocks* or *pages*, traditionally 4 KB in size (sometimes bigger), and read or write one page at a time. This design corresponds more closely to the underlying hardware, as disks are also arranged in fixed-size blocks.",
											"Each page can be identified using an address or location, which allows one page to refer to another—similar to a pointer, but on disk instead of in memory. We can use these page references to construct a tree of pages, as illustrated in [Figure 3-6](blob:https://johnfactotum.github.io/faa0281e-3579-4962-b436-619702d86151#fig_storage_b_tree).",
											"![ddia 0306](blob:https://johnfactotum.github.io/d46d9a1a-9e2b-4b71-a71a-a0064bdb2d86)",
											"###### *Figure 3-6. Looking up a key using a B-tree index.*",
											"One page is designated as the *root* of the B-tree; whenever you want to look up a key in the index, you start here. The page contains several keys and references to child pages. Each child is responsible for a continuous range of keys, and the keys between the references indicate where the boundaries between those ranges lie.",
											"In the example in [Figure 3-6](blob:https://johnfactotum.github.io/faa0281e-3579-4962-b436-619702d86151#fig_storage_b_tree), we are looking for the key 251, so we know that we need to follow the page reference between the boundaries 200 and 300. That takes us to a similar-looking page that further breaks down the 200–300 range into subranges. Eventually we get down to a page containing individual keys (a *leaf page*), which either contains the value for each key inline or contains references to the pages where the values can be found.",
											"The number of references to child pages in one page of the B-tree is called the *branching factor*. For example, in [Figure 3-6](blob:https://johnfactotum.github.io/faa0281e-3579-4962-b436-619702d86151#fig_storage_b_tree) the branching factor is six. In practice, the branching factor depends on the amount of space required to store the page references and the range boundaries, but typically it is several hundred.",
											"If you want to update the value for an existing key in a B-tree, you search for the leaf page containing that key, change the value in that page, and write the page back to disk (any references to that page remain valid). If you want to add a new key, you need to find the page whose range encompasses the new key and add it to that page. If there isn’t enough free space in the page to accommodate the new key, it is split into two half-full pages, and the parent page is updated to account for the new subdivision of key ranges—see [Figure 3-7](blob:https://johnfactotum.github.io/faa0281e-3579-4962-b436-619702d86151#fig_storage_b_tree_split).[ii]()",
											"![ddia 0307](blob:https://johnfactotum.github.io/1909bbdc-7691-49ce-9082-ffda8d0a3114)",
											"###### *Figure 3-7. Growing a B-tree by splitting a page.*",
											"This algorithm ensures that the tree remains *balanced*: a B-tree with *n* keys always has a depth of *O*(log *n*). Most databases can fit into a B-tree that is three or four levels deep, so you don’t need to follow many page references to find the page you are looking for. (A four-level tree of 4 KB pages with a branching factor of 500 can store up to 256 TB.)",
											[
												{
													heading: [
														"### **Making B-trees reliable**",
													],
													children: [
														"The basic underlying write operation of a B-tree is to overwrite a page on disk with new data. It is assumed that the overwrite does not change the location of the page; i.e., all references to that page remain intact when the page is overwritten. This is in stark contrast to log-structured indexes such as LSM-trees, which only append to files (and eventually delete obsolete files) but never modify files in place.",
														"You can think of overwriting a page on disk as an actual hardware operation. On a magnetic hard drive, this means moving the disk head to the right place, waiting for the right position on the spinning platter to come around, and then overwriting the appropriate sector with new data. On SSDs, what happens is somewhat more complicated, due to the fact that an SSD must erase and rewrite fairly large blocks of a storage chip at a time \\[[19]()\\].",
														"Moreover, some operations require several different pages to be overwritten. For example, if you split a page because an insertion caused it to be overfull, you need to write the two pages that were split, and also overwrite their parent page to update the references to the two child pages. This is a dangerous operation, because if the database crashes after only some of the pages have been written, you end up with a corrupted index (e.g., there may be an *orphan* page that is not a child of any parent).",
														"In order to make the database resilient to crashes, it is common for B-tree implementations to include an additional data structure on disk: a *write-ahead log* (WAL, also known as a *redo log*). This is an append-only file to which every B-tree modification must be written before it can be applied to the pages of the tree itself. When the database comes back up after a crash, this log is used to restore the B-tree back to a consistent state \\[[5](), [20]()\\].",
														"An additional complication of updating pages in place is that careful concurrency control is required if multiple threads are going to access the B-tree at the same time—otherwise a thread may see the tree in an inconsistent state. This is typically done by protecting the tree’s data structures with *latches* (lightweight locks). Log-structured approaches are simpler in this regard, because they do all the merging in the background without interfering with incoming queries and atomically swap old segments for new segments from time to time.",
													],
													summary: [
														"B-trees overwrite disk pages, risking corruption; WAL ensures resilience, unlike simpler LSM-trees.",
													],
													longSummary: [
														"B-tree operations involve overwriting disk pages with new data, unlike log-structured indexes like LSM-trees that append to files. This overwriting can be straightforward on magnetic drives but more complex on SSDs. Some operations require multiple pages to be overwritten, posing a risk of index corruption if a crash occurs mid-operation. To ensure crash resilience, B-trees use a write-ahead log (WAL) to record changes before applying them. Additionally, B-trees require careful concurrency control with latches when accessed by multiple threads, making them more complex than log-structured approaches that perform background merging without query interference.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280159/blog-cover-images/cudhd5psnhdtan0r1ndp.webp",
												},
												{
													heading: [
														"### **B-tree optimizations**",
													],
													children: [
														"As B-trees have been around for so long, it’s not surprising that many optimizations have been developed over the years. To mention just a few:",
														"* Instead of overwriting pages and maintaining a WAL for crash recovery, some databases (like LMDB) use a copy-on-write scheme \\[[21]()\\]. A modified page is written to a different location, and a new version of the parent pages in the tree is created, pointing at the new location. This approach is also useful for concurrency control, as we shall see in [“Snapshot Isolation and Repeatable Read”]().",
														"* We can save space in pages by not storing the entire key, but abbreviating it. Especially in pages on the interior of the tree, keys only need to provide enough information to act as boundaries between key ranges. Packing more keys into a page allows the tree to have a higher branching factor, and thus fewer levels.[iii]()",
														"* In general, pages can be positioned anywhere on disk; there is nothing requiring pages with nearby key ranges to be nearby on disk. If a query needs to scan over a large part of the key range in sorted order, that page-by-page layout can be inefficient, because a disk seek may be required for every page that is read. Many B-tree implementations therefore try to lay out the tree so that leaf pages appear in sequential order on disk. However, it’s difficult to maintain that order as the tree grows. By contrast, since LSM-trees rewrite large segments of the storage in one go during merging, it’s easier for them to keep sequential keys close to each other on disk.",
														"* Additional pointers have been added to the tree. For example, each leaf page may have references to its sibling pages to the left and right, which allows scanning keys in order without jumping back to parent pages.",
														"* B-tree variants such as *fractal trees* \\[[22]()\\] borrow some log-structured ideas to reduce disk seeks (and they have nothing to do with fractals).",
													],
													summary: [
														"Discover B-tree optimizations: copy-on-write, key abbreviation, sequential layout, and fractal trees.",
													],
													longSummary: [
														"B-trees have undergone numerous optimizations over the years. Some databases use copy-on-write schemes instead of overwriting pages and maintaining a WAL for crash recovery. Space efficiency is achieved by abbreviating keys, and while pages can be placed anywhere on disk, many implementations aim to arrange leaf pages sequentially, though this becomes challenging as the tree expands. Additional pointers, like sibling references from leaf pages, facilitate ordered key scanning without parent page jumps. Variants such as fractal trees incorporate log-structured concepts to minimize disk seeks.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280159/blog-cover-images/uxm71aluydh6jowoucas.webp",
												},
											],
										],
										summary: [
											"B-trees: The enduring backbone of database indexing, balancing efficiency and complexity since 1970.",
										],
										longSummary: [
											"B-trees, introduced in 1970, are the standard index in relational databases, keeping key-value pairs sorted using fixed-size blocks. They form a balanced tree with a depth of O(log n), where updates modify leaf pages and full pages split to maintain balance. B-trees overwrite disk pages, necessitating a write-ahead log (WAL) for crash resilience and careful concurrency control. Optimizations include copy-on-write schemes, key abbreviation, and additional pointers for efficient scanning. Variants like fractal trees use log-structured ideas to reduce disk seeks.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280138/blog-cover-images/urpwflhwm8r8zi6vf0k4.webp",
									},
									{
										heading: [
											"## **Comparing B-Trees and LSM-Trees**",
										],
										children: [
											"Even though B-tree implementations are generally more mature than LSM-tree implementations, LSM-trees are also interesting due to their performance characteristics. As a rule of thumb, LSM-trees are typically faster for writes, whereas B-trees are thought to be faster for reads \\[[23]()\\]. Reads are typically slower on LSM-trees because they have to check several different data structures and SSTables at different stages of compaction.",
											"However, benchmarks are often inconclusive and sensitive to details of the workload. You need to test systems with your particular workload in order to make a valid comparison. In this section we will briefly discuss a few things that are worth considering when measuring the performance of a storage engine.",
											[
												{
													heading: [
														"### **Advantages of LSM-trees**",
													],
													children: [
														"A B-tree index must write every piece of data at least twice: once to the write-ahead log, and once to the tree page itself (and perhaps again as pages are split). There is also overhead from having to write an entire page at a time, even if only a few bytes in that page changed. Some storage engines even overwrite the same page twice in order to avoid ending up with a partially updated page in the event of a power failure \\[[24](), [25]()\\].",
														"Log-structured indexes also rewrite data multiple times due to repeated compaction and merging of SSTables. This effect—one write to the database resulting in multiple writes to the disk over the course of the database’s lifetime—is known as *write amplification*. It is of particular concern on SSDs, which can only overwrite blocks a limited number of times before wearing out.",
														"In write-heavy applications, the performance bottleneck might be the rate at which the database can write to disk. In this case, write amplification has a direct performance cost: the more that a storage engine writes to disk, the fewer writes per second it can handle within the available disk bandwidth.",
														"Moreover, LSM-trees are typically able to sustain higher write throughput than B-trees, partly because they sometimes have lower write amplification (although this depends on the storage engine configuration and workload), and partly because they sequentially write compact SSTable files rather than having to overwrite several pages in the tree \\[[26]()\\]. This difference is particularly important on magnetic hard drives, where sequential writes are much faster than random writes.",
														"LSM-trees can be compressed better, and thus often produce smaller files on disk than B-trees. B-tree storage engines leave some disk space unused due to fragmentation: when a page is split or when a row cannot fit into an existing page, some space in a page remains unused. Since LSM-trees are not page-oriented and periodically rewrite SSTables to remove fragmentation, they have lower storage overheads, especially when using leveled compaction \\[[27]()\\].",
														"On many SSDs, the firmware internally uses a log-structured algorithm to turn random writes into sequential writes on the underlying storage chips, so the impact of the storage engine’s write pattern is less pronounced \\[[19]()\\]. However, lower write amplification and reduced fragmentation are still advantageous on SSDs: representing data more compactly allows more read and write requests within the available I/O bandwidth.",
													],
													summary: [
														"LSM-trees outperform B-trees in write-heavy tasks by minimizing write amplification and fragmentation.",
													],
													longSummary: [
														"B-tree indexes involve multiple writes due to the write-ahead log and tree page updates, while log-structured indexes experience write amplification from compaction and merging of SSTables. This is particularly problematic for SSDs with limited write cycles, as it affects performance by restricting disk bandwidth in write-heavy applications. LSM-trees generally offer higher write throughput than B-trees, thanks to lower write amplification and sequential writing of compact SSTable files. They also achieve better compression and smaller file sizes, avoiding the fragmentation issues B-trees face. Despite SSDs using log-structured algorithms, reducing write amplification and fragmentation enhances I/O bandwidth efficiency.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280158/blog-cover-images/hplc4zzloekexpj2arem.webp",
												},
												{
													heading: [
														"### **Downsides of LSM-trees**",
													],
													children: [
														"A downside of log-structured storage is that the compaction process can sometimes interfere with the performance of ongoing reads and writes. Even though storage engines try to perform compaction incrementally and without affecting concurrent access, disks have limited resources, so it can easily happen that a request needs to wait while the disk finishes an expensive compaction operation. The impact on throughput and average response time is usually small, but at higher percentiles (see [“Describing Performance”]()) the response time of queries to log-structured storage engines can sometimes be quite high, and B-trees can be more predictable \\[[28]()\\].",
														"Another issue with compaction arises at high write throughput: the disk’s finite write bandwidth needs to be shared between the initial write (logging and flushing a memtable to disk) and the compaction threads running in the background. When writing to an empty database, the full disk bandwidth can be used for the initial write, but the bigger the database gets, the more disk bandwidth is required for compaction.",
														"If write throughput is high and compaction is not configured carefully, it can happen that compaction cannot keep up with the rate of incoming writes. In this case, the number of unmerged segments on disk keeps growing until you run out of disk space, and reads also slow down because they need to check more segment files. Typically, SSTable-based storage engines do not throttle the rate of incoming writes, even if compaction cannot keep up, so you need explicit monitoring to detect this situation \\[[29](), [30]()\\].",
														"An advantage of B-trees is that each key exists in exactly one place in the index, whereas a log-structured storage engine may have multiple copies of the same key in different segments. This aspect makes B-trees attractive in databases that want to offer strong transactional semantics: in many relational databases, transaction isolation is implemented using locks on ranges of keys, and in a B-tree index, those locks can be directly attached to the tree \\[[5]()\\]. In [Chapter 7]() we will discuss this point in more detail.",
														"B-trees are very ingrained in the architecture of databases and provide consistently good performance for many workloads, so it’s unlikely that they will go away anytime soon. In new datastores, log-structured indexes are becoming increasingly popular. There is no quick and easy rule for determining which type of storage engine is better for your use case, so it is worth testing empirically.",
													],
													summary: [
														"Log-structured storage struggles with compaction, impacting performance; B-trees offer consistent reliability.",
													],
													longSummary: [
														"Log-structured storage can suffer from performance issues due to compaction, leading to higher response times at higher percentiles compared to B-trees. At high write throughput, compaction competes for disk bandwidth with initial writes, and if it lags, unmerged segments can accumulate, consuming disk space and slowing reads. B-trees, storing each key once, are favored in transactional databases for their predictable performance and key-range lock isolation. Despite B-trees' established role in database architecture, log-structured indexes are gaining popularity in new datastores. There's no definitive rule for choosing between them, so empirical testing is recommended.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280159/blog-cover-images/eboyvyaqvb04qqppdaa8.webp",
												},
											],
										],
										summary: [
											"LSM-trees excel in write-heavy tasks, while B-trees offer consistent read performance. Test both.",
										],
										longSummary: [
											"B-tree implementations are generally more mature, but LSM-trees offer intriguing performance characteristics, particularly excelling in write-heavy applications due to lower write amplification and sequential writing of SSTable files. While B-trees are typically faster for reads, LSM-trees can sustain higher write throughput and achieve better compression, producing smaller files. However, LSM-trees face challenges with compaction, which can interfere with performance and cause high response times. B-trees, storing each key once, are favored for transactional databases with key-range locks. Ultimately, the choice between B-trees and LSM-trees depends on specific workloads, necessitating empirical testing for valid comparisons.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280138/blog-cover-images/mpt5xbmrtingpwxvugur.webp",
									},
									{
										heading: [
											"## **Other Indexing Structures**",
										],
										children: [
											"So far we have only discussed key-value indexes, which are like a *primary key* index in the relational model. A primary key uniquely identifies one row in a relational table, or one document in a document database, or one vertex in a graph database. Other records in the database can refer to that row/document/vertex by its primary key (or ID), and the index is used to resolve such references.",
											"It is also very common to have *secondary indexes*. In relational databases, you can create several secondary indexes on the same table using the `CREATE INDEX` command, and they are often crucial for performing joins efficiently. For example, in [Figure 2-1]() in [Chapter 2]() you would most likely have a secondary index on the `user_id` columns so that you can find all the rows belonging to the same user in each of the tables.",
											"A secondary index can easily be constructed from a key-value index. The main difference is that keys are not unique; i.e., there might be many rows (documents, vertices) with the same key. This can be solved in two ways: either by making each value in the index a list of matching row identifiers (like a postings list in a full-text index) or by making each key unique by appending a row identifier to it. Either way, both B-trees and log-structured indexes can be used as secondary indexes.",
											"### **Storing values within the index**",
											[
												{
													heading: [
														"The key in an index is the thing that queries search for, but the value can be one of two things: it could be the actual row (document, vertex) in question, or it could be a reference to the row stored elsewhere. In the latter case, the place where rows are stored is known as a *heap file*, and it stores data in no particular order (it may be append-only, or it may keep track of deleted rows in order to overwrite them with new data later). The heap file approach is common because it avoids duplicating data when multiple secondary indexes are present: each index just references a location in the heap file, and the actual data is kept in one place.",
													],
													children: [
														"When updating a value without changing the key, the heap file approach can be quite efficient: the record can be overwritten in place, provided that the new value is not larger than the old value. The situation is more complicated if the new value is larger, as it probably needs to be moved to a new location in the heap where there is enough space. In that case, either all indexes need to be updated to point at the new heap location of the record, or a forwarding pointer is left behind in the old heap location \\[[5]()\\].",
														"In some situations, the extra hop from the index to the heap file is too much of a performance penalty for reads, so it can be desirable to store the indexed row directly within an index. This is known as a *clustered index*. For example, in MySQL’s InnoDB storage engine, the primary key of a table is always a clustered index, and secondary indexes refer to the primary key (rather than a heap file location) \\[[31]()\\]. In SQL Server, you can specify one clustered index per table \\[[32]()\\].",
														"A compromise between a clustered index (storing all row data within the index) and a nonclustered index (storing only references to the data within the index) is known as a *covering index* or *index with included columns*, which stores *some* of a table’s columns within the index \\[[33]()\\]. This allows some queries to be answered by using the index alone (in which case, the index is said to *cover* the query) \\[[32]()\\].",
														"As with any kind of duplication of data, clustered and covering indexes can speed up reads, but they require additional storage and can add overhead on writes. Databases also need to go to additional effort to enforce transactional guarantees, because applications should not see inconsistencies due to the duplication.",
													],
													summary: [
														"Efficiently update heap files with clustered or covering indexes, balancing speed and storage.",
													],
													longSummary: [
														"When updating a heap file without changing the key, records can be overwritten if the new value isn't larger. Larger values require moving the record, leading to index updates or forwarding pointers, which can slow performance. Clustered indexes, used by MySQL's InnoDB for primary keys and allowed once per table in SQL Server, store indexed rows directly within the index. Covering indexes store some table columns within the index, enabling faster reads but increasing storage needs, write overhead, and maintenance for transactional consistency.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280171/blog-cover-images/plp4nuaqxpy68i3byjle.webp",
												},
												{
													heading: [
														"### **Multi-column indexes**",
													],
													children: [
														"The indexes discussed so far only map a single key to a value. That is not sufficient if we need to query multiple columns of a table (or multiple fields in a document) simultaneously.",
														"The most common type of multi-column index is called a *concatenated index*, which simply combines several fields into one key by appending one column to another (the index definition specifies in which order the fields are concatenated). This is like an old-fashioned paper phone book, which provides an index from (*lastname*, *firstname*) to phone number. Due to the sort order, the index can be used to find all the people with a particular last name, or all the people with a particular *lastname-firstname* combination. However, the index is useless if you want to find all the people with a particular first name.",
														"Multi-dimensional indexes are a more general way of querying several columns at once, which is particularly important for geospatial data. For example, a restaurant-search website may have a database containing the latitude and longitude of each restaurant. When a user is looking at the restaurants on a map, the website needs to search for all the restaurants within the rectangular map area that the user is currently viewing. This requires a two-dimensional range query like the following:",
														"```\nSELECT * FROM restaurants WHERE latitude  > 51.4946 AND latitude  < 51.5079\n                            AND longitude > -0.1162 AND longitude < -0.1004;\n```",
														"A standard B-tree or LSM-tree index is not able to answer that kind of query efficiently: it can give you either all the restaurants in a range of latitudes (but at any longitude), or all the restaurants in a range of longitudes (but anywhere between the North and South poles), but not both simultaneously.",
														"One option is to translate a two-dimensional location into a single number using a space-filling curve, and then to use a regular B-tree index \\[[34]()\\]. More commonly, specialized spatial indexes such as R-trees are used. For example, PostGIS implements geospatial indexes as R-trees using PostgreSQL’s Generalized Search Tree indexing facility \\[[35]()\\]. We don’t have space to describe R-trees in detail here, but there is plenty of literature on them.",
														"An interesting idea is that multi-dimensional indexes are not just for geographic locations. For example, on an ecommerce website you could use a three-dimensional index on the dimensions (*red*, *green*, *blue*) to search for products in a certain range of colors, or in a database of weather observations you could have a two-dimensional index on (*date*, *temperature*) in order to efficiently search for all the observations during the year 2013 where the temperature was between 25 and 30℃. With a one-dimensional index, you would have to either scan over all the records from 2013 (regardless of temperature) and then filter them by temperature, or vice versa. A 2D index could narrow down by timestamp and temperature simultaneously. This technique is used by HyperDex \\[[36]()\\].",
													],
													summary: [
														"Unlock efficient multi-attribute queries with multi-dimensional indexes, perfect for geospatial and complex data.",
													],
													longSummary: [
														"Single-key indexes fall short for querying multiple columns at once, while concatenated indexes combine fields into a single key but fail for queries on just the second field. Multi-dimensional indexes provide a more versatile solution, crucial for geospatial data like restaurant searches within map coordinates. Standard B-trees or LSM-trees struggle with two-dimensional range queries, but alternatives like space-filling curves with B-tree indexes or specialized spatial indexes like R-trees (used by PostGIS) excel. These indexes aren't limited to geography; they also apply to product color searches or weather observations, enabling simultaneous filtering on multiple attributes, as seen in systems like HyperDex.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280168/blog-cover-images/zl92fohqkeyalbfw8ckz.webp",
												},
												{
													heading: [
														"### **Full-text search and fuzzy indexes**",
													],
													children: [
														"All the indexes discussed so far assume that you have exact data and allow you to query for exact values of a key, or a range of values of a key with a sort order. What they don’t allow you to do is search for *similar* keys, such as misspelled words. Such *fuzzy* querying requires different techniques.",
														"For example, full-text search engines commonly allow a search for one word to be expanded to include synonyms of the word, to ignore grammatical variations of words, and to search for occurrences of words near each other in the same document, and support various other features that depend on linguistic analysis of the text. To cope with typos in documents or queries, Lucene is able to search text for words within a certain edit distance (an edit distance of 1 means that one letter has been added, removed, or replaced) \\[[37]()\\].",
														"As mentioned in [“Making an LSM-tree out of SSTables”](blob:https://johnfactotum.github.io/faa0281e-3579-4962-b436-619702d86151#sec_storage_lsm_usage), Lucene uses a SSTable-like structure for its term dictionary. This structure requires a small in-memory index that tells queries at which offset in the sorted file they need to look for a key. In LevelDB, this in-memory index is a sparse collection of some of the keys, but in Lucene, the in-memory index is a finite state automaton over the characters in the keys, similar to a *trie* \\[[38]()\\]. This automaton can be transformed into a *Levenshtein automaton*, which supports efficient search for words within a given edit distance \\[[39]()\\].",
														"Other fuzzy search techniques go in the direction of document classification and machine learning. See an information retrieval textbook for more detail \\[e.g., [40]()\\].",
													],
													summary: [
														"Lucene enables efficient fuzzy search with synonyms, typos, and proximity using advanced indexing.",
													],
													longSummary: [
														"Indexes typically support querying for exact values or ranges with sort order but lack capabilities for similar keys or fuzzy querying. Full-text search engines like Lucene offer fuzzy features such as synonyms, grammatical variations, proximity searches, and typo handling within a specific edit distance. Lucene employs an SSTable-like structure with an in-memory index functioning as a finite state automaton over key characters, akin to a trie, which can be converted into a Levenshtein automaton for efficient fuzzy search. Additional fuzzy search methods include document classification and machine learning, as explored in information retrieval textbooks.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280170/blog-cover-images/d5rfhl8jxz09a8tkmc1n.webp",
												},
												{
													heading: [
														"### **Keeping everything in memory**",
													],
													children: [
														"The data structures discussed so far in this chapter have all been answers to the limitations of disks. Compared to main memory, disks are awkward to deal with. With both magnetic disks and SSDs, data on disk needs to be laid out carefully if you want good performance on reads and writes. However, we tolerate this awkwardness because disks have two significant advantages: they are durable (their contents are not lost if the power is turned off), and they have a lower cost per gigabyte than RAM.",
														"As RAM becomes cheaper, the cost-per-gigabyte argument is eroded. Many datasets are simply not that big, so it’s quite feasible to keep them entirely in memory, potentially distributed across several machines. This has led to the development of *in-memory databases*.",
														"Some in-memory key-value stores, such as Memcached, are intended for caching use only, where it’s acceptable for data to be lost if a machine is restarted. But other in-memory databases aim for durability, which can be achieved with special hardware (such as battery-powered RAM), by writing a log of changes to disk, by writing periodic snapshots to disk, or by replicating the in-memory state to other machines.",
														"When an in-memory database is restarted, it needs to reload its state, either from disk or over the network from a replica (unless special hardware is used). Despite writing to disk, it’s still an in-memory database, because the disk is merely used as an append-only log for durability, and reads are served entirely from memory. Writing to disk also has operational advantages: files on disk can easily be backed up, inspected, and analyzed by external utilities.",
														"Products such as VoltDB, MemSQL, and Oracle TimesTen are in-memory databases with a relational model, and the vendors claim that they can offer big performance improvements by removing all the overheads associated with managing on-disk data structures \\[[41](), [42]()\\]. RAMCloud is an open source, in-memory key-value store with durability (using a log-structured approach for the data in memory as well as the data on disk) \\[[43]()\\]. Redis and Couchbase provide weak durability by writing to disk asynchronously.",
														"Counterintuitively, the performance advantage of in-memory databases is not due to the fact that they don’t need to read from disk. Even a disk-based storage engine may never need to read from disk if you have enough memory, because the operating system caches recently used disk blocks in memory anyway. Rather, they can be faster because they can avoid the overheads of encoding in-memory data structures in a form that can be written to disk \\[[44]()\\].",
														"Besides performance, another interesting area for in-memory databases is providing data models that are difficult to implement with disk-based indexes. For example, Redis offers a database-like interface to various data structures such as priority queues and sets. Because it keeps all data in memory, its implementation is comparatively simple.",
														"Recent research indicates that an in-memory database architecture could be extended to support datasets larger than the available memory, without bringing back the overheads of a disk-centric architecture \\[[45]()\\]. The so-called *anti-caching* approach works by evicting the least recently used data from memory to disk when there is not enough memory, and loading it back into memory when it is accessed again in the future. This is similar to what operating systems do with virtual memory and swap files, but the database can manage memory more efficiently than the OS, as it can work at the granularity of individual records rather than entire memory pages. This approach still requires indexes to fit entirely in memory, though (like the Bitcask example at the beginning of the chapter).",
														"Further changes to storage engine design will probably be needed if *non-volatile memory* (NVM) technologies become more widely adopted \\[[46]()\\]. At present, this is a new area of research, but it is worth keeping an eye on in the future.",
													],
													summary: [
														"In-memory databases outperform by reducing encoding overheads, enabling advanced data models and durability.",
													],
													longSummary: [
														'This chapter explores data structures that address the limitations of disk storage compared to main memory. Disks are used for their durability and cost-effectiveness, despite their awkwardness. As RAM becomes cheaper, in-memory databases have emerged, offering performance improvements by eliminating disk data structure overheads. Products like VoltDB, MemSQL, and Oracle TimesTen benefit not from avoiding disk reads but from reducing encoding overheads. In-memory databases can implement complex data models, such as Redis\'s priority queues and sets. Recent research suggests that in-memory architectures could handle datasets larger than available memory using "anti-caching," and future designs may evolve with non-volatile memory technologies.',
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280172/blog-cover-images/g49uzzcd3dp238xmd2uy.webp",
												},
											],
										],
										summary: [
											"Unlock database efficiency: Explore key-value, secondary, and multi-dimensional indexes for optimized queries.",
										],
										longSummary: [
											"Key-value indexes uniquely identify data, similar to primary keys, while secondary indexes enhance operations like joins. In relational databases, CREATE INDEX allows multiple secondary indexes, managing non-unique keys by listing matching row identifiers. B-trees and log-structured indexes can be secondary indexes. Clustered indexes store rows directly, improving read speed but increasing storage and write overhead. Concatenated indexes combine fields for multi-column queries, and multi-dimensional indexes handle complex queries like geospatial data. Full-text search engines like Lucene support fuzzy querying. In-memory databases like VoltDB and MemSQL boost performance by eliminating disk overheads. Future storage engines may evolve with non-volatile memory technologies.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280139/blog-cover-images/lskdeonkzxuqwnu083fi.webp",
									},
								],
							],
							summary: [
								"Explore the evolution of databases: from simple Bash functions to advanced indexing techniques.",
							],
							longSummary: [
								"The simplest database uses two Bash functions, db_set and db_get, as a key-value store in a text file. db_set appends efficiently, but db_get is slow with large datasets due to O(n) lookup time. Indexes improve read speed but slow writes. Key-value stores can use in-memory hash maps or Log-Structured Merge-Trees (LSM-Trees), which offer high write throughput and efficient range queries. B-trees, common in relational databases, provide faster reads and transactional integrity. In-memory databases like VoltDB and Redis boost performance by removing disk overheads, with future designs potentially using non-volatile memory technologies.",
							],
							imageUrl:
								"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280128/blog-cover-images/ofdh5iqsezas8ydfq3fu.webp",
						},
						{
							heading: [
								"# **Transaction Processing or Analytics?**",
							],
							children: [
								"In the early days of business data processing, a write to the database typically corresponded to a *commercial transaction* taking place: making a sale, placing an order with a supplier, paying an employee’s salary, etc. As databases expanded into areas that didn’t involve money changing hands, the term *transaction* nevertheless stuck, referring to a group of reads and writes that form a logical unit.",
								"###### **Note**",
								"A transaction needn’t necessarily have ACID (atomicity, consistency, isolation, and durability) properties. *Transaction processing* just means allowing clients to make low-latency reads and writes—as opposed to *batch processing* jobs, which only run periodically (for example, once per day). We discuss the ACID properties in [Chapter 7]() and batch processing in [Chapter 10]().",
								"Even though databases started being used for many different kinds of data—comments on blog posts, actions in a game, contacts in an address book, etc.—the basic access pattern remained similar to processing business transactions. An application typically looks up a small number of records by some key, using an index. Records are inserted or updated based on the user’s input. Because these applications are interactive, the access pattern became known as *online transaction processing* (OLTP).",
								"However, databases also started being increasingly used for *data analytics*, which has very different access patterns. Usually an analytic query needs to scan over a huge number of records, only reading a few columns per record, and calculates aggregate statistics (such as count, sum, or average) rather than returning the raw data to the user. For example, if your data is a table of sales transactions, then analytic queries might be:",
								"* What was the total revenue of each of our stores in January?",
								"* How many more bananas than usual did we sell during our latest promotion?",
								"* Which brand of baby food is most often purchased together with brand X diapers?",
								"These queries are often written by business analysts, and feed into reports that help the management of a company make better decisions (*business intelligence*). In order to differentiate this pattern of using databases from transaction processing, it has been called *online analytic processing* (OLAP) \\[[47]()\\].[iv]() The difference between OLTP and OLAP is not always clear-cut, but some typical characteristics are listed in [Table 3-1](blob:https://johnfactotum.github.io/faa0281e-3579-4962-b436-619702d86151#tab_oltp_vs_olap).",
								"*Table 3-1.*",
								"*Comparing characteristics of transaction processing versus analytic systems*",
								"||||\n|---|---|---|\n|**Property**|**Transaction processing systems (OLTP)**|**Analytic systems (OLAP)**|\n|Main read pattern|Small number of records per query, fetched by key|Aggregate over large number of records|\n|Main write pattern|Random-access, low-latency writes from user input|Bulk import (ETL) or event stream|\n|Primarily used by|End user/customer, via web application|Internal analyst, for decision support|\n|What data represents|Latest state of data (current point in time)|History of events that happened over time|\n|Dataset size|Gigabytes to terabytes|Terabytes to petabytes|",
								"At first, the same databases were used for both transaction processing and analytic queries. SQL turned out to be quite flexible in this regard: it works well for OLTP-type queries as well as OLAP-type queries. Nevertheless, in the late 1980s and early 1990s, there was a trend for companies to stop using their OLTP systems for analytics purposes, and to run the analytics on a separate database instead. This separate database was called a *data warehouse*.",
								[
									{
										heading: ["## **Data Warehousing**"],
										children: [
											"An enterprise may have dozens of different transaction processing systems: systems powering the customer-facing website, controlling point of sale (checkout) systems in physical stores, tracking inventory in warehouses, planning routes for vehicles, managing suppliers, administering employees, etc. Each of these systems is complex and needs a team of people to maintain it, so the systems end up operating mostly autonomously from each other.",
											"These OLTP systems are usually expected to be highly available and to process transactions with low latency, since they are often critical to the operation of the business. Database administrators therefore closely guard their OLTP databases. They are usually reluctant to let business analysts run ad hoc analytic queries on an OLTP database, since those queries are often expensive, scanning large parts of the dataset, which can harm the performance of concurrently executing transactions.",
											"A *data warehouse*, by contrast, is a separate database that analysts can query to their hearts’ content, without affecting OLTP operations \\[[48]()\\]. The data warehouse contains a read-only copy of the data in all the various OLTP systems in the company. Data is extracted from OLTP databases (using either a periodic data dump or a continuous stream of updates), transformed into an analysis-friendly schema, cleaned up, and then loaded into the data warehouse. This process of getting data into the warehouse is known as *Extract–Transform–Load* (ETL) and is illustrated in [Figure 3-8](blob:https://johnfactotum.github.io/faa0281e-3579-4962-b436-619702d86151#fig_dwh_etl).",
											"![ddia 0308](blob:https://johnfactotum.github.io/782e88d1-0118-48ac-a8c3-9fbf0382116c)",
											"###### *Figure 3-8. Simplified outline of ETL into a data warehouse.*",
											"Data warehouses now exist in almost all large enterprises, but in small companies they are almost unheard of. This is probably because most small companies don’t have so many different OLTP systems, and most small companies have a small amount of data—small enough that it can be queried in a conventional SQL database, or even analyzed in a spreadsheet. In a large company, a lot of heavy lifting is required to do something that is simple in a small company.",
											"A big advantage of using a separate data warehouse, rather than querying OLTP systems directly for analytics, is that the data warehouse can be optimized for analytic access patterns. It turns out that the indexing algorithms discussed in the first half of this chapter work well for OLTP, but are not very good at answering analytic queries. In the rest of this chapter we will look at storage engines that are optimized for analytics instead.",
											[
												{
													heading: [
														"### **The divergence between OLTP databases and data warehouses**",
													],
													children: [
														"The data model of a data warehouse is most commonly relational, because SQL is generally a good fit for analytic queries. There are many graphical data analysis tools that generate SQL queries, visualize the results, and allow analysts to explore the data (through operations such as *drill-down* and *slicing and dicing*).",
														"On the surface, a data warehouse and a relational OLTP database look similar, because they both have a SQL query interface. However, the internals of the systems can look quite different, because they are optimized for very different query patterns. Many database vendors now focus on supporting either transaction processing or analytics workloads, but not both.",
														"Some databases, such as Microsoft SQL Server and SAP HANA, have support for transaction processing and data warehousing in the same product. However, they are increasingly becoming two separate storage and query engines, which happen to be accessible through a common SQL interface \\[[49](), [50](), [51]()\\].",
														"Data warehouse vendors such as Teradata, Vertica, SAP HANA, and ParAccel typically sell their systems under expensive commercial licenses. Amazon RedShift is a hosted version of ParAccel. More recently, a plethora of open source SQL-on-Hadoop projects have emerged; they are young but aiming to compete with commercial data warehouse systems. These include Apache Hive, Spark SQL, Cloudera Impala, Facebook Presto, Apache Tajo, and Apache Drill \\[[52](), [53]()\\]. Some of them are based on ideas from Google’s Dremel \\[[54]()\\].",
													],
													summary: [
														"Explore the evolving landscape of SQL databases: commercial giants vs. open-source challengers.",
													],
													longSummary: [
														"Data warehouses typically use a relational data model because SQL is well-suited for analytic queries. Although data warehouses and OLTP databases both use SQL, they are optimized for different query patterns, leading vendors to specialize in either transaction processing or analytics. Some databases, like Microsoft SQL Server and SAP HANA, support both functions but often through separate engines with a unified SQL interface. Vendors like Teradata, Vertica, and ParAccel offer costly commercial licenses, while Amazon RedShift provides a hosted ParAccel version. Open source SQL-on-Hadoop projects, such as Apache Hive, Spark SQL, and Cloudera Impala, have emerged to challenge commercial systems.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280179/blog-cover-images/l5adxlv0qyiggs1x6e9f.webp",
												},
											],
										],
										summary: [
											"Unlock enterprise insights with optimized data warehouses, transforming OLTP data for seamless analytics.",
										],
										longSummary: [
											"Large enterprises use separate data warehouses for analytics because their OLTP systems need high availability and low latency, making direct queries impractical. Data warehouses store read-only data copies optimized for analytics via ETL processes, allowing efficient analysis. OLTP indexing isn't suited for analytics, so this separation is crucial. Large companies often use commercial solutions like Teradata and Amazon RedShift, while open-source options like Apache Hive and Spark SQL are popular. In contrast, small companies typically use SQL databases or spreadsheets due to fewer OLTP systems and smaller data volumes.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280150/blog-cover-images/jsfndjzhrkomuwx7ucr8.webp",
									},
									{
										heading: [
											"## **Stars and Snowflakes: Schemas for Analytics**",
										],
										children: [
											"As explored in [Chapter 2](), a wide range of different data models are used in the realm of transaction processing, depending on the needs of the application. On the other hand, in analytics, there is much less diversity of data models. Many data warehouses are used in a fairly formulaic style, known as a *star schema* (also known as *dimensional modeling* \\[[55]()\\]).",
											"The example schema in [Figure 3-9](blob:https://johnfactotum.github.io/faa0281e-3579-4962-b436-619702d86151#fig_dwh_schema) shows a data warehouse that might be found at a grocery retailer. At the center of the schema is a so-called *fact table* (in this example, it is called `fact_sales`). Each row of the fact table represents an event that occurred at a particular time (here, each row represents a customer’s purchase of a product). If we were analyzing website traffic rather than retail sales, each row might represent a page view or a click by a user.",
											"![ddia 0309](blob:https://johnfactotum.github.io/109eb6d3-f132-49f2-8c61-c58e879acaa6)",
											"###### *Figure 3-9. Example of a star schema for use in a data warehouse.*",
											"Usually, facts are captured as individual events, because this allows maximum flexibility of analysis later. However, this means that the fact table can become extremely large. A big enterprise like Apple, Walmart, or eBay may have tens of petabytes of transaction history in its data warehouse, most of which is in fact tables \\[[56]()\\].",
											"Some of the columns in the fact table are attributes, such as the price at which the product was sold and the cost of buying it from the supplier (allowing the profit margin to be calculated). Other columns in the fact table are foreign key references to other tables, called *dimension tables*. As each row in the fact table represents an event, the dimensions represent the *who*, *what*, *where*, *when*, *how*, and *why* of the event.",
											"For example, in [Figure 3-9](blob:https://johnfactotum.github.io/faa0281e-3579-4962-b436-619702d86151#fig_dwh_schema), one of the dimensions is the product that was sold. Each row in the `dim_product` table represents one type of product that is for sale, including its stock-keeping unit (SKU), description, brand name, category, fat content, package size, etc. Each row in the `fact_sales` table uses a foreign key to indicate which product was sold in that particular transaction. (For simplicity, if the customer buys several different products at once, they are represented as separate rows in the fact table.)",
											"Even date and time are often represented using dimension tables, because this allows additional information about dates (such as public holidays) to be encoded, allowing queries to differentiate between sales on holidays and non-holidays.",
											"The name “star schema” comes from the fact that when the table relationships are visualized, the fact table is in the middle, surrounded by its dimension tables; the connections to these tables are like the rays of a star.",
											"A variation of this template is known as the *snowflake schema*, where dimensions are further broken down into subdimensions. For example, there could be separate tables for brands and product categories, and each row in the `dim_product` table could reference the brand and category as foreign keys, rather than storing them as strings in the `dim_product` table. Snowflake schemas are more normalized than star schemas, but star schemas are often preferred because they are simpler for analysts to work with \\[[55]()\\].",
											"In a typical data warehouse, tables are often very wide: fact tables often have over 100 columns, sometimes several hundred \\[[51]()\\]. Dimension tables can also be very wide, as they include all the metadata that may be relevant for analysis—for example, the `dim_store` table may include details of which services are offered at each store, whether it has an in-store bakery, the square footage, the date when the store was first opened, when it was last remodeled, how far it is from the nearest highway, etc.",
										],
										summary: [
											"Discover the star schema: a powerful, scalable data model for massive analytics.",
										],
										longSummary: [
											"In analytics, the star schema is a favored data model in data warehouses due to its simplicity. It features a central fact table, often exceeding 100 columns, representing events like sales transactions and can grow to tens of petabytes in large enterprises. This table includes attributes such as price and links to dimension tables, which provide detailed metadata on products, stores, dates, and customers. Unlike the more complex snowflake schema, the star schema's straightforward design makes it ideal for analysis.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280149/blog-cover-images/a4cktrgscbjxrjqlwkef.webp",
									},
								],
							],
							summary: [
								"From business transactions to analytics: Discover the evolution of databases and data warehouses.",
							],
							longSummary: [
								"Initially, 'transaction' meant commercial exchanges, but now it refers to any logical unit of reads and writes. Databases evolved to handle both OLTP and OLAP. OLTP systems manage small, key-based queries with low-latency writes, while OLAP systems aggregate large datasets for historical analysis. By the 1990s, separate data warehouses emerged for analytics, optimized for analytic access patterns. These warehouses use ETL processes to transform OLTP data into analysis-friendly schemas, often employing a star schema model. While some databases support both OLTP and OLAP, vendors increasingly specialize, with options like Apache Hive and Amazon RedShift.",
							],
							imageUrl:
								"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280130/blog-cover-images/oy0gis3zudhh6pyswykk.webp",
						},
						{
							heading: ["# **Column-Oriented Storage**"],
							children: [
								"If you have trillions of rows and petabytes of data in your fact tables, storing and querying them efficiently becomes a challenging problem. Dimension tables are usually much smaller (millions of rows), so in this section we will concentrate primarily on storage of facts.",
								'Although fact tables are often over 100 columns wide, a typical data warehouse query only accesses 4 or 5 of them at one time (`"SELECT *"` queries are rarely needed for analytics) \\[[51]()\\]. Take the query in [Example 3-1](blob:https://johnfactotum.github.io/faa0281e-3579-4962-b436-619702d86151#fig_storage_analytics_query): it accesses a large number of rows (every occurrence of someone buying fruit or candy during the 2013 calendar year), but it only needs to access three columns of the `fact_sales` table: `date_key`, `product_sk`, and `quantity`. The query ignores all other columns.',
								"##### *Example 3-1. Analyzing whether people are more inclined to buy fresh fruit or candy, depending on the day of the week*",
								"```\nSELECT\n  dim_date.weekday, dim_product.category,\n  SUM(fact_sales.quantity) AS quantity_sold\nFROM fact_sales\n  JOIN dim_date    ON fact_sales.date_key   = dim_date.date_key\n  JOIN dim_product ON fact_sales.product_sk = dim_product.product_sk\nWHERE\n  dim_date.year = 2013 AND\n  dim_product.category IN ('Fresh fruit', 'Candy')\nGROUP BY\n  dim_date.weekday, dim_product.category;\n```",
								"How can we execute this query efficiently?",
								"In most OLTP databases, storage is laid out in a *row-oriented* fashion: all the values from one row of a table are stored next to each other. Document databases are similar: an entire document is typically stored as one contiguous sequence of bytes. You can see this in the CSV example of [Figure 3-1](blob:https://johnfactotum.github.io/faa0281e-3579-4962-b436-619702d86151#fig_storage_csv_hash_index).",
								"In order to process a query like [Example 3-1](blob:https://johnfactotum.github.io/faa0281e-3579-4962-b436-619702d86151#fig_storage_analytics_query), you may have indexes on `fact_sales.date_key` and/or `fact_sales.product_sk` that tell the storage engine where to find all the sales for a particular date or for a particular product. But then, a row-oriented storage engine still needs to load all of those rows (each consisting of over 100 attributes) from disk into memory, parse them, and filter out those that don’t meet the required conditions. That can take a long time.",
								"The idea behind *column-oriented storage* is simple: don’t store all the values from one row together, but store all the values from each *column* together instead. If each column is stored in a separate file, a query only needs to read and parse those columns that are used in that query, which can save a lot of work. This principle is illustrated in [Figure 3-10](blob:https://johnfactotum.github.io/faa0281e-3579-4962-b436-619702d86151#fig_column_store).",
								"###### **Note**",
								"Column storage is easiest to understand in a relational data model, but it applies equally to nonrelational data. For example, Parquet \\[[57]()\\] is a columnar storage format that supports a document data model, based on Google’s Dremel \\[[54]()\\].",
								"![ddia 0310](blob:https://johnfactotum.github.io/d1d1c8d1-0d87-47d6-be01-d76421170d6a)",
								"###### *Figure 3-10. Storing relational data by column, rather than by row.*",
								"The column-oriented storage layout relies on each column file containing the rows in the same order. Thus, if you need to reassemble an entire row, you can take the 23rd entry from each of the individual column files and put them together to form the 23rd row of the table.",
								[
									{
										heading: ["## **Column Compression**"],
										children: [
											"Besides only loading those columns from disk that are required for a query, we can further reduce the demands on disk throughput by compressing data. Fortunately, column-oriented storage often lends itself very well to compression.",
											"Take a look at the sequences of values for each column in [Figure 3-10](blob:https://johnfactotum.github.io/faa0281e-3579-4962-b436-619702d86151#fig_column_store): they often look quite repetitive, which is a good sign for compression. Depending on the data in the column, different compression techniques can be used. One technique that is particularly effective in data warehouses is *bitmap encoding*, illustrated in [Figure 3-11](blob:https://johnfactotum.github.io/faa0281e-3579-4962-b436-619702d86151#fig_bitmap_index).",
											"![ddia 0311](blob:https://johnfactotum.github.io/a88b18e0-1a25-4367-b1a8-86da4d7794b6)",
											"###### *Figure 3-11. Compressed, bitmap-indexed storage of a single column.*",
											"Often, the number of distinct values in a column is small compared to the number of rows (for example, a retailer may have billions of sales transactions, but only 100,000 distinct products). We can now take a column with *n* distinct values and turn it into *n* separate bitmaps: one bitmap for each distinct value, with one bit for each row. The bit is 1 if the row has that value, and 0 if not.",
											"If *n* is very small (for example, a *country* column may have approximately 200 distinct values), those bitmaps can be stored with one bit per row. But if *n* is bigger, there will be a lot of zeros in most of the bitmaps (we say that they are *sparse*). In that case, the bitmaps can additionally be run-length encoded, as shown at the bottom of [Figure 3-11](blob:https://johnfactotum.github.io/faa0281e-3579-4962-b436-619702d86151#fig_bitmap_index). This can make the encoding of a column remarkably compact.",
											"Bitmap indexes such as these are very well suited for the kinds of queries that are common in a data warehouse. For example:",
											"`WHERE product_sk IN (30, 68, 69):`",
											"Load the three bitmaps for `product_sk = 30`, `product_sk = 68`, and `product_sk = 69`, and calculate the bitwise *OR* of the three bitmaps, which can be done very efficiently.",
											"`WHERE product_sk = 31 AND store_sk = 3:`",
											"Load the bitmaps for `product_sk = 31` and `store_sk = 3`, and calculate the bitwise *AND*. This works because the columns contain the rows in the same order, so the *k*th bit in one column’s bitmap corresponds to the same row as the *k*th bit in another column’s bitmap.",
											"There are also various other compression schemes for different kinds of data, but we won’t go into them in detail—see \\[[58]()\\] for an overview.",
										],
										summary: [
											"Column-oriented storage optimizes data retrieval with efficient compression and bitmap indexing techniques.",
										],
										longSummary: [
											"Column-oriented storage optimizes disk throughput by loading only necessary columns and using effective compression techniques like bitmap encoding, which is particularly beneficial in data warehouses. Bitmap encoding transforms a column with n distinct values into n bitmaps, each indicating the presence of a value per row. For columns with numerous distinct values, run-length encoding efficiently compresses sparse bitmaps. Bitmap indexes enhance data warehouse queries through efficient bitwise operations, such as OR for finding rows with multiple values and AND for combining conditions across columns, leveraging consistent row ordering across bitmaps.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280140/blog-cover-images/uzew173u7mlsvlpk0a6e.webp",
									},
									{
										heading: [
											"# **Column-oriented storage and column families**",
										],
										children: [
											"Cassandra and HBase have a concept of *column families*, which they inherited from Bigtable \\[[9]()\\]. However, it is very misleading to call them column-oriented: within each column family, they store all columns from a row together, along with a row key, and they do not use column compression. Thus, the Bigtable model is still mostly row-oriented.",
											[
												{
													heading: [
														"### **Memory bandwidth and vectorized processing**",
													],
													children: [
														"For data warehouse queries that need to scan over millions of rows, a big bottleneck is the bandwidth for getting data from disk into memory. However, that is not the only bottleneck. Developers of analytical databases also worry about efficiently using the bandwidth from main memory into the CPU cache, avoiding branch mispredictions and bubbles in the CPU instruction processing pipeline, and making use of single-instruction-multi-data (SIMD) instructions in modern CPUs \\[[59](), [60]()\\].",
														"Besides reducing the volume of data that needs to be loaded from disk, column-oriented storage layouts are also good for making efficient use of CPU cycles. For example, the query engine can take a chunk of compressed column data that fits comfortably in the CPU’s L1 cache and iterate through it in a tight loop (that is, with no function calls). A CPU can execute such a loop much faster than code that requires a lot of function calls and conditions for each record that is processed. Column compression allows more rows from a column to fit in the same amount of L1 cache. Operators, such as the bitwise *AND* and *OR* described previously, can be designed to operate on such chunks of compressed column data directly. This technique is known as *vectorized processing* \\[[58](), [49]()\\].",
													],
													summary: [
														"Efficient data queries rely on column storage, compression, and vectorized processing for speed.",
													],
													longSummary: [
														"For data warehouse queries scanning millions of rows, the main bottleneck is disk-to-memory bandwidth. Developers optimize memory-to-CPU cache bandwidth, minimize branch mispredictions and pipeline bubbles, and use SIMD instructions. Column-oriented storage reduces disk data volume and boosts CPU efficiency. The query engine processes compressed column data chunks in the CPU's L1 cache in a tight loop, avoiding function calls and conditions for faster execution. Column compression allows more rows in the L1 cache, enabling direct operations on compressed data through vectorized processing.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280171/blog-cover-images/kbk5c31aq0ufbeudabna.webp",
												},
											],
										],
										summary: [
											"Cassandra and HBase are row-oriented, unlike column-oriented databases that optimize CPU and memory efficiency.",
										],
										longSummary: [
											"Cassandra and HBase, inspired by Bigtable, use 'column families' but are primarily row-oriented, storing all columns of a row with a row key and lacking column compression. This design is less efficient for data warehouse queries that scan millions of rows, where disk-to-memory bandwidth is a bottleneck. Analytical databases optimize performance by enhancing memory-to-CPU cache bandwidth, minimizing branch mispredictions, and using SIMD instructions. Column-oriented storage reduces disk data volume and optimizes CPU usage by processing compressed column data in the CPU's L1 cache efficiently, using vectorized processing for operations like bitwise AND and OR.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280148/blog-cover-images/qdlskwnhjcovuv6dzp9z.webp",
									},
									{
										heading: [
											"## **Sort Order in Column Storage**",
										],
										children: [
											"In a column store, it doesn’t necessarily matter in which order the rows are stored. It’s easiest to store them in the order in which they were inserted, since then inserting a new row just means appending to each of the column files. However, we can choose to impose an order, like we did with SSTables previously, and use that as an indexing mechanism.",
											"Note that it wouldn’t make sense to sort each column independently, because then we would no longer know which items in the columns belong to the same row. We can only reconstruct a row because we know that the *k*th item in one column belongs to the same row as the *k*th item in another column.",
											"Rather, the data needs to be sorted an entire row at a time, even though it is stored by column. The administrator of the database can choose the columns by which the table should be sorted, using their knowledge of common queries. For example, if queries often target date ranges, such as the last month, it might make sense to make `date_key` the first sort key. Then the query optimizer can scan only the rows from the last month, which will be much faster than scanning all rows.",
											"A second column can determine the sort order of any rows that have the same value in the first column. For example, if `date_key` is the first sort key in [Figure 3-10](blob:https://johnfactotum.github.io/faa0281e-3579-4962-b436-619702d86151#fig_column_store), it might make sense for `product_sk` to be the second sort key so that all sales for the same product on the same day are grouped together in storage. That will help queries that need to group or filter sales by product within a certain date range.",
											"Another advantage of sorted order is that it can help with compression of columns. If the primary sort column does not have many distinct values, then after sorting, it will have long sequences where the same value is repeated many times in a row. A simple run-length encoding, like we used for the bitmaps in [Figure 3-11](blob:https://johnfactotum.github.io/faa0281e-3579-4962-b436-619702d86151#fig_bitmap_index), could compress that column down to a few kilobytes—even if the table has billions of rows.",
											"That compression effect is strongest on the first sort key. The second and third sort keys will be more jumbled up, and thus not have such long runs of repeated values. Columns further down the sorting priority appear in essentially random order, so they probably won’t compress as well. But having the first few columns sorted is still a win overall.",
											[
												{
													heading: [
														"### **Several different sort orders**",
													],
													children: [
														"A clever extension of this idea was introduced in C-Store and adopted in the commercial data warehouse Vertica \\[[61](), [62]()\\]. Different queries benefit from different sort orders, so why not store the same data sorted in *several different* ways? Data needs to be replicated to multiple machines anyway, so that you don’t lose data if one machine fails. You might as well store that redundant data sorted in different ways so that when you’re processing a query, you can use the version that best fits the query pattern.",
														"Having multiple sort orders in a column-oriented store is a bit similar to having multiple secondary indexes in a row-oriented store. But the big difference is that the row-oriented store keeps every row in one place (in the heap file or a clustered index), and secondary indexes just contain pointers to the matching rows. In a column store, there normally aren’t any pointers to data elsewhere, only columns containing values.",
													],
													summary: [
														"C-Store's innovative data sorting enhances query efficiency, unlike traditional row-oriented databases.",
													],
													longSummary: [
														"C-Store and Vertica cleverly enhance data storage by sorting redundant data in multiple ways, optimizing for various query patterns. This method, used in column-oriented stores, contrasts with row-oriented stores that rely on secondary indexes with pointers to rows. In column stores, data is stored as columns of values without external pointers, allowing for efficient data retrieval and redundancy management.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280175/blog-cover-images/koxbo0aanichnyclkxkw.webp",
												},
											],
										],
										summary: [
											"Optimize column stores with strategic sorting for faster queries and efficient compression.",
										],
										longSummary: [
											"In column stores, sorting rows enhances indexing and compression, especially for the primary sort column, which benefits from run-length encoding. Administrators select sort columns based on frequent queries, like date_key for date range scans. Sorting the first few columns is advantageous, even if compression is less effective for lower-priority columns. C-Store and Vertica use a strategy of storing data sorted in multiple ways across machines for redundancy and optimized queries. This differs from row-oriented stores, where rows stay in one place with secondary indexes.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280149/blog-cover-images/awgevkjycertwd0mdf8v.webp",
									},
									{
										heading: [
											"## **Writing to Column-Oriented Storage**",
										],
										children: [
											"These optimizations make sense in data warehouses, because most of the load consists of large read-only queries run by analysts. Column-oriented storage, compression, and sorting all help to make those read queries faster. However, they have the downside of making writes more difficult.",
											"An update-in-place approach, like B-trees use, is not possible with compressed columns. If you wanted to insert a row in the middle of a sorted table, you would most likely have to rewrite all the column files. As rows are identified by their position within a column, the insertion has to update all columns consistently.",
											"Fortunately, we have already seen a good solution earlier in this chapter: LSM-trees. All writes first go to an in-memory store, where they are added to a sorted structure and prepared for writing to disk. It doesn’t matter whether the in-memory store is row-oriented or column-oriented. When enough writes have accumulated, they are merged with the column files on disk and written to new files in bulk. This is essentially what Vertica does \\[[62]()\\].",
											"Queries need to examine both the column data on disk and the recent writes in memory, and combine the two. However, the query optimizer hides this distinction from the user. From an analyst’s point of view, data that has been modified with inserts, updates, or deletes is immediately reflected in subsequent queries.",
										],
										summary: [
											"LSM-trees optimize writes in column stores, merging in-memory data with disk efficiently.",
										],
										longSummary: [
											"Column-oriented storage optimizations are ideal for large read-only queries in data warehouses but complicate writes. Unlike B-trees, which allow update-in-place, compressed columns require rewriting all column files for each insertion. LSM-trees address this by directing all writes to an in-memory store initially, then merging them with disk column files in bulk. This approach necessitates querying both disk data and recent in-memory writes, but the query optimizer seamlessly integrates these, ensuring that modified data is immediately reflected in subsequent queries.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280151/blog-cover-images/awbcyeskqsaieprocbpm.webp",
									},
									{
										heading: [
											"## **Aggregation: Data Cubes and Materialized Views**",
										],
										children: [
											"Not every data warehouse is necessarily a column store: traditional row-oriented databases and a few other architectures are also used. However, columnar storage can be significantly faster for ad hoc analytical queries, so it is rapidly gaining popularity \\[[51](), [63]()\\].",
											"Another aspect of data warehouses that is worth mentioning briefly is *materialized aggregates*. As discussed earlier, data warehouse queries often involve an aggregate function, such as `COUNT`, `SUM`, `AVG`, `MIN`, or `MAX` in SQL. If the same aggregates are used by many different queries, it can be wasteful to crunch through the raw data every time. Why not cache some of the counts or sums that queries use most often?",
											"One way of creating such a cache is a *materialized view*. In a relational data model, it is often defined like a standard (virtual) view: a table-like object whose contents are the results of some query. The difference is that a materialized view is an actual copy of the query results, written to disk, whereas a virtual view is just a shortcut for writing queries. When you read from a virtual view, the SQL engine expands it into the view’s underlying query on the fly and then processes the expanded query.",
											"When the underlying data changes, a materialized view needs to be updated, because it is a denormalized copy of the data. The database can do that automatically, but such updates make writes more expensive, which is why materialized views are not often used in OLTP databases. In read-heavy data warehouses they can make more sense (whether or not they actually improve read performance depends on the individual case).",
											"A common special case of a materialized view is known as a *data cube* or *OLAP cube* \\[[64]()\\]. It is a grid of aggregates grouped by different dimensions. [Figure 3-12](blob:https://johnfactotum.github.io/faa0281e-3579-4962-b436-619702d86151#fig_data_cube) shows an example.",
											"![ddia 0312](blob:https://johnfactotum.github.io/195da3b8-5cce-4e2d-8603-431361c793af)",
											"###### *Figure 3-12. Two dimensions of a data cube, aggregating data by summing.*",
											"Imagine for now that each fact has foreign keys to only two dimension tables—in [Figure 3-12](blob:https://johnfactotum.github.io/faa0281e-3579-4962-b436-619702d86151#fig_data_cube), these are *date* and *product*. You can now draw a two-dimensional table, with dates along one axis and products along the other. Each cell contains the aggregate (e.g., `SUM`) of an attribute (e.g., `net_price`) of all facts with that date-product combination. Then you can apply the same aggregate along each row or column and get a summary that has been reduced by one dimension (the sales by product regardless of date, or the sales by date regardless of product).",
											"In general, facts often have more than two dimensions. In [Figure 3-9](blob:https://johnfactotum.github.io/faa0281e-3579-4962-b436-619702d86151#fig_dwh_schema) there are five dimensions: date, product, store, promotion, and customer. It’s a lot harder to imagine what a five-dimensional hypercube would look like, but the principle remains the same: each cell contains the sales for a particular date-product-store-promotion-customer combination. These values can then repeatedly be summarized along each of the dimensions.",
											"The advantage of a materialized data cube is that certain queries become very fast because they have effectively been precomputed. For example, if you want to know the total sales per store yesterday, you just need to look at the totals along the appropriate dimension—no need to scan millions of rows.",
											"The disadvantage is that a data cube doesn’t have the same flexibility as querying the raw data. For example, there is no way of calculating which proportion of sales comes from items that cost more than $100, because the price isn’t one of the dimensions. Most data warehouses therefore try to keep as much raw data as possible, and use aggregates such as data cubes only as a performance boost for certain queries.",
										],
										summary: [
											"Column stores and materialized views boost data warehouse speed for analytical queries.",
										],
										longSummary: [
											"Column stores are increasingly popular in data warehouses for their speed in analytical queries, though other architectures are also used. Data warehouses often use materialized aggregates to cache frequently used calculations, with materialized views storing actual query results on disk. While these require updates when underlying data changes, making them less suitable for OLTP databases, they are beneficial in read-heavy data warehouses. A common type is the data cube, which pre-aggregates data along multiple dimensions, such as date, product, and customer, to make certain queries extremely fast, though at the cost of flexibility compared to querying raw data.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280150/blog-cover-images/rvabtz9o77px8brsgl7j.webp",
									},
								],
							],
							summary: [
								"Column-oriented storage optimizes data warehouses, enhancing query speed and efficiency with compression.",
							],
							longSummary: [
								"When handling trillions of rows and petabytes of data, efficient storage and querying are essential. Column-oriented storage improves efficiency by storing column values together, allowing queries to access only needed columns, reducing disk and CPU demands. Compression techniques like bitmap and run-length encoding further enhance performance, especially for data warehouse queries. Unlike row-oriented storage, column stores can sort data in various ways to optimize queries, though this complicates writes. They are favored for their speed in analytical queries, often using materialized views and data cubes to enhance performance for specific queries.",
							],
							imageUrl:
								"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280129/blog-cover-images/r1ww8nuykxdzxryefpl7.webp",
						},
						{
							heading: ["# **Summary**"],
							children: [
								"In this chapter we tried to get to the bottom of how databases handle storage and retrieval. What happens when you store data in a database, and what does the database do when you query for the data again later?",
								"On a high level, we saw that storage engines fall into two broad categories: those optimized for transaction processing (OLTP), and those optimized for analytics (OLAP). There are big differences between the access patterns in those use cases:",
								"* OLTP systems are typically user-facing, which means that they may see a huge volume of requests. In order to handle the load, applications usually only touch a small number of records in each query. The application requests records using some kind of key, and the storage engine uses an index to find the data for the requested key. Disk seek time is often the bottleneck here.",
								"* Data warehouses and similar analytic systems are less well known, because they are primarily used by business analysts, not by end users. They handle a much lower volume of queries than OLTP systems, but each query is typically very demanding, requiring many millions of records to be scanned in a short time. Disk bandwidth (not seek time) is often the bottleneck here, and column-oriented storage is an increasingly popular solution for this kind of workload.",
								"On the OLTP side, we saw storage engines from two main schools of thought:",
								"* The log-structured school, which only permits appending to files and deleting obsolete files, but never updates a file that has been written. Bitcask, SSTables, LSM-trees, LevelDB, Cassandra, HBase, Lucene, and others belong to this group.",
								"* The update-in-place school, which treats the disk as a set of fixed-size pages that can be overwritten. B-trees are the biggest example of this philosophy, being used in all major relational databases and also many nonrelational ones.",
								"Log-structured storage engines are a comparatively recent development. Their key idea is that they systematically turn random-access writes into sequential writes on disk, which enables higher write throughput due to the performance characteristics of hard drives and SSDs.",
								"Finishing off the OLTP side, we did a brief tour through some more complicated indexing structures, and databases that are optimized for keeping all data in memory.",
								"We then took a detour from the internals of storage engines to look at the high-level architecture of a typical data warehouse. This background illustrated why analytic workloads are so different from OLTP: when your queries require sequentially scanning across a large number of rows, indexes are much less relevant. Instead it becomes important to encode data very compactly, to minimize the amount of data that the query needs to read from disk. We discussed how column-oriented storage helps achieve this goal.",
								"As an application developer, if you’re armed with this knowledge about the internals of storage engines, you are in a much better position to know which tool is best suited for your particular application. If you need to adjust a database’s tuning parameters, this understanding allows you to imagine what effect a higher or a lower value may have.",
								"Although this chapter couldn’t make you an expert in tuning any one particular storage engine, it has hopefully equipped you with enough vocabulary and ideas that you can make sense of the documentation for the database of your choice.",
								"##### **Footnotes**",
								"[i]() If all keys and values had a fixed size, you could use binary search on a segment file and avoid the in-memory index entirely. However, they are usually variable-length in practice, which makes it difficult to tell where one record ends and the next one starts if you don’t have an index.",
								"[ii]() Inserting a new key into a B-tree is reasonably intuitive, but deleting one (while keeping the tree balanced) is somewhat more involved \\[[2]()\\].",
								"[iii]() This variant is sometimes known as a B+ tree, although the optimization is so common that it often isn’t distinguished from other B-tree variants.",
								"[iv]() The meaning of *online* in OLAP is unclear; it probably refers to the fact that queries are not just for predefined reports, but that analysts use the OLAP system interactively for explorative queries.",
								"##### **References**",
								"\\[[1]()\\] Alfred V. Aho, John E. Hopcroft, and Jeffrey D. Ullman: *Data Structures and Algorithms*. Addison-Wesley, 1983. ISBN: 978-0-201-00023-8",
								"\\[[2]()\\] Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein: *Introduction to Algorithms*, 3rd edition. MIT Press, 2009. ISBN: 978-0-262-53305-8",
								"\\[[3]()\\] Justin Sheehy and David Smith: “[Bitcask: A Log-Structured Hash Table for Fast Key/Value Data](http://basho.com/wp-content/uploads/2015/05/bitcask-intro.pdf),” Basho Technologies, April 2010.",
								"\\[[4]()\\] Yinan Li, Bingsheng He, Robin Jun Yang, et al.: “[Tree Indexing on Solid State Drives](http://www.vldb.org/pvldb/vldb2010/papers/R106.pdf),” *Proceedings of the VLDB Endowment*, volume 3, number 1, pages 1195–1206, September 2010.",
								"\\[[5]()\\] Goetz Graefe: “[Modern B-Tree Techniques](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.219.7269&rep=rep1&type=pdf),” *Foundations and Trends in Databases*, volume 3, number 4, pages 203–402, August 2011. [doi:10.1561/1900000028](http://dx.doi.org/10.1561/1900000028)",
								"\\[[6]()\\] Jeffrey Dean and Sanjay Ghemawat: “[LevelDB Implementation Notes](https://github.com/google/leveldb/blob/master/doc/impl.html),” *leveldb.googlecode.com*.",
								"\\[[7]()\\] Dhruba Borthakur: “[The History of RocksDB](http://rocksdb.blogspot.com/),” *rocksdb.blogspot.com*, November 24, 2013.",
								"\\[[8]()\\] Matteo Bertozzi: “[Apache HBase I/O – HFile](http://blog.cloudera.com/blog/2012/06/hbase-io-hfile-input-output/),” *blog.cloudera.com*, June, 29 2012.",
								"\\[[9]()\\] Fay Chang, Jeffrey Dean, Sanjay Ghemawat, et al.: “[Bigtable: A Distributed Storage System for Structured Data](http://research.google.com/archive/bigtable.html),” at *7th USENIX Symposium on Operating System Design and Implementation* (OSDI), November 2006.",
								"\\[[10]()\\] Patrick O’Neil, Edward Cheng, Dieter Gawlick, and Elizabeth O’Neil: “[The Log-Structured Merge-Tree (LSM-Tree)](http://www.cs.umb.edu/~poneil/lsmtree.pdf),” *Acta Informatica*, volume 33, number 4, pages 351–385, June 1996. [doi:10.1007/s002360050048](http://dx.doi.org/10.1007/s002360050048)",
								"\\[[11]()\\] Mendel Rosenblum and John K. Ousterhout: “[The Design and Implementation of a Log-Structured File System](http://research.cs.wisc.edu/areas/os/Qual/papers/lfs.pdf),” *ACM Transactions on Computer Systems*, volume 10, number 1, pages 26–52, February 1992. [doi:10.1145/146941.146943](http://dx.doi.org/10.1145/146941.146943)",
								"\\[[12]()\\] Adrien Grand: “[What Is in a Lucene Index?](http://www.slideshare.net/lucenerevolution/what-is-inaluceneagrandfinal),” at *Lucene/Solr Revolution*, November 14, 2013.",
								"\\[[13]()\\] Deepak Kandepet: “[Hacking Lucene—The Index Format](http://hackerlabs.github.io/blog/2011/10/01/hacking-lucene-the-index-format/index.html),” *hackerlabs.org*, October 1, 2011.",
								"\\[[14]()\\] Michael McCandless: “[Visualizing Lucene’s Segment Merges](http://blog.mikemccandless.com/2011/02/visualizing-lucenes-segment-merges.html),” *blog.mikemccandless.com*, February 11, 2011.",
								"\\[[15]()\\] Burton H. Bloom: “[Space/Time Trade-offs in Hash Coding with Allowable Errors](http://www.cs.upc.edu/~diaz/p422-bloom.pdf),” *Communications of the ACM*, volume 13, number 7, pages 422–426, July 1970. [doi:10.1145/362686.362692](http://dx.doi.org/10.1145/362686.362692)",
								"\\[[16]()\\] “[Operating Cassandra: Compaction](https://cassandra.apache.org/doc/latest/operating/compaction.html),” Apache Cassandra Documentation v4.0, 2016.",
								"\\[[17]()\\] Rudolf Bayer and Edward M. McCreight: “[Organization and Maintenance of Large Ordered Indices](http://www.dtic.mil/cgi-bin/GetTRDoc?AD=AD0712079),” Boeing Scientific Research Laboratories, Mathematical and Information Sciences Laboratory, report no. 20, July 1970.",
								"\\[[18]()\\] Douglas Comer: “[The Ubiquitous B-Tree](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.96.6637&rep=rep1&type=pdf),” *ACM Computing Surveys*, volume 11, number 2, pages 121–137, June 1979. [doi:10.1145/356770.356776](http://dx.doi.org/10.1145/356770.356776)",
								"\\[[19]()\\] Emmanuel Goossaert: “[Coding for SSDs](http://codecapsule.com/2014/02/12/coding-for-ssds-part-1-introduction-and-table-of-contents/),” *codecapsule.com*, February 12, 2014.",
								"\\[[20]()\\] C. Mohan and Frank Levine: “[ARIES/IM: An Efficient and High Concurrency Index Management Method Using Write-Ahead Logging](http://www.ics.uci.edu/~cs223/papers/p371-mohan.pdf),” at *ACM International Conference on Management of Data* (SIGMOD), June 1992. [doi:10.1145/130283.130338](http://dx.doi.org/10.1145/130283.130338)",
								"\\[[21]()\\] Howard Chu: “[LDAP at Lightning Speed](https://buildstuff14.sched.com/event/08a1a368e272eb599a52e08b4c3c779d),” at *Build Stuff ’14*, November 2014.",
								"\\[[22]()\\] Bradley C. Kuszmaul: “[A Comparison of Fractal Trees to Log-Structured Merge (LSM) Trees](http://insideanalysis.com/wp-content/uploads/2014/08/Tokutek_lsm-vs-fractal.pdf),” *tokutek.com*, April 22, 2014.",
								"\\[[23]()\\] Manos Athanassoulis, Michael S. Kester, Lukas M. Maas, et al.: “[Designing Access Methods: The RUM Conjecture](http://openproceedings.org/2016/conf/edbt/paper-12.pdf),” at *19th International Conference on Extending Database Technology* (EDBT), March 2016. [doi:10.5441/002/edbt.2016.42](http://dx.doi.org/10.5441/002/edbt.2016.42)",
								"\\[[24]()\\] Peter Zaitsev: “[Innodb Double Write](https://www.percona.com/blog/2006/08/04/innodb-double-write/),” *percona.com*, August 4, 2006.",
								"\\[[25]()\\] Tomas Vondra: “[On the Impact of Full-Page Writes](http://blog.2ndquadrant.com/on-the-impact-of-full-page-writes/),” *blog.2ndquadrant.com*, November 23, 2016.",
								"\\[[26]()\\] Mark Callaghan: “[The Advantages of an LSM vs a B-Tree](http://smalldatum.blogspot.co.uk/2016/01/summary-of-advantages-of-lsm-vs-b-tree.html),” *smalldatum.blogspot.co.uk*, January 19, 2016.",
								"\\[[27]()\\] Mark Callaghan: “[Choosing Between Efficiency and Performance with RocksDB](http://www.codemesh.io/codemesh/mark-callaghan),” at *Code Mesh*, November 4, 2016.",
								"\\[[28]()\\] Michi Mutsuzaki: “[MySQL vs. LevelDB](https://github.com/m1ch1/mapkeeper/wiki/MySQL-vs.-LevelDB),” *github.com*, August 2011.",
								"\\[[29]()\\] Benjamin Coverston, Jonathan Ellis, et al.: “[CASSANDRA-1608: Redesigned Compaction](https://issues.apache.org/jira/browse/CASSANDRA-1608), *issues.apache.org*, July 2011.",
								"\\[[30]()\\] Igor Canadi, Siying Dong, and Mark Callaghan: “[RocksDB Tuning Guide](https://github.com/facebook/rocksdb/wiki/RocksDB-Tuning-Guide),” *github.com*, 2016.",
								"\\[[31]()\\] *[MySQL 5.7 Reference Manual](http://dev.mysql.com/doc/refman/5.7/en/index.html)*. Oracle, 2014.",
								"\\[[32]()\\] *[Books Online for SQL Server 2012](http://msdn.microsoft.com/en-us/library/ms130214.aspx)*. Microsoft, 2012.",
								"\\[[33]()\\] Joe Webb: “[Using Covering Indexes to Improve Query Performance](https://www.simple-talk.com/sql/learn-sql-server/using-covering-indexes-to-improve-query-performance/),” *simple-talk.com*, 29 September 2008.",
								"\\[[34]()\\] Frank Ramsak, Volker Markl, Robert Fenk, et al.: “[Integrating the UB-Tree into a Database System Kernel](http://www.vldb.org/conf/2000/P263.pdf),” at *26th International Conference on Very Large Data Bases* (VLDB), September 2000.",
								"\\[[35]()\\] The PostGIS Development Group: “[PostGIS 2.1.2dev Manual](http://postgis.net/docs/manual-2.1/),” *postgis.net*, 2014.",
								"\\[[36]()\\] Robert Escriva, Bernard Wong, and Emin Gün Sirer: “[HyperDex: A Distributed, Searchable Key-Value Store](http://www.cs.princeton.edu/courses/archive/fall13/cos518/papers/hyperdex.pdf),” at *ACM SIGCOMM Conference*, August 2012. [doi:10.1145/2377677.2377681](http://dx.doi.org/10.1145/2377677.2377681)",
								"\\[[37]()\\] Michael McCandless: “[Lucene’s FuzzyQuery Is 100 Times Faster in 4.0](http://blog.mikemccandless.com/2011/03/lucenes-fuzzyquery-is-100-times-faster.html),” *blog.mikemccandless.com*, March 24, 2011.",
								"\\[[38]()\\] Steffen Heinz, Justin Zobel, and Hugh E. Williams: “[Burst Tries: A Fast, Efficient Data Structure for String Keys](http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.18.3499),” *ACM Transactions on Information Systems*, volume 20, number 2, pages 192–223, April 2002. [doi:10.1145/506309.506312](http://dx.doi.org/10.1145/506309.506312)",
								"\\[[39]()\\] Klaus U. Schulz and Stoyan Mihov: “[Fast String Correction with Levenshtein Automata](http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.16.652),” *International Journal on Document Analysis and Recognition*, volume 5, number 1, pages 67–85, November 2002. [doi:10.1007/s10032-002-0082-8](http://dx.doi.org/10.1007/s10032-002-0082-8)",
								"\\[[40]()\\] Christopher D. Manning, Prabhakar Raghavan, and Hinrich Schütze: *[Introduction to Information Retrieval](http://nlp.stanford.edu/IR-book/)*. Cambridge University Press, 2008. ISBN: 978-0-521-86571-5, available online at *nlp.stanford.edu/IR-book*",
								"\\[[41]()\\] Michael Stonebraker, Samuel Madden, Daniel J. Abadi, et al.: “[The End of an Architectural Era (It’s Time for a Complete Rewrite)](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.137.3697&rep=rep1&type=pdf),” at *33rd International Conference on Very Large Data Bases* (VLDB), September 2007.",
								"\\[[42]()\\] “[VoltDB Technical Overview White Paper](https://www.voltdb.com/wptechnicaloverview),” VoltDB, 2014.",
								"\\[[43]()\\] Stephen M. Rumble, Ankita Kejriwal, and John K. Ousterhout: “[Log-Structured Memory for DRAM-Based Storage](https://www.usenix.org/system/files/conference/fast14/fast14-paper_rumble.pdf),” at *12th USENIX Conference on File and Storage Technologies* (FAST), February 2014.",
								"\\[[44]()\\] Stavros Harizopoulos, Daniel J. Abadi, Samuel Madden, and Michael Stonebraker: “[OLTP Through the Looking Glass, and What We Found There](http://hstore.cs.brown.edu/papers/hstore-lookingglass.pdf),” at *ACM International Conference on Management of Data* (SIGMOD), June 2008. [doi:10.1145/1376616.1376713](http://dx.doi.org/10.1145/1376616.1376713)",
								"\\[[45]()\\] Justin DeBrabant, Andrew Pavlo, Stephen Tu, et al.: “[Anti-Caching: A New Approach to Database Management System Architecture](http://www.vldb.org/pvldb/vol6/p1942-debrabant.pdf),” *Proceedings of the VLDB Endowment*, volume 6, number 14, pages 1942–1953, September 2013.",
								"\\[[46]()\\] Joy Arulraj, Andrew Pavlo, and Subramanya R. Dulloor: “[Let’s Talk About Storage & Recovery Methods for Non-Volatile Memory Database Systems](http://www.pdl.cmu.edu/PDL-FTP/NVM/storage.pdf),” at *ACM International Conference on Management of Data* (SIGMOD), June 2015. [doi:10.1145/2723372.2749441](http://dx.doi.org/10.1145/2723372.2749441)",
								"\\[[47]()\\] Edgar F. Codd, S. B. Codd, and C. T. Salley: “[Providing OLAP to User-Analysts: An IT Mandate](http://www.minet.uni-jena.de/dbis/lehre/ss2005/sem_dwh/lit/Cod93.pdf),” E. F. Codd Associates, 1993.",
								"\\[[48]()\\] Surajit Chaudhuri and Umeshwar Dayal: “[An Overview of Data Warehousing and OLAP Technology](https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/sigrecord.pdf),” *ACM SIGMOD Record*, volume 26, number 1, pages 65–74, March 1997. [doi:10.1145/248603.248616](http://dx.doi.org/10.1145/248603.248616)",
								"\\[[49]()\\] Per-Åke Larson, Cipri Clinciu, Campbell Fraser, et al.: “[Enhancements to SQL Server Column Stores](http://research.microsoft.com/pubs/193599/Apollo3%20-%20Sigmod%202013%20-%20final.pdf),” at *ACM International Conference on Management of Data* (SIGMOD), June 2013.",
								"\\[[50]()\\] Franz Färber, Norman May, Wolfgang Lehner, et al.: “[The SAP HANA Database – An Architecture Overview](http://sites.computer.org/debull/A12mar/hana.pdf),” *IEEE Data Engineering Bulletin*, volume 35, number 1, pages 28–33, March 2012.",
								"\\[[51]()\\] Michael Stonebraker: “[The Traditional RDBMS Wisdom Is (Almost Certainly) All Wrong](http://slideshot.epfl.ch/talks/166),” presentation at *EPFL*, May 2013.",
								"\\[[52]()\\] Daniel J. Abadi: “[Classifying the SQL-on-Hadoop Solutions](https://web.archive.org/web/20150622074951/http://hadapt.com/blog/2013/10/02/classifying-the-sql-on-hadoop-solutions/),” *hadapt.com*, October 2, 2013.",
								"\\[[53]()\\] Marcel Kornacker, Alexander Behm, Victor Bittorf, et al.: “[Impala: A Modern, Open-Source SQL Engine for Hadoop](http://pandis.net/resources/cidr15impala.pdf),” at *7th Biennial Conference on Innovative Data Systems Research* (CIDR), January 2015.",
								"\\[[54]()\\] Sergey Melnik, Andrey Gubarev, Jing Jing Long, et al.: “[Dremel: Interactive Analysis of Web-Scale Datasets](http://research.google.com/pubs/pub36632.html),” at *36th International Conference on Very Large Data Bases* (VLDB), pages 330–339, September 2010.",
								"\\[[55]()\\] Ralph Kimball and Margy Ross: *The Data Warehouse Toolkit: The Definitive Guide to Dimensional Modeling*, 3rd edition. John Wiley & Sons, July 2013. ISBN: 978-1-118-53080-1",
								"\\[[56]()\\] Derrick Harris: “[Why Apple, eBay, and Walmart Have Some of the Biggest Data Warehouses You’ve Ever Seen](http://gigaom.com/2013/03/27/why-apple-ebay-and-walmart-have-some-of-the-biggest-data-warehouses-youve-ever-seen/),” *gigaom.com*, March 27, 2013.",
								"\\[[57]()\\] Julien Le Dem: “[Dremel Made Simple with Parquet](https://blog.twitter.com/2013/dremel-made-simple-with-parquet),” *blog.twitter.com*, September 11, 2013.",
								"\\[[58]()\\] Daniel J. Abadi, Peter Boncz, Stavros Harizopoulos, et al.: “[The Design and Implementation of Modern Column-Oriented Database Systems](http://cs-www.cs.yale.edu/homes/dna/papers/abadi-column-stores.pdf),” *Foundations and Trends in Databases*, volume 5, number 3, pages 197–280, December 2013. [doi:10.1561/1900000024](http://dx.doi.org/10.1561/1900000024)",
								"\\[[59]()\\] Peter Boncz, Marcin Zukowski, and Niels Nes: “[MonetDB/X100: Hyper-Pipelining Query Execution](http://www.cidrdb.org/cidr2005/papers/P19.pdf),” at *2nd Biennial Conference on Innovative Data Systems Research* (CIDR), January 2005.",
								"\\[[60]()\\] Jingren Zhou and Kenneth A. Ross: “[Implementing Database Operations Using SIMD Instructions](http://www1.cs.columbia.edu/~kar/pubsk/simd.pdf),” at *ACM International Conference on Management of Data* (SIGMOD), pages 145–156, June 2002. [doi:10.1145/564691.564709](http://dx.doi.org/10.1145/564691.564709)",
								"\\[[61]()\\] Michael Stonebraker, Daniel J. Abadi, Adam Batkin, et al.: “[C-Store: A Column-oriented DBMS](http://www.vldb2005.org/program/paper/thu/p553-stonebraker.pdf),” at *31st International Conference on Very Large Data Bases* (VLDB), pages 553–564, September 2005.",
								"\\[[62]()\\] Andrew Lamb, Matt Fuller, Ramakrishna Varadarajan, et al.: “[The Vertica Analytic Database: C-Store 7 Years Later](http://vldb.org/pvldb/vol5/p1790_andrewlamb_vldb2012.pdf),” *Proceedings of the VLDB Endowment*, volume 5, number 12, pages 1790–1801, August 2012.",
								"\\[[63]()\\] Julien Le Dem and Nong Li: “[Efficient Data Storage for Analytics with Apache Parquet 2.0](http://www.slideshare.net/julienledem/th-210pledem),” at *Hadoop Summit*, San Jose, June 2014.",
								"\\[[64]()\\] Jim Gray, Surajit Chaudhuri, Adam Bosworth, et al.: “[Data Cube: A Relational Aggregation Operator Generalizing Group-By, Cross-Tab, and Sub-Totals](http://arxiv.org/pdf/cs/0701155.pdf),” *Data Mining and Knowledge Discovery*, volume 1, number 1, pages 29–53, March 2007. [doi:10.1023/A:1009726021843](http://dx.doi.org/10.1023/A:1009726021843)",
							],
							summary: [
								"Discover how OLTP and OLAP storage engines optimize database performance and efficiency.",
							],
							longSummary: [
								"This chapter delves into database storage and retrieval, focusing on OLTP and OLAP systems. OLTP systems, optimized for transaction processing, handle high request volumes with small data access per query, where disk seek time is a bottleneck. They use either log-structured engines (e.g., Bitcask, LSM-trees) for sequential writes or update-in-place engines (e.g., B-trees) for overwriting fixed-size pages. OLAP systems, optimized for analytics, manage fewer but intensive queries, with disk bandwidth as the bottleneck, often using column-oriented storage for compact data encoding. Understanding these systems aids developers in selecting and tuning databases effectively.",
							],
							imageUrl:
								"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280130/blog-cover-images/gch0o8taiyq9clndwgg4.webp",
						},
					],
				],
				summary: [
					"Explore database storage engines: log-structured vs. B-trees, OLTP vs. OLAP, and indexing strategies.",
				],
				longSummary: [
					"This chapter delves into the intricacies of database storage and retrieval, focusing on two main types of storage engines: those optimized for transaction processing (OLTP) and those for analytics (OLAP). OLTP systems, which handle high volumes of small data requests, often use log-structured storage engines like LSM-trees or update-in-place engines like B-trees. These systems convert random writes into sequential ones for efficiency. OLAP systems, designed for fewer but more intensive queries, benefit from column-oriented storage, which compresses data and reduces disk reads. Understanding these mechanisms aids in selecting and tuning the right database engine for specific applications.",
				],
				imageUrl:
					"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280119/blog-cover-images/yyqhskx92qxpghqfn3ip.webp",
			},
			{
				heading: ["# **Chapter 4. Encoding and Evolution**"],
				children: [
					"Applications inevitably change over time. Features are added or modified as new products are launched, user requirements become better understood, or business circumstances change. In [Chapter 1]() we introduced the idea of *evolvability*: we should aim to build systems that make it easy to adapt to change (see [“Evolvability: Making Change Easy”]()).",
					"In most cases, a change to an application’s features also requires a change to data that it stores: perhaps a new field or record type needs to be captured, or perhaps existing data needs to be presented in a new way.",
					"The data models we discussed in [Chapter 2]() have different ways of coping with such change. Relational databases generally assume that all data in the database conforms to one schema: although that schema can be changed (through schema migrations; i.e., `ALTER` statements), there is exactly one schema in force at any one point in time. By contrast, schema-on-read (“schemaless”) databases don’t enforce a schema, so the database can contain a mixture of older and newer data formats written at different times (see [“Schema flexibility in the document model”]()).",
					"When a data format or schema changes, a corresponding change to application code often needs to happen (for example, you add a new field to a record, and the application code starts reading and writing that field). However, in a large application, code changes often cannot happen instantaneously:",
					"* With server-side applications you may want to perform a *rolling upgrade* (also known as a *staged rollout*), deploying the new version to a few nodes at a time, checking whether the new version is running smoothly, and gradually working your way through all the nodes. This allows new versions to be deployed without service downtime, and thus encourages more frequent releases and better evolvability.",
					"* With client-side applications you’re at the mercy of the user, who may not install the update for some time.",
					"This means that old and new versions of the code, and old and new data formats, may potentially all coexist in the system at the same time. In order for the system to continue running smoothly, we need to maintain compatibility in both directions:",
					"> *Everything changes and nothing stands still.*",
					"> Heraclitus of Ephesus, as quoted by Plato in *Cratylus* (360 BCE)",
					[
						{
							heading: [
								"Backward compatibility",
								"Forward compatibility",
							],
							children: [
								"Older code can read data that was written by newer code.",
								"Backward compatibility is normally not hard to achieve: as author of the newer code, you know the format of data written by older code, and so you can explicitly handle it (if necessary by simply keeping the old code to read the old data). Forward compatibility can be trickier, because it requires older code to ignore additions made by a newer version of the code.",
								"In this chapter we will look at several formats for encoding data, including JSON, XML, Protocol Buffers, Thrift, and Avro. In particular, we will look at how they handle schema changes and how they support systems where old and new data and code need to coexist. We will then discuss how those formats are used for data storage and for communication: in web services, Representational State Transfer (REST), and remote procedure calls (RPC), as well as message-passing systems such as actors and message queues.",
							],
							summary: [
								"Explore data formats like JSON and XML for seamless backward and forward compatibility.",
							],
							longSummary: [
								"Older code can read data from newer code, ensuring backward compatibility, which is typically straightforward since the newer code's author knows the older data format. Forward compatibility is more challenging, as it requires older code to ignore new additions. This chapter explores data encoding formats like JSON, XML, Protocol Buffers, Thrift, and Avro, emphasizing their handling of schema changes and coexistence of old and new data and code. It discusses their application in data storage and communication across web services, REST, RPC, and message-passing systems such as actors and message queues.",
							],
							imageUrl:
								"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280202/blog-cover-images/o95ijby6pnnkiy8kts4z.webp",
						},
						{
							heading: [
								"# **Formats for Encoding Data**",
								"# **Terminology clash**",
							],
							children: [
								"*Serialization* is unfortunately also used in the context of transactions (see [Chapter 7]()), with a completely different meaning. To avoid overloading the word we’ll stick with *encoding* in this book, even though *serialization* is perhaps a more common term.",
								"As this is such a common problem, there are a myriad different libraries and encoding formats to choose from. Let’s do a brief overview.",
								[
									{
										heading: [
											"## **Language-Specific Formats**",
										],
										children: [
											"Many programming languages come with built-in support for encoding in-memory objects into byte sequences. For example, Java has `java.io.Serializable` \\[[1]()\\], Ruby has `Marshal` \\[[2]()\\], Python has `pickle` \\[[3]()\\], and so on. Many third-party libraries also exist, such as Kryo for Java \\[[4]()\\].",
											"These encoding libraries are very convenient, because they allow in-memory objects to be saved and restored with minimal additional code. However, they also have a number of deep problems:",
											"* The encoding is often tied to a particular programming language, and reading the data in another language is very difficult. If you store or transmit data in such an encoding, you are committing yourself to your current programming language for potentially a very long time, and precluding integrating your systems with those of other organizations (which may use different languages).",
											"* In order to restore data in the same object types, the decoding process needs to be able to instantiate arbitrary classes. This is frequently a source of security problems \\[[5]()\\]: if an attacker can get your application to decode an arbitrary byte sequence, they can instantiate arbitrary classes, which in turn often allows them to do terrible things such as remotely executing arbitrary code \\[[6](), [7]()\\].",
											"* Versioning data is often an afterthought in these libraries: as they are intended for quick and easy encoding of data, they often neglect the inconvenient problems of forward and backward compatibility.",
											"* Efficiency (CPU time taken to encode or decode, and the size of the encoded structure) is also often an afterthought. For example, Java’s built-in serialization is notorious for its bad performance and bloated encoding \\[[8]()\\].",
											"For these reasons it’s generally a bad idea to use your language’s built-in encoding for anything other than very transient purposes.",
										],
										summary: [
											"Beware of built-in object encoding: language-specific, insecure, inefficient, and versioning nightmares await.",
										],
										longSummary: [
											"Many programming languages, like Java, Ruby, and Python, offer built-in support for encoding in-memory objects into byte sequences, such as Java's Serializable, Ruby's Marshal, and Python's pickle, with third-party options like Kryo for Java. While these tools simplify saving and restoring objects, they pose significant issues: they are often language-specific, complicating cross-language data reading; they can introduce security vulnerabilities by instantiating arbitrary classes; they usually overlook versioning and compatibility concerns; and they are often inefficient in CPU time and encoding size. Therefore, using built-in encoding is generally advisable only for very transient purposes.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280210/blog-cover-images/tijw3fq1igzashugbmbe.webp",
									},
									{
										heading: [
											"## **JSON, XML, and Binary Variants**",
										],
										children: [
											"Moving to standardized encodings that can be written and read by many programming languages, JSON and XML are the obvious contenders. They are widely known, widely supported, and almost as widely disliked. XML is often criticized for being too verbose and unnecessarily complicated \\[[9]()\\]. JSON’s popularity is mainly due to its built-in support in web browsers (by virtue of being a subset of JavaScript) and simplicity relative to XML. CSV is another popular language-independent format, albeit less powerful.",
											"JSON, XML, and CSV are textual formats, and thus somewhat human-readable (although the syntax is a popular topic of debate). Besides the superficial syntactic issues, they also have some subtle problems:",
											"* There is a lot of ambiguity around the encoding of numbers. In XML and CSV, you cannot distinguish between a number and a string that happens to consist of digits (except by referring to an external schema). JSON distinguishes strings and numbers, but it doesn’t distinguish integers and floating-point numbers, and it doesn’t specify a precision.",
											"  This is a problem when dealing with large numbers; for example, integers greater than 253 cannot be exactly represented in an IEEE 754 double-precision floating-point number, so such numbers become inaccurate when parsed in a language that uses floating-point numbers (such as JavaScript). An example of numbers larger than 253 occurs on Twitter, which uses a 64-bit number to identify each tweet. The JSON returned by Twitter’s API includes tweet IDs twice, once as a JSON number and once as a decimal string, to work around the fact that the numbers are not correctly parsed by JavaScript applications \\[[10]()\\].",
											"* JSON and XML have good support for Unicode character strings (i.e., human-readable text), but they don’t support binary strings (sequences of bytes without a character encoding). Binary strings are a useful feature, so people get around this limitation by encoding the binary data as text using Base64. The schema is then used to indicate that the value should be interpreted as Base64-encoded. This works, but it’s somewhat hacky and increases the data size by 33%.",
											"* There is optional schema support for both XML \\[[11]()\\] and JSON \\[[12]()\\]. These schema languages are quite powerful, and thus quite complicated to learn and implement. Use of XML schemas is fairly widespread, but many JSON-based tools don’t bother using schemas. Since the correct interpretation of data (such as numbers and binary strings) depends on information in the schema, applications that don’t use XML/JSON schemas need to potentially hardcode the appropriate encoding/decoding logic instead.",
											"* CSV does not have any schema, so it is up to the application to define the meaning of each row and column. If an application change adds a new row or column, you have to handle that change manually. CSV is also a quite vague format (what happens if a value contains a comma or a newline character?). Although its escaping rules have been formally specified \\[[13]()\\], not all parsers implement them correctly.",
											"Despite these flaws, JSON, XML, and CSV are good enough for many purposes. It’s likely that they will remain popular, especially as data interchange formats (i.e., for sending data from one organization to another). In these situations, as long as people agree on what the format is, it often doesn’t matter how pretty or efficient the format is. The difficulty of getting different organizations to agree on *anything* outweighs most other concerns.",
											[
												{
													heading: [
														"### **Binary encoding**",
													],
													children: [
														"For data that is used only internally within your organization, there is less pressure to use a lowest-common-denominator encoding format. For example, you could choose a format that is more compact or faster to parse. For a small dataset, the gains are negligible, but once you get into the terabytes, the choice of data format can have a big impact.",
														"JSON is less verbose than XML, but both still use a lot of space compared to binary formats. This observation led to the development of a profusion of binary encodings for JSON (MessagePack, BSON, BJSON, UBJSON, BISON, and Smile, to name a few) and for XML (WBXML and Fast Infoset, for example). These formats have been adopted in various niches, but none of them are as widely adopted as the textual versions of JSON and XML.",
														"Some of these formats extend the set of datatypes (e.g., distinguishing integers and floating-point numbers, or adding support for binary strings), but otherwise they keep the JSON/XML data model unchanged. In particular, since they don’t prescribe a schema, they need to include all the object field names within the encoded data. That is, in a binary encoding of the JSON document in [Example 4-1](blob:https://johnfactotum.github.io/f0f05437-95cb-4dc4-940e-bbb899f1ca94#fig_encoding_json), they will need to include the strings `userName`, `favoriteNumber`, and `interests` somewhere.",
														"##### *Example 4-1. Example record which we will encode in several binary formats in this chapter*",
														'```\n{\n    "userName": "Martin",\n    "favoriteNumber": 1337,\n    "interests": ["daydreaming", "hacking"]\n}\n```',
														"Let’s look at an example of MessagePack, a binary encoding for JSON. [Figure 4-1](blob:https://johnfactotum.github.io/f0f05437-95cb-4dc4-940e-bbb899f1ca94#fig_encoding_messagepack) shows the byte sequence that you get if you encode the JSON document in [Example 4-1](blob:https://johnfactotum.github.io/f0f05437-95cb-4dc4-940e-bbb899f1ca94#fig_encoding_json) with MessagePack \\[[14]()\\]. The first few bytes are as follows:",
														"1. The first byte, `0x83`, indicates that what follows is an object (top four bits = `0x80`) with three fields (bottom four bits = `0x03`). (In case you’re wondering what happens if an object has more than 15 fields, so that the number of fields doesn’t fit in four bits, it then gets a different type indicator, and the number of fields is encoded in two or four bytes.)",
														"2. The second byte, `0xa8`, indicates that what follows is a string (top four bits = `0xa0`) that is eight bytes long (bottom four bits = `0x08`).",
														"3. The next eight bytes are the field name `userName` in ASCII. Since the length was indicated previously, there’s no need for any marker to tell us where the string ends (or any escaping).",
														"4. The next seven bytes encode the six-letter string value `Martin` with a prefix `0xa6`, and so on.",
														"The binary encoding is 66 bytes long, which is only a little less than the 81 bytes taken by the textual JSON encoding (with whitespace removed). All the binary encodings of JSON are similar in this regard. It’s not clear whether such a small space reduction (and perhaps a speedup in parsing) is worth the loss of human-readability.",
														"In the following sections we will see how we can do much better, and encode the same record in just 32 bytes.",
														"![ddia 0401](blob:https://johnfactotum.github.io/98056c70-b3fb-445a-bb81-143251ea6f37)",
														"###### *Figure 4-1. Example record ([Example 4-1](blob:https://johnfactotum.github.io/f0f05437-95cb-4dc4-940e-bbb899f1ca94#fig_encoding_json)) encoded using MessagePack.*",
													],
													summary: [
														"Binary formats like MessagePack reduce JSON size but challenge readability—are they worth it?",
													],
													longSummary: [
														"For managing terabyte-scale data, compact, fast-to-parse formats are essential. JSON is less verbose than XML but still larger than binary formats like MessagePack and BSON, which retain the JSON/XML model with datatype distinctions. These binary formats aren't as popular due to their lack of human-readability. Without a schema, they must include all object field names, resulting in minor size reductions; for example, MessagePack encodes a simple JSON record into 66 bytes versus 81 bytes for JSON. More efficient encodings can reduce this to 32 bytes, highlighting the trade-off between size and readability.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280219/blog-cover-images/xnowrgmns3iiy4ijixsc.webp",
												},
											],
										],
										summary: [
											"Binary encodings like MessagePack offer compact alternatives to JSON and XML for data interchange.",
										],
										longSummary: [
											"JSON, XML, and CSV are popular human-readable data interchange formats, despite criticisms of verbosity, simplicity, and lack of schema definition. They face issues like ambiguity in number encoding, poor binary string support, and inefficient space usage compared to binary formats. JSON is less verbose than XML, but both are outpaced by binary encodings like MessagePack and BSON, which maintain the data model while adding datatype distinctions. However, these binary formats aren't widely adopted due to their reduced human-readability and minimal space savings. For internal data at large scales, more compact formats are crucial, but agreement on standards remains challenging.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280207/blog-cover-images/t8nftus1xr16szpnvozu.webp",
									},
									{
										heading: [
											"## **Thrift and Protocol Buffers**",
										],
										children: [
											"Apache Thrift \\[[15]()\\] and Protocol Buffers (protobuf) \\[[16]()\\] are binary encoding libraries that are based on the same principle. Protocol Buffers was originally developed at Google, Thrift was originally developed at Facebook, and both were made open source in 2007–08 \\[[17]()\\].",
											"Both Thrift and Protocol Buffers require a schema for any data that is encoded. To encode the data in [Example 4-1](blob:https://johnfactotum.github.io/f0f05437-95cb-4dc4-940e-bbb899f1ca94#fig_encoding_json) in Thrift, you would describe the schema in the Thrift interface definition language (IDL) like this:",
											"```\nstruct Person {\n  1: required string       userName,\n  2: optional i64          favoriteNumber,\n  3: optional list<string> interests\n}\n```",
											"The equivalent schema definition for Protocol Buffers looks very similar:",
											"```\nmessage Person {\n    required string user_name       = 1;\n    optional int64  favorite_number = 2;\n    repeated string interests       = 3;\n}\n```",
											"Thrift and Protocol Buffers each come with a code generation tool that takes a schema definition like the ones shown here, and produces classes that implement the schema in various programming languages \\[[18]()\\]. Your application code can call this generated code to encode or decode records of the schema.",
											"What does data encoded with this schema look like? Confusingly, Thrift has two different binary encoding formats,[iii]() called *BinaryProtocol* and *CompactProtocol*, respectively. Let’s look at BinaryProtocol first. Encoding [Example 4-1](blob:https://johnfactotum.github.io/f0f05437-95cb-4dc4-940e-bbb899f1ca94#fig_encoding_json) in that format takes 59 bytes, as shown in [Figure 4-2](blob:https://johnfactotum.github.io/f0f05437-95cb-4dc4-940e-bbb899f1ca94#fig_encoding_thrift_binary) \\[[19]()\\].",
											"![ddia 0402](blob:https://johnfactotum.github.io/32bd1958-43d2-4100-9b68-99fa1c772eb1)",
											"###### *Figure 4-2. Example record encoded using Thrift’s BinaryProtocol.*",
											"Similarly to [Figure 4-1](blob:https://johnfactotum.github.io/f0f05437-95cb-4dc4-940e-bbb899f1ca94#fig_encoding_messagepack), each field has a type annotation (to indicate whether it is a string, integer, list, etc.) and, where required, a length indication (length of a string, number of items in a list). The strings that appear in the data (“Martin”, “daydreaming”, “hacking”) are also encoded as ASCII (or rather, UTF-8), similar to before.",
											"The big difference compared to [Figure 4-1](blob:https://johnfactotum.github.io/f0f05437-95cb-4dc4-940e-bbb899f1ca94#fig_encoding_messagepack) is that there are no field names (`userName`, `favoriteNumber`, `interests`). Instead, the encoded data contains *field tags*, which are numbers (`1`, `2`, and `3`). Those are the numbers that appear in the schema definition. Field tags are like aliases for fields—they are a compact way of saying what field we’re talking about, without having to spell out the field name.",
											"The Thrift CompactProtocol encoding is semantically equivalent to BinaryProtocol, but as you can see in [Figure 4-3](blob:https://johnfactotum.github.io/f0f05437-95cb-4dc4-940e-bbb899f1ca94#fig_encoding_thrift_compact), it packs the same information into only 34 bytes. It does this by packing the field type and tag number into a single byte, and by using variable-length integers. Rather than using a full eight bytes for the number 1337, it is encoded in two bytes, with the top bit of each byte used to indicate whether there are still more bytes to come. This means numbers between –64 and 63 are encoded in one byte, numbers between –8192 and 8191 are encoded in two bytes, etc. Bigger numbers use more bytes.",
											"![ddia 0403](blob:https://johnfactotum.github.io/44c469ba-03fa-4d2e-9b4e-8ac4252b3688)",
											"###### *Figure 4-3. Example record encoded using Thrift’s CompactProtocol.*",
											"Finally, Protocol Buffers (which has only one binary encoding format) encodes the same data as shown in [Figure 4-4](blob:https://johnfactotum.github.io/f0f05437-95cb-4dc4-940e-bbb899f1ca94#fig_encoding_protobuf). It does the bit packing slightly differently, but is otherwise very similar to Thrift’s CompactProtocol. Protocol Buffers fits the same record in 33 bytes.",
											"![ddia 0404](blob:https://johnfactotum.github.io/2d062ee4-d905-43f8-8297-70589cb7eb01)",
											"###### *Figure 4-4. Example record encoded using Protocol Buffers.*",
											"One detail to note: in the schemas shown earlier, each field was marked either `required` or `optional`, but this makes no difference to how the field is encoded (nothing in the binary data indicates whether a field was required). The difference is simply that `required` enables a runtime check that fails if the field is not set, which can be useful for catching bugs.",
											[
												{
													heading: [
														"### **Field tags and schema evolution**",
													],
													children: [
														"We said previously that schemas inevitably need to change over time. We call this *schema evolution*. How do Thrift and Protocol Buffers handle schema changes while keeping backward and forward compatibility?",
														"As you can see from the examples, an encoded record is just the concatenation of its encoded fields. Each field is identified by its tag number (the numbers `1`, `2`, `3` in the sample schemas) and annotated with a datatype (e.g., string or integer). If a field value is not set, it is simply omitted from the encoded record. From this you can see that field tags are critical to the meaning of the encoded data. You can change the name of a field in the schema, since the encoded data never refers to field names, but you cannot change a field’s tag, since that would make all existing encoded data invalid.",
														"You can add new fields to the schema, provided that you give each field a new tag number. If old code (which doesn’t know about the new tag numbers you added) tries to read data written by new code, including a new field with a tag number it doesn’t recognize, it can simply ignore that field. The datatype annotation allows the parser to determine how many bytes it needs to skip. This maintains forward compatibility: old code can read records that were written by new code.",
														"What about backward compatibility? As long as each field has a unique tag number, new code can always read old data, because the tag numbers still have the same meaning. The only detail is that if you add a new field, you cannot make it required. If you were to add a field and make it required, that check would fail if new code read data written by old code, because the old code will not have written the new field that you added. Therefore, to maintain backward compatibility, every field you add after the initial deployment of the schema must be optional or have a default value.",
														"Removing a field is just like adding a field, with backward and forward compatibility concerns reversed. That means you can only remove a field that is optional (a required field can never be removed), and you can never use the same tag number again (because you may still have data written somewhere that includes the old tag number, and that field must be ignored by new code).",
													],
													summary: [
														"Schema evolution ensures compatibility by managing field tags in Thrift and Protocol Buffers.",
													],
													longSummary: [
														"Schema evolution is crucial in Thrift and Protocol Buffers, where records are fields identified by tag numbers and datatype annotations. Tag numbers define data meaning and cannot change, though field names can. New fields get new tag numbers, ensuring forward compatibility as old code ignores them. For backward compatibility, new code reads old data using existing tag numbers, with new fields being optional or having default values. Only optional fields can be removed, and their tag numbers must not be reused to ensure old data is ignored by new code.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280223/blog-cover-images/mkawnas3bnpij0mwkcwo.webp",
												},
												{
													heading: [
														"### **Datatypes and schema evolution**",
													],
													children: [
														"What about changing the datatype of a field? That may be possible—check the documentation for details—but there is a risk that values will lose precision or get truncated. For example, say you change a 32-bit integer into a 64-bit integer. New code can easily read data written by old code, because the parser can fill in any missing bits with zeros. However, if old code reads data written by new code, the old code is still using a 32-bit variable to hold the value. If the decoded 64-bit value won’t fit in 32 bits, it will be truncated.",
														"A curious detail of Protocol Buffers is that it does not have a list or array datatype, but instead has a `repeated` marker for fields (which is a third option alongside `required` and `optional`). As you can see in [Figure 4-4](blob:https://johnfactotum.github.io/f0f05437-95cb-4dc4-940e-bbb899f1ca94#fig_encoding_protobuf), the encoding of a `repeated` field is just what it says on the tin: the same field tag simply appears multiple times in the record. This has the nice effect that it’s okay to change an `optional` (single-valued) field into a `repeated` (multi-valued) field. New code reading old data sees a list with zero or one elements (depending on whether the field was present); old code reading new data sees only the last element of the list.",
														"Thrift has a dedicated list datatype, which is parameterized with the datatype of the list elements. This does not allow the same evolution from single-valued to multi-valued as Protocol Buffers does, but it has the advantage of supporting nested lists.",
													],
													summary: [
														"Changing Protocol Buffers' datatype risks data loss; 'repeated' fields offer unique compatibility solutions.",
													],
													longSummary: [
														"Changing a field's datatype in Protocol Buffers can lead to precision loss or truncation. For instance, upgrading from 32-bit to 64-bit integers allows new code to read old data by zero-filling missing bits, but old code may truncate values exceeding 32 bits. Protocol Buffers uses a 'repeated' marker instead of a list datatype, enabling an 'optional' field to evolve into 'repeated' without breaking compatibility. Conversely, Thrift employs a parameterized list datatype that supports nested lists but doesn't permit single-to-multi-valued evolution, highlighting a key difference in handling data type changes between the two systems.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280220/blog-cover-images/iw256n2xheikpxcmx6jv.webp",
												},
											],
										],
										summary: [
											"Explore Apache Thrift vs. Protocol Buffers: schema evolution, encoding efficiency, and compatibility.",
										],
										longSummary: [
											"Apache Thrift and Protocol Buffers (protobuf) are binary encoding libraries from Facebook and Google, open-sourced in 2007-08, requiring schemas for data encoding with similar IDL definitions. They generate code for various languages and use numeric field tags instead of field names for efficiency. Thrift offers BinaryProtocol and CompactProtocol formats, while Protocol Buffers has one format. Both support schema evolution, allowing new fields with new tags for forward compatibility and optional fields for backward compatibility. Protocol Buffers uses a 'repeated' marker for multi-valued fields, unlike Thrift's list datatype, facilitating single-to-multi-valued evolution without breaking compatibility.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280209/blog-cover-images/nqlhmxoxw0zwgfwptzaf.webp",
									},
									{
										heading: ["## **Avro**"],
										children: [
											"Apache Avro \\[[20]()\\] is another binary encoding format that is interestingly different from Protocol Buffers and Thrift. It was started in 2009 as a subproject of Hadoop, as a result of Thrift not being a good fit for Hadoop’s use cases \\[[21]()\\].",
											"Avro also uses a schema to specify the structure of the data being encoded. It has two schema languages: one (Avro IDL) intended for human editing, and one (based on JSON) that is more easily machine-readable.",
											"Our example schema, written in Avro IDL, might look like this:",
											"```\nrecord Person {\n    string               userName;\n    union { null, long } favoriteNumber = null;\n    array<string>        interests;\n}\n```",
											"The equivalent JSON representation of that schema is as follows:",
											'```\n{\n    "type": "record",\n    "name": "Person",\n    "fields": [\n        {"name": "userName",       "type": "string"},\n        {"name": "favoriteNumber", "type": ["null", "long"], "default": null},\n        {"name": "interests",      "type": {"type": "array", "items": "string"}}\n    ]\n}\n```',
											"First of all, notice that there are no tag numbers in the schema. If we encode our example record ([Example 4-1](blob:https://johnfactotum.github.io/f0f05437-95cb-4dc4-940e-bbb899f1ca94#fig_encoding_json)) using this schema, the Avro binary encoding is just 32 bytes long—the most compact of all the encodings we have seen. The breakdown of the encoded byte sequence is shown in [Figure 4-5](blob:https://johnfactotum.github.io/f0f05437-95cb-4dc4-940e-bbb899f1ca94#fig_encoding_avro).",
											"If you examine the byte sequence, you can see that there is nothing to identify fields or their datatypes. The encoding simply consists of values concatenated together. A string is just a length prefix followed by UTF-8 bytes, but there’s nothing in the encoded data that tells you that it is a string. It could just as well be an integer, or something else entirely. An integer is encoded using a variable-length encoding (the same as Thrift’s CompactProtocol).",
											"![ddia 0405](blob:https://johnfactotum.github.io/79949efa-259b-4e60-9fc6-971d806cd7f6)",
											"###### *Figure 4-5. Example record encoded using Avro.*",
											"To parse the binary data, you go through the fields in the order that they appear in the schema and use the schema to tell you the datatype of each field. This means that the binary data can only be decoded correctly if the code reading the data is using the *exact same schema* as the code that wrote the data. Any mismatch in the schema between the reader and the writer would mean incorrectly decoded data.",
											"So, how does Avro support schema evolution?",
											[
												{
													heading: [
														"### **The writer’s schema and the reader’s schema**",
													],
													children: [
														"With Avro, when an application wants to encode some data (to write it to a file or database, to send it over the network, etc.), it encodes the data using whatever version of the schema it knows about—for example, that schema may be compiled into the application. This is known as the *writer’s schema*.",
														"When an application wants to decode some data (read it from a file or database, receive it from the network, etc.), it is expecting the data to be in some schema, which is known as the *reader’s schema*. That is the schema the application code is relying on—code may have been generated from that schema during the application’s build process.",
														"The key idea with Avro is that the writer’s schema and the reader’s schema *don’t have to be the same*—they only need to be compatible. When data is decoded (read), the Avro library resolves the differences by looking at the writer’s schema and the reader’s schema side by side and translating the data from the writer’s schema into the reader’s schema. The Avro specification \\[[20]()\\] defines exactly how this resolution works, and it is illustrated in [Figure 4-6](blob:https://johnfactotum.github.io/f0f05437-95cb-4dc4-940e-bbb899f1ca94#fig_encoding_avro_resolution).",
														"For example, it’s no problem if the writer’s schema and the reader’s schema have their fields in a different order, because the schema resolution matches up the fields by field name. If the code reading the data encounters a field that appears in the writer’s schema but not in the reader’s schema, it is ignored. If the code reading the data expects some field, but the writer’s schema does not contain a field of that name, it is filled in with a default value declared in the reader’s schema.",
														"![ddia 0406](blob:https://johnfactotum.github.io/e69e0dfb-3006-4f04-9ff2-b1286fc24f9c)",
														"###### *Figure 4-6. An Avro reader resolves differences between the writer’s schema and the reader’s schema.*",
													],
													summary: [
														"Avro decodes data by resolving differences between compatible writer and reader schemas.",
													],
													longSummary: [
														"Avro allows applications to encode data using a writer's schema and decode it with a reader's schema, which need only be compatible, not identical. The Avro library resolves schema differences by comparing them and translating data accordingly. Fields are matched by name, allowing for different orders, and fields present in the writer's schema but absent in the reader's are ignored. Conversely, fields expected by the reader but missing from the writer's schema are filled with default values from the reader's schema. This flexibility ensures seamless data encoding and decoding across different schema versions.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280228/blog-cover-images/gnhxeh67qp2h7eyxog82.webp",
												},
												{
													heading: [
														"### **Schema evolution rules**",
													],
													children: [
														"With Avro, forward compatibility means that you can have a new version of the schema as writer and an old version of the schema as reader. Conversely, backward compatibility means that you can have a new version of the schema as reader and an old version as writer.",
														"To maintain compatibility, you may only add or remove a field that has a default value. (The field `favoriteNumber` in our Avro schema has a default value of `null`.) For example, say you add a field with a default value, so this new field exists in the new schema but not the old one. When a reader using the new schema reads a record written with the old schema, the default value is filled in for the missing field.",
														"If you were to add a field that has no default value, new readers wouldn’t be able to read data written by old writers, so you would break backward compatibility. If you were to remove a field that has no default value, old readers wouldn’t be able to read data written by new writers, so you would break forward compatibility.",
														"In some programming languages, `null` is an acceptable default for any variable, but this is not the case in Avro: if you want to allow a field to be null, you have to use a *union type*. For example, `union { null, long, string } field;` indicates that `field` can be a number, or a string, or null. You can only use `null` as a default value if it is one of the branches of the union.[iv]() This is a little more verbose than having everything nullable by default, but it helps prevent bugs by being explicit about what can and cannot be null \\[[22]()\\].",
														"Consequently, Avro doesn’t have `optional` and `required` markers in the same way as Protocol Buffers and Thrift do (it has union types and default values instead).",
														"Changing the datatype of a field is possible, provided that Avro can convert the type. Changing the name of a field is possible but a little tricky: the reader’s schema can contain aliases for field names, so it can match an old writer’s schema field names against the aliases. This means that changing a field name is backward compatible but not forward compatible. Similarly, adding a branch to a union type is backward compatible but not forward compatible.",
													],
													summary: [
														"Master Avro's schema evolution: compatibility through union types, default values, and strategic changes.",
													],
													longSummary: [
														"In Avro, forward compatibility uses a new schema for writing and an old one for reading, while backward compatibility does the opposite. Compatibility is maintained by adding or removing fields with default values. Default values fill in missing fields when reading old records. Null requires a union type and can only be a default if included in the union. Avro differs from Protocol Buffers and Thrift by using union types and default values. Field datatype changes are allowed if convertible, and aliases make field name changes backward compatible. Adding a branch to a union type is backward compatible but not forward compatible.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280227/blog-cover-images/eckuijfdwfzjqzwjcwxq.webp",
												},
												{
													heading: [
														"### **But what is the writer’s schema?**",
													],
													children: [
														"There is an important question that we’ve glossed over so far: how does the reader know the writer’s schema with which a particular piece of data was encoded? We can’t just include the entire schema with every record, because the schema would likely be much bigger than the encoded data, making all the space savings from the binary encoding futile.",
														"The answer depends on the context in which Avro is being used. To give a few examples:",
														[
															{
																heading: [
																	"Large file with lots of records",
																],
																children: [
																	"A common use for Avro—especially in the context of Hadoop—is for storing a large file containing millions of records, all encoded with the same schema. (We will discuss this kind of situation in [Chapter 10]().) In this case, the writer of that file can just include the writer’s schema once at the beginning of the file. Avro specifies a file format (object container files) to do this.",
																],
																summary: [
																	"Avro efficiently stores millions of records with a single schema in Hadoop.",
																],
																longSummary: [
																	"Avro is commonly used in Hadoop environments to store large files with millions of records, all encoded using the same schema. This is efficiently managed by including the writer's schema just once at the beginning of the file. Avro's file format, known as object container files, facilitates this process.",
																],
																imageUrl:
																	"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280240/blog-cover-images/qwd6mza9mobvyqsbwz88.webp",
															},
															{
																heading: [
																	"Database with individually written records",
																],
																children: [
																	"In a database, different records may be written at different points in time using different writer’s schemas—you cannot assume that all the records will have the same schema. The simplest solution is to include a version number at the beginning of every encoded record, and to keep a list of schema versions in your database. A reader can fetch a record, extract the version number, and then fetch the writer’s schema for that version number from the database. Using that writer’s schema, it can decode the rest of the record. (Espresso \\[[23]()\\] works this way, for example.)",
																],
																summary: [
																	"Ensure seamless data decoding by embedding version numbers in records for schema consistency.",
																],
																longSummary: [
																	"In databases, records may be written at different times with varying writer's schemas, leading to schema inconsistency. To address this, include a version number at the start of each encoded record and maintain a list of schema versions in your database. This allows a reader to fetch a record, extract its version number, retrieve the corresponding writer's schema, and decode the record accurately. Espresso [23] employs this method effectively.",
																],
																imageUrl:
																	"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280248/blog-cover-images/uv23efaysbryvem7xabu.webp",
															},
															{
																heading: [
																	"Sending records over a network connection",
																],
																children: [
																	"When two processes are communicating over a bidirectional network connection, they can negotiate the schema version on connection setup and then use that schema for the lifetime of the connection. The Avro RPC protocol (see [“Dataflow Through Services: REST and RPC”](blob:https://johnfactotum.github.io/f0f05437-95cb-4dc4-940e-bbb899f1ca94#sec_encoding_dataflow_rpc)) works like this.",
																	"A database of schema versions is a useful thing to have in any case, since it acts as documentation and gives you a chance to check schema compatibility \\[[24]()\\]. As the version number, you could use a simple incrementing integer, or you could use a hash of the schema.",
																],
																summary: [
																	"Processes negotiate schema versions for seamless communication, ensuring compatibility and documentation.",
																],
																longSummary: [
																	"When two processes communicate over a bidirectional network connection, they can negotiate the schema version during connection setup and use it for the connection's duration, similar to the Avro RPC protocol. Maintaining a database of schema versions serves as valuable documentation and helps ensure schema compatibility. The version number can be a straightforward incrementing integer or a hash of the schema.",
																],
																imageUrl:
																	"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280243/blog-cover-images/gn7pf8oyumxchdh1kfpc.webp",
															},
														],
													],
													summary: [
														"How does Avro manage schema consistency and space efficiency in data encoding?",
													],
													longSummary: [
														"When using Avro for data encoding, understanding the writer's schema is crucial, as including it with every record would negate space savings. In Hadoop, where large files with uniform schemas are common, the writer's schema is included once at the file's start using Avro's object container files. In databases, where records may have different schemas, a version number is included with each record, and a database of schema versions is maintained. This allows readers to fetch the correct schema for decoding. In network communications, schema negotiation occurs at connection setup. Schema versioning aids documentation and compatibility checks.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280228/blog-cover-images/zcziuew7xm3bco6z7qra.webp",
												},
												{
													heading: [
														"### **Dynamically generated schemas**",
													],
													children: [
														"One advantage of Avro’s approach, compared to Protocol Buffers and Thrift, is that the schema doesn’t contain any tag numbers. But why is this important? What’s the problem with keeping a couple of numbers in the schema?",
														"The difference is that Avro is friendlier to *dynamically generated* schemas. For example, say you have a relational database whose contents you want to dump to a file, and you want to use a binary format to avoid the aforementioned problems with textual formats (JSON, CSV, SQL). If you use Avro, you can fairly easily generate an Avro schema (in the JSON representation we saw earlier) from the relational schema and encode the database contents using that schema, dumping it all to an Avro object container file \\[[25]()\\]. You generate a record schema for each database table, and each column becomes a field in that record. The column name in the database maps to the field name in Avro.",
														"Now, if the database schema changes (for example, a table has one column added and one column removed), you can just generate a new Avro schema from the updated database schema and export data in the new Avro schema. The data export process does not need to pay any attention to the schema change—it can simply do the schema conversion every time it runs. Anyone who reads the new data files will see that the fields of the record have changed, but since the fields are identified by name, the updated writer’s schema can still be matched up with the old reader’s schema.",
														"By contrast, if you were using Thrift or Protocol Buffers for this purpose, the field tags would likely have to be assigned by hand: every time the database schema changes, an administrator would have to manually update the mapping from database column names to field tags. (It might be possible to automate this, but the schema generator would have to be very careful to not assign previously used field tags.) This kind of dynamically generated schema simply wasn’t a design goal of Thrift or Protocol Buffers, whereas it was for Avro.",
													],
													summary: [
														"Avro's tag-free schema simplifies dynamic database schema updates, unlike Protocol Buffers or Thrift.",
													],
													longSummary: [
														"Avro excels over Protocol Buffers and Thrift by eliminating the need for tag numbers in its schema, making it ideal for dynamic schema generation. This is especially beneficial when converting a relational database to a binary format, as Avro allows easy schema creation from relational schemas, with tables as record schemas and columns as fields. If the database schema changes, Avro can automatically generate a new schema since fields are identified by name. In contrast, Thrift and Protocol Buffers require manual tag assignment, lacking Avro's dynamic capabilities.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280228/blog-cover-images/w9onaeiwadlnk5wvpspt.webp",
												},
												{
													heading: [
														"### **Code generation and dynamically typed languages**",
													],
													children: [
														"Thrift and Protocol Buffers rely on code generation: after a schema has been defined, you can generate code that implements this schema in a programming language of your choice. This is useful in statically typed languages such as Java, C++, or C#, because it allows efficient in-memory structures to be used for decoded data, and it allows type checking and autocompletion in IDEs when writing programs that access the data structures.",
														"In dynamically typed programming languages such as JavaScript, Ruby, or Python, there is not much point in generating code, since there is no compile-time type checker to satisfy. Code generation is often frowned upon in these languages, since they otherwise avoid an explicit compilation step. Moreover, in the case of a dynamically generated schema (such as an Avro schema generated from a database table), code generation is an unnecessarily obstacle to getting to the data.",
														"Avro provides optional code generation for statically typed programming languages, but it can be used just as well without any code generation. If you have an object container file (which embeds the writer’s schema), you can simply open it using the Avro library and look at the data in the same way as you could look at a JSON file. The file is *self-describing* since it includes all the necessary metadata.",
														"This property is especially useful in conjunction with dynamically typed data processing languages like Apache Pig \\[[26]()\\]. In Pig, you can just open some Avro files, start analyzing them, and write derived datasets to output files in Avro format without even thinking about schemas.",
													],
													summary: [
														"Avro excels in dynamic languages, offering schema-free data access like JSON, unlike Thrift.",
													],
													longSummary: [
														"Thrift and Protocol Buffers are great for statically typed languages like Java, C++, or C# due to their schema-based code generation, which supports efficient structures, type checking, and IDE autocompletion. In contrast, dynamically typed languages like JavaScript, Ruby, or Python benefit less from this feature. Avro stands out with optional code generation for statically typed languages and excels in dynamically typed environments. Its self-describing nature simplifies data access, similar to JSON, and is ideal for schema-free data analysis in languages like Apache Pig.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280228/blog-cover-images/sra069qzy9axhtovjrop.webp",
												},
											],
										],
										summary: [
											"Avro: Compact binary encoding with schema evolution, ideal for dynamic data and Hadoop.",
										],
										longSummary: [
											"Apache Avro, developed in 2009 as a Hadoop subproject, is a binary encoding format using Avro IDL and JSON schemas for compact data encoding. It requires the reader to use the same schema as the writer but supports schema evolution by ensuring compatibility. Differences are resolved by comparing schemas, allowing reordering or ignoring fields, and filling missing fields with default values. Unlike Protocol Buffers and Thrift, Avro uses union types and default values, facilitating dynamic schema generation. Its self-describing nature suits dynamically typed languages, enabling data access without code generation.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280211/blog-cover-images/umnxdpvo9jnfrptmc4fl.webp",
									},
									{
										heading: [
											"## **The Merits of Schemas**",
										],
										children: [
											"As we saw, Protocol Buffers, Thrift, and Avro all use a schema to describe a binary encoding format. Their schema languages are much simpler than XML Schema or JSON Schema, which support much more detailed validation rules (e.g., “the string value of this field must match this regular expression” or “the integer value of this field must be between 0 and 100”). As Protocol Buffers, Thrift, and Avro are simpler to implement and simpler to use, they have grown to support a fairly wide range of programming languages.",
											"The ideas on which these encodings are based are by no means new. For example, they have a lot in common with ASN.1, a schema definition language that was first standardized in 1984 \\[[27]()\\]. It was used to define various network protocols, and its binary encoding (DER) is still used to encode SSL certificates (X.509), for example \\[[28]()\\]. ASN.1 supports schema evolution using tag numbers, similar to Protocol Buffers and Thrift \\[[29]()\\]. However, it’s also very complex and badly documented, so ASN.1 is probably not a good choice for new applications.",
											"Many data systems also implement some kind of proprietary binary encoding for their data. For example, most relational databases have a network protocol over which you can send queries to the database and get back responses. Those protocols are generally specific to a particular database, and the database vendor provides a driver (e.g., using the ODBC or JDBC APIs) that decodes responses from the database’s network protocol into in-memory data structures.",
											"So, we can see that although textual data formats such as JSON, XML, and CSV are widespread, binary encodings based on schemas are also a viable option. They have a number of nice properties:",
											"* They can be much more compact than the various “binary JSON” variants, since they can omit field names from the encoded data.",
											"* The schema is a valuable form of documentation, and because the schema is required for decoding, you can be sure that it is up to date (whereas manually maintained documentation may easily diverge from reality).",
											"* Keeping a database of schemas allows you to check forward and backward compatibility of schema changes, before anything is deployed.",
											"* For users of statically typed programming languages, the ability to generate code from the schema is useful, since it enables type checking at compile time.",
											"In summary, schema evolution allows the same kind of flexibility as schemaless/schema-on-read JSON databases provide (see [“Schema flexibility in the document model”]()), while also providing better guarantees about your data and better tooling.",
										],
										summary: [
											"Discover the power of schema-based binary encodings: compact, efficient, and versatile across languages.",
										],
										longSummary: [
											"Protocol Buffers, Thrift, and Avro utilize simpler schema languages compared to XML or JSON Schema, facilitating easier implementation and use across various programming languages. These concepts echo ASN.1 from 1984, though ASN.1 is complex and poorly documented. Many data systems also use proprietary binary encodings. While textual formats like JSON, XML, and CSV are prevalent, schema-based binary encodings offer significant advantages: they are more compact, provide up-to-date documentation, allow compatibility checks before deployment, and enable compile-time type checking through code generation. Schema evolution combines the flexibility of schemaless JSON databases with enhanced data guarantees and tooling.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280209/blog-cover-images/bqqpc6ty2b8efg32ky9x.webp",
									},
								],
							],
							summary: [
								"Explore the complexities of data encoding and serialization, from JSON to Protocol Buffers.",
							],
							longSummary: [
								"This book emphasizes encoding in-memory objects into byte sequences, highlighting limitations of built-in libraries like Java's Serializable, Ruby's Marshal, and Python's pickle, such as language specificity and inefficiency. While JSON and XML are common for data interchange, they are verbose. Binary formats like MessagePack, BSON, Apache Thrift, Protocol Buffers, and Avro offer compact solutions. Thrift and Protocol Buffers use schemas with numeric field tags for efficiency, while Avro supports schema evolution without tag numbers. These binary encodings are compact, compatible, and type-checked, making them ideal for large-scale data handling over textual formats.",
							],
							imageUrl:
								"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280199/blog-cover-images/wnekno4ur3qowzum1nsc.webp",
						},
						{
							heading: ["# **Modes of Dataflow**"],
							children: [
								"At the beginning of this chapter we said that whenever you want to send some data to another process with which you don’t share memory—for example, whenever you want to send data over the network or write it to a file—you need to encode it as a sequence of bytes. We then discussed a variety of different encodings for doing this.",
								"We talked about forward and backward compatibility, which are important for evolvability (making change easy by allowing you to upgrade different parts of your system independently, and not having to change everything at once). Compatibility is a relationship between one process that encodes the data, and another process that decodes it.",
								"That’s a fairly abstract idea—there are many ways data can flow from one process to another. Who encodes the data, and who decodes it? In the rest of this chapter we will explore some of the most common ways how data flows between processes:",
								"* Via databases (see [“Dataflow Through Databases”](blob:https://johnfactotum.github.io/f0f05437-95cb-4dc4-940e-bbb899f1ca94#sec_encoding_dataflow_db))",
								"* Via service calls (see [“Dataflow Through Services: REST and RPC”](blob:https://johnfactotum.github.io/f0f05437-95cb-4dc4-940e-bbb899f1ca94#sec_encoding_dataflow_rpc))",
								"* Via asynchronous message passing (see [“Message-Passing Dataflow”](blob:https://johnfactotum.github.io/f0f05437-95cb-4dc4-940e-bbb899f1ca94#sec_encoding_dataflow_msg))",
								[
									{
										heading: [
											"## **Dataflow Through Databases**",
										],
										children: [
											"In a database, the process that writes to the database encodes the data, and the process that reads from the database decodes it. There may just be a single process accessing the database, in which case the reader is simply a later version of the same process—in that case you can think of storing something in the database as *sending a message to your future self*.",
											"Backward compatibility is clearly necessary here; otherwise your future self won’t be able to decode what you previously wrote.",
											"In general, it’s common for several different processes to be accessing a database at the same time. Those processes might be several different applications or services, or they may simply be several instances of the same service (running in parallel for scalability or fault tolerance). Either way, in an environment where the application is changing, it is likely that some processes accessing the database will be running newer code and some will be running older code—for example because a new version is currently being deployed in a rolling upgrade, so some instances have been updated while others haven’t yet.",
											"This means that a value in the database may be written by a *newer* version of the code, and subsequently read by an *older* version of the code that is still running. Thus, forward compatibility is also often required for databases.",
											"However, there is an additional snag. Say you add a field to a record schema, and the newer code writes a value for that new field to the database. Subsequently, an older version of the code (which doesn’t yet know about the new field) reads the record, updates it, and writes it back. In this situation, the desirable behavior is usually for the old code to keep the new field intact, even though it couldn’t be interpreted.",
											"The encoding formats discussed previously support such preservation of unknown fields, but sometimes you need to take care at an application level, as illustrated in [Figure 4-7](blob:https://johnfactotum.github.io/f0f05437-95cb-4dc4-940e-bbb899f1ca94#fig_encoding_preserve_field). For example, if you decode a database value into model objects in the application, and later reencode those model objects, the unknown field might be lost in that translation process. Solving this is not a hard problem; you just need to be aware of it.",
											"![ddia 0407](blob:https://johnfactotum.github.io/610ec1b2-7b21-4132-b1dd-51b4ce7b2ceb)",
											"###### *Figure 4-7. When an older version of the application updates data previously written by a newer version of the application, data may be lost if you’re not careful.*",
											"### **Different values written at different times**",
											"A database generally allows any value to be updated at any time. This means that within a single database you may have some values that were written five milliseconds ago, and some values that were written five years ago.",
											"When you deploy a new version of your application (of a server-side application, at least), you may entirely replace the old version with the new version within a few minutes. The same is not true of database contents: the five-year-old data will still be there, in the original encoding, unless you have explicitly rewritten it since then. This observation is sometimes summed up as *data outlives code*.",
											"Rewriting (*migrating*) data into a new schema is certainly possible, but it’s an expensive thing to do on a large dataset, so most databases avoid it if possible. Most relational databases allow simple schema changes, such as adding a new column with a `null` default value, without rewriting existing data.[v]() When an old row is read, the database fills in `null`s for any columns that are missing from the encoded data on disk. LinkedIn’s document database Espresso uses Avro for storage, allowing it to use Avro’s schema evolution rules \\[[23]()\\].",
											"Schema evolution thus allows the entire database to appear as if it was encoded with a single schema, even though the underlying storage may contain records encoded with various historical versions of the schema.",
											[
												{
													heading: [
														"### **Archival storage**",
													],
													children: [
														"Perhaps you take a snapshot of your database from time to time, say for backup purposes or for loading into a data warehouse (see [“Data Warehousing”]()). In this case, the data dump will typically be encoded using the latest schema, even if the original encoding in the source database contained a mixture of schema versions from different eras. Since you’re copying the data anyway, you might as well encode the copy of the data consistently.",
														"As the data dump is written in one go and is thereafter immutable, formats like Avro object container files are a good fit. This is also a good opportunity to encode the data in an analytics-friendly column-oriented format such as Parquet (see [“Column Compression”]()).",
														"In [Chapter 10]() we will talk more about using data in archival storage.",
													],
													summary: [
														"Capture your database consistently with Avro or Parquet for efficient archival storage.",
													],
													longSummary: [
														"When taking snapshots of your database for backups or loading into a data warehouse, it's common to encode the data dump using the latest schema, even if the source database had mixed schema versions. Since you're already copying the data, ensure consistent encoding. As the data dump is immutable once written, formats like Avro object container files are suitable. Additionally, consider encoding the data in an analytics-friendly column-oriented format like Parquet. More on using data in archival storage will be discussed in Chapter 10.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280220/blog-cover-images/scbpbfa56mffftp7lqpk.webp",
												},
											],
										],
										summary: [
											"Database evolution: balancing backward and forward compatibility for seamless data access across versions.",
										],
										longSummary: [
											"In databases, writing processes encode data while reading processes decode it, requiring backward compatibility. Forward compatibility is crucial during simultaneous access, especially with application updates, as newer code may write data that older code must read. When older code updates newer data, it should preserve unknown fields, demanding careful handling. Data often outlasts code, making schema rewrites costly for large datasets. Schema evolution allows databases to appear as if encoded with a single schema. For backups or data warehouse loading, data dumps use the latest schema, employing formats like Avro or Parquet for consistency and analytics efficiency.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280210/blog-cover-images/hmgna1qc2yzrc0cxbi8b.webp",
									},
									{
										heading: [
											"## **Dataflow Through Services: REST and RPC**",
										],
										children: [
											"When you have processes that need to communicate over a network, there are a few different ways of arranging that communication. The most common arrangement is to have two roles: *clients* and *servers*. The servers expose an API over the network, and the clients can connect to the servers to make requests to that API. The API exposed by the server is known as a *service*.",
											"The web works this way: clients (web browsers) make requests to web servers, making `GET` requests to download HTML, CSS, JavaScript, images, etc., and making `POST` requests to submit data to the server. The API consists of a standardized set of protocols and data formats (HTTP, URLs, SSL/TLS, HTML, etc.). Because web browsers, web servers, and website authors mostly agree on these standards, you can use any web browser to access any website (at least in theory!).",
											"Web browsers are not the only type of client. For example, a native app running on a mobile device or a desktop computer can also make network requests to a server, and a client-side JavaScript application running inside a web browser can use XMLHttpRequest to become an HTTP client (this technique is known as *Ajax* \\[[30]()\\]). In this case, the server’s response is typically not HTML for displaying to a human, but rather data in an encoding that is convenient for further processing by the client-side application code (such as JSON). Although HTTP may be used as the transport protocol, the API implemented on top is application-specific, and the client and server need to agree on the details of that API.",
											"Moreover, a server can itself be a client to another service (for example, a typical web app server acts as client to a database). This approach is often used to decompose a large application into smaller services by area of functionality, such that one service makes a request to another when it requires some functionality or data from that other service. This way of building applications has traditionally been called a *service-oriented architecture* (SOA), more recently refined and rebranded as *microservices architecture* \\[[31](), [32]()\\].",
											"In some ways, services are similar to databases: they typically allow clients to submit and query data. However, while databases allow arbitrary queries using the query languages we discussed in [Chapter 2](), services expose an application-specific API that only allows inputs and outputs that are predetermined by the business logic (application code) of the service \\[[33]()\\]. This restriction provides a degree of encapsulation: services can impose fine-grained restrictions on what clients can and cannot do.",
											"A key design goal of a service-oriented/microservices architecture is to make the application easier to change and maintain by making services independently deployable and evolvable. For example, each service should be owned by one team, and that team should be able to release new versions of the service frequently, without having to coordinate with other teams. In other words, we should expect old and new versions of servers and clients to be running at the same time, and so the data encoding used by servers and clients must be compatible across versions of the service API—precisely what we’ve been talking about in this chapter.",
											[
												{
													heading: [
														"### **Web services**",
													],
													children: [
														"When HTTP is used as the underlying protocol for talking to the service, it is called a *web service*. This is perhaps a slight misnomer, because web services are not only used on the web, but in several different contexts. For example:",
														"1. A client application running on a user’s device (e.g., a native app on a mobile device, or JavaScript web app using Ajax) making requests to a service over HTTP. These requests typically go over the public internet.",
														"2. One service making requests to another service owned by the same organization, often located within the same datacenter, as part of a service-oriented/microservices architecture. (Software that supports this kind of use case is sometimes called *middleware*.)",
														"3. One service making requests to a service owned by a different organization, usually via the internet. This is used for data exchange between different organizations’ backend systems. This category includes public APIs provided by online services, such as credit card processing systems, or OAuth for shared access to user data.",
														"There are two popular approaches to web services: *REST* and *SOAP*. They are almost diametrically opposed in terms of philosophy, and often the subject of heated debate among their respective proponents.[vi]()",
														"REST is not a protocol, but rather a design philosophy that builds upon the principles of HTTP \\[[34](), [35]()\\]. It emphasizes simple data formats, using URLs for identifying resources and using HTTP features for cache control, authentication, and content type negotiation. REST has been gaining popularity compared to SOAP, at least in the context of cross-organizational service integration \\[[36]()\\], and is often associated with microservices \\[[31]()\\]. An API designed according to the principles of REST is called *RESTful*.",
														"By contrast, SOAP is an XML-based protocol for making network API requests.[vii]() Although it is most commonly used over HTTP, it aims to be independent from HTTP and avoids using most HTTP features. Instead, it comes with a sprawling and complex multitude of related standards (the *web service framework*, known as *WS-\\**) that add various features \\[[37]()\\].",
														"The API of a SOAP web service is described using an XML-based language called the Web Services Description Language, or WSDL. WSDL enables code generation so that a client can access a remote service using local classes and method calls (which are encoded to XML messages and decoded again by the framework). This is useful in statically typed programming languages, but less so in dynamically typed ones (see [“Code generation and dynamically typed languages”](blob:https://johnfactotum.github.io/f0f05437-95cb-4dc4-940e-bbb899f1ca94#sec_encoding_code_generation)).",
														"As WSDL is not designed to be human-readable, and as SOAP messages are often too complex to construct manually, users of SOAP rely heavily on tool support, code generation, and IDEs \\[[38]()\\]. For users of programming languages that are not supported by SOAP vendors, integration with SOAP services is difficult.",
														"Even though SOAP and its various extensions are ostensibly standardized, interoperability between different vendors’ implementations often causes problems \\[[39]()\\]. For all of these reasons, although SOAP is still used in many large enterprises, it has fallen out of favor in most smaller companies.",
														"RESTful APIs tend to favor simpler approaches, typically involving less code generation and automated tooling. A definition format such as OpenAPI, also known as Swagger \\[[40]()\\], can be used to describe RESTful APIs and produce documentation.",
													],
													summary: [
														"Discover the clash of REST and SOAP: simplicity versus complexity in web services.",
													],
													longSummary: [
														"When HTTP is used for communication, it's called a web service, useful for client apps, intra-organization middleware, and inter-organization data exchange. REST and SOAP are two popular web service approaches. REST, based on HTTP, is simple and uses URLs for resource identification, ideal for microservices and integration. SOAP, an XML-based protocol, is independent of HTTP and requires complex standards and tools. While SOAP is still used by large enterprises, its complexity has led smaller companies to prefer RESTful APIs, which use simpler documentation formats like OpenAPI/Swagger.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280232/blog-cover-images/bebhg4r6khio88ycwumx.webp",
												},
												{
													heading: [
														"### **The problems with remote procedure calls (RPCs)**",
													],
													children: [
														"Web services are merely the latest incarnation of a long line of technologies for making API requests over a network, many of which received a lot of hype but have serious problems. Enterprise JavaBeans (EJB) and Java’s Remote Method Invocation (RMI) are limited to Java. The Distributed Component Object Model (DCOM) is limited to Microsoft platforms. The Common Object Request Broker Architecture (CORBA) is excessively complex, and does not provide backward or forward compatibility \\[[41]()\\].",
														"All of these are based on the idea of a *remote procedure call* (RPC), which has been around since the 1970s \\[[42]()\\]. The RPC model tries to make a request to a remote network service look the same as calling a function or method in your programming language, within the same process (this abstraction is called *location transparency*). Although RPC seems convenient at first, the approach is fundamentally flawed \\[[43](), [44]()\\]. A network request is very different from a local function call:",
														"* A local function call is predictable and either succeeds or fails, depending only on parameters that are under your control. A network request is unpredictable: the request or response may be lost due to a network problem, or the remote machine may be slow or unavailable, and such problems are entirely outside of your control. Network problems are common, so you have to anticipate them, for example by retrying a failed request.",
														"* A local function call either returns a result, or throws an exception, or never returns (because it goes into an infinite loop or the process crashes). A network request has another possible outcome: it may return without a result, due to a *timeout*. In that case, you simply don’t know what happened: if you don’t get a response from the remote service, you have no way of knowing whether the request got through or not. (We discuss this issue in more detail in [Chapter 8]().)",
														"* If you retry a failed network request, it could happen that the requests are actually getting through, and only the responses are getting lost. In that case, retrying will cause the action to be performed multiple times, unless you build a mechanism for deduplication (*idempotence*) into the protocol. Local function calls don’t have this problem. (We discuss idempotence in more detail in [Chapter 11]().)",
														"* Every time you call a local function, it normally takes about the same time to execute. A network request is much slower than a function call, and its latency is also wildly variable: at good times it may complete in less than a millisecond, but when the network is congested or the remote service is overloaded it may take many seconds to do exactly the same thing.",
														"* When you call a local function, you can efficiently pass it references (pointers) to objects in local memory. When you make a network request, all those parameters need to be encoded into a sequence of bytes that can be sent over the network. That’s okay if the parameters are primitives like numbers or strings, but quickly becomes problematic with larger objects.",
														"* The client and the service may be implemented in different programming languages, so the RPC framework must translate datatypes from one language into another. This can end up ugly, since not all languages have the same types—recall JavaScript’s problems with numbers greater than 253, for example (see [“JSON, XML, and Binary Variants”](blob:https://johnfactotum.github.io/f0f05437-95cb-4dc4-940e-bbb899f1ca94#sec_encoding_json)). This problem doesn’t exist in a single process written in a single language.",
														"All of these factors mean that there’s no point trying to make a remote service look too much like a local object in your programming language, because it’s a fundamentally different thing. Part of the appeal of REST is that it doesn’t try to hide the fact that it’s a network protocol (although this doesn’t seem to stop people from building RPC libraries on top of REST).",
													],
													summary: [
														"REST embraces network protocol nature, unlike flawed RPC attempts to mimic local function calls.",
													],
													longSummary: [
														"Web services, based on the remote procedure call (RPC) model, aim to make remote service requests resemble local function calls. However, this approach is flawed because network requests differ from local calls in several ways: they are unpredictable due to network issues, can time out without results, may cause duplicate actions when retried, have variable latency, require parameter encoding, and face language compatibility challenges. These differences highlight the futility of making remote services appear as local objects. REST's appeal lies in its transparency, as it doesn't disguise its nature as a network protocol.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280236/blog-cover-images/plvlif7efq2ajh4mbsxe.webp",
												},
												{
													heading: [
														"### **Current directions for RPC**",
													],
													children: [
														"Despite all these problems, RPC isn’t going away. Various RPC frameworks have been built on top of all the encodings mentioned in this chapter: for example, Thrift and Avro come with RPC support included, gRPC is an RPC implementation using Protocol Buffers, Finagle also uses Thrift, and Rest.li uses JSON over HTTP.",
														"This new generation of RPC frameworks is more explicit about the fact that a remote request is different from a local function call. For example, Finagle and Rest.li use *futures* (*promises*) to encapsulate asynchronous actions that may fail. Futures also simplify situations where you need to make requests to multiple services in parallel, and combine their results \\[[45]()\\]. gRPC supports *streams*, where a call consists of not just one request and one response, but a series of requests and responses over time \\[[46]()\\].",
														"Some of these frameworks also provide *service discovery*—that is, allowing a client to find out at which IP address and port number it can find a particular service. We will return to this topic in [“Request Routing”]().",
														"Custom RPC protocols with a binary encoding format can achieve better performance than something generic like JSON over REST. However, a RESTful API has other significant advantages: it is good for experimentation and debugging (you can simply make requests to it using a web browser or the command-line tool `curl`, without any code generation or software installation), it is supported by all mainstream programming languages and platforms, and there is a vast ecosystem of tools available (servers, caches, load balancers, proxies, firewalls, monitoring, debugging tools, testing tools, etc.).",
														"For these reasons, REST seems to be the predominant style for public APIs. The main focus of RPC frameworks is on requests between services owned by the same organization, typically within the same datacenter.",
													],
													summary: [
														"Modern RPC frameworks thrive with diverse encodings, while REST dominates public APIs for flexibility.",
													],
													longSummary: [
														"Despite its challenges, RPC remains relevant with frameworks like Thrift, Avro, gRPC, Finagle, and Rest.li, each using different encodings such as Protocol Buffers and JSON over HTTP. Modern RPC frameworks recognize the distinction between remote requests and local calls, employing futures and streams for handling asynchronous actions and multiple requests. Some offer service discovery for locating services. While custom RPC protocols with binary encoding outperform JSON over REST, RESTful APIs excel in experimentation, debugging, language support, and tooling, leading to their dominance in public APIs. In contrast, RPC frameworks are mainly used for internal service requests within organizations.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280237/blog-cover-images/f1no1ojf0lvspdarzr6i.webp",
												},
												{
													heading: [
														"### **Data encoding and evolution for RPC**",
													],
													children: [
														"For evolvability, it is important that RPC clients and servers can be changed and deployed independently. Compared to data flowing through databases (as described in the last section), we can make a simplifying assumption in the case of dataflow through services: it is reasonable to assume that all the servers will be updated first, and all the clients second. Thus, you only need backward compatibility on requests, and forward compatibility on responses.",
														"The backward and forward compatibility properties of an RPC scheme are inherited from whatever encoding it uses:",
														"* Thrift, gRPC (Protocol Buffers), and Avro RPC can be evolved according to the compatibility rules of the respective encoding format.",
														"* In SOAP, requests and responses are specified with XML schemas. These can be evolved, but there are some subtle pitfalls \\[[47]()\\].",
														"* RESTful APIs most commonly use JSON (without a formally specified schema) for responses, and JSON or URI-encoded/form-encoded request parameters for requests. Adding optional request parameters and adding new fields to response objects are usually considered changes that maintain compatibility.",
														"Service compatibility is made harder by the fact that RPC is often used for communication across organizational boundaries, so the provider of a service often has no control over its clients and cannot force them to upgrade. Thus, compatibility needs to be maintained for a long time, perhaps indefinitely. If a compatibility-breaking change is required, the service provider often ends up maintaining multiple versions of the service API side by side.",
														"There is no agreement on how API versioning should work (i.e., how a client can indicate which version of the API it wants to use \\[[48]()\\]). For RESTful APIs, common approaches are to use a version number in the URL or in the HTTP `Accept` header. For services that use API keys to identify a particular client, another option is to store a client’s requested API version on the server and to allow this version selection to be updated through a separate administrative interface \\[[49]()\\].",
													],
													summary: [
														"RPC clients and servers must evolve independently, maintaining backward and forward compatibility across updates.",
													],
													longSummary: [
														"For RPC evolvability, clients and servers must change independently, with servers updated first for backward and forward compatibility. Compatibility relies on encoding: Thrift, gRPC, and Avro RPC have specific rules, SOAP uses XML schemas, and RESTful APIs use JSON, allowing optional parameters and new fields. Service compatibility is complex due to organizational boundaries, requiring indefinite compatibility or multiple API versions. API versioning varies: RESTful APIs use version numbers in URLs or HTTP headers, while API key services may store client version preferences on the server.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280237/blog-cover-images/b7vmadnhhm2ginghy3iz.webp",
												},
											],
										],
										summary: [
											"Explore the evolving landscape of web services: REST vs. SOAP, RPC challenges, and compatibility.",
										],
										longSummary: [
											"Network communication involves clients and servers, with servers exposing APIs. Browsers, mobile apps, and JavaScript applications act as clients, often receiving JSON data. Servers can also be clients, forming service-oriented architectures (SOA) or microservices for easier maintenance. Web services use HTTP for communication, with REST and SOAP as popular methods. REST is favored for its simplicity and flexibility, especially in microservices, while SOAP is complex and less popular in smaller companies. RPC models like gRPC and Thrift persist despite their flaws. RESTful APIs dominate public APIs, while RPC frameworks are used internally. Compatibility and API versioning are crucial for evolvability.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280218/blog-cover-images/lwfecfme9ka5jlstfzxj.webp",
									},
									{
										heading: [
											"## **Message-Passing Dataflow**",
										],
										children: [
											"We have been looking at the different ways encoded data flows from one process to another. So far, we’ve discussed REST and RPC (where one process sends a request over the network to another process and expects a response as quickly as possible), and databases (where one process writes encoded data, and another process reads it again sometime in the future).",
											"In this final section, we will briefly look at *asynchronous message-passing* systems, which are somewhere between RPC and databases. They are similar to RPC in that a client’s request (usually called a *message*) is delivered to another process with low latency. They are similar to databases in that the message is not sent via a direct network connection, but goes via an intermediary called a *message broker* (also called a *message queue* or *message-oriented middleware*), which stores the message temporarily.",
											"Using a message broker has several advantages compared to direct RPC:",
											"* It can act as a buffer if the recipient is unavailable or overloaded, and thus improve system reliability.",
											"* It can automatically redeliver messages to a process that has crashed, and thus prevent messages from being lost.",
											"* It avoids the sender needing to know the IP address and port number of the recipient (which is particularly useful in a cloud deployment where virtual machines often come and go).",
											"* It allows one message to be sent to several recipients.",
											"* It logically decouples the sender from the recipient (the sender just publishes messages and doesn’t care who consumes them).",
											"However, a difference compared to RPC is that message-passing communication is usually one-way: a sender normally doesn’t expect to receive a reply to its messages. It is possible for a process to send a response, but this would usually be done on a separate channel. This communication pattern is *asynchronous*: the sender doesn’t wait for the message to be delivered, but simply sends it and then forgets about it.",
											[
												{
													heading: [
														"### **Message brokers**",
													],
													children: [
														"In the past, the landscape of message brokers was dominated by commercial enterprise software from companies such as TIBCO, IBM WebSphere, and webMethods. More recently, open source implementations such as RabbitMQ, ActiveMQ, HornetQ, NATS, and Apache Kafka have become popular. We will compare them in more detail in [Chapter 11]().",
														"The detailed delivery semantics vary by implementation and configuration, but in general, message brokers are used as follows: one process sends a message to a named *queue* or *topic*, and the broker ensures that the message is delivered to one or more *consumers* of or *subscribers* to that queue or topic. There can be many producers and many consumers on the same topic.",
														"A topic provides only one-way dataflow. However, a consumer may itself publish messages to another topic (so you can chain them together, as we shall see in [Chapter 11]()), or to a reply queue that is consumed by the sender of the original message (allowing a request/response dataflow, similar to RPC).",
														"Message brokers typically don’t enforce any particular data model—a message is just a sequence of bytes with some metadata, so you can use any encoding format. If the encoding is backward and forward compatible, you have the greatest flexibility to change publishers and consumers independently and deploy them in any order.",
														"If a consumer republishes messages to another topic, you may need to be careful to preserve unknown fields, to prevent the issue described previously in the context of databases ([Figure 4-7](blob:https://johnfactotum.github.io/f0f05437-95cb-4dc4-940e-bbb899f1ca94#fig_encoding_preserve_field)).",
													],
													summary: [
														"Open-source message brokers like RabbitMQ and Kafka now rival traditional enterprise solutions.",
													],
													longSummary: [
														"Message brokers, once dominated by TIBCO and IBM WebSphere, now see popular open-source options like RabbitMQ and Apache Kafka. They facilitate communication by sending messages to queues or topics, ensuring delivery to consumers. Topics allow one-way data flow, but consumers can publish to other topics or reply queues for request/response flows like RPC. Brokers don't enforce a data model, allowing messages as byte sequences with metadata in any format. While using compatible encoding offers flexibility, it's important to preserve unknown fields when republishing messages.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280237/blog-cover-images/mhyw5mq9yjhaelmqeoso.webp",
												},
												{
													heading: [
														"### **Distributed actor frameworks**",
													],
													children: [
														"The *actor model* is a programming model for concurrency in a single process. Rather than dealing directly with threads (and the associated problems of race conditions, locking, and deadlock), logic is encapsulated in *actors*. Each actor typically represents one client or entity, it may have some local state (which is not shared with any other actor), and it communicates with other actors by sending and receiving asynchronous messages. Message delivery is not guaranteed: in certain error scenarios, messages will be lost. Since each actor processes only one message at a time, it doesn’t need to worry about threads, and each actor can be scheduled independently by the framework.",
														"In *distributed actor frameworks*, this programming model is used to scale an application across multiple nodes. The same message-passing mechanism is used, no matter whether the sender and recipient are on the same node or different nodes. If they are on different nodes, the message is transparently encoded into a byte sequence, sent over the network, and decoded on the other side.",
														"Location transparency works better in the actor model than in RPC, because the actor model already assumes that messages may be lost, even within a single process. Although latency over the network is likely higher than within the same process, there is less of a fundamental mismatch between local and remote communication when using the actor model.",
														"A distributed actor framework essentially integrates a message broker and the actor programming model into a single framework. However, if you want to perform rolling upgrades of your actor-based application, you still have to worry about forward and backward compatibility, as messages may be sent from a node running the new version to a node running the old version, and vice versa.",
														"Three popular distributed actor frameworks handle message encoding as follows:",
														"* *Akka* uses Java’s built-in serialization by default, which does not provide forward or backward compatibility. However, you can replace it with something like Protocol Buffers, and thus gain the ability to do rolling upgrades \\[[50]()\\].",
														"* *Orleans* by default uses a custom data encoding format that does not support rolling upgrade deployments; to deploy a new version of your application, you need to set up a new cluster, move traffic from the old cluster to the new one, and shut down the old one \\[[51](), [52]()\\]. Like with Akka, custom serialization plug-ins can be used.",
														"* In *Erlang OTP* it is surprisingly hard to make changes to record schemas (despite the system having many features designed for high availability); rolling upgrades are possible but need to be planned carefully \\[[53]()\\]. An experimental new `maps` datatype (a JSON-like structure, introduced in Erlang R17 in 2014) may make this easier in the future \\[[54]()\\].",
													],
													summary: [
														"Explore how distributed actor frameworks enhance concurrency and scalability across multiple nodes.",
													],
													longSummary: [
														"The actor model is a concurrency programming model where logic is encapsulated in actors with local state, communicating via asynchronous messages. In distributed frameworks, this model scales across nodes, with messages encoded and sent over networks when actors are on different nodes. It offers better location transparency than RPC by assuming potential message loss. A distributed actor framework combines a message broker with the actor model, emphasizing compatibility for upgrades. Akka uses Java serialization or Protocol Buffers; Orleans employs a custom format requiring new clusters for upgrades; Erlang OTP faces challenges with schema changes, though its maps datatype may help.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280238/blog-cover-images/e0tdul3kd2ux2ghtwpaq.webp",
												},
											],
										],
										summary: [
											"Explore how message brokers blend RPC and databases, enhancing asynchronous communication and scalability.",
										],
										longSummary: [
											"Asynchronous message-passing systems combine low-latency delivery with temporary storage via message brokers, bridging RPC and databases. They buffer messages for unavailable recipients, redeliver to crashed processes, and decouple senders from recipients, allowing one message to reach multiple recipients. Unlike RPC, this method is one-way and asynchronous. While once dominated by commercial software, open-source brokers like RabbitMQ and Apache Kafka are now popular. Brokers deliver messages to queues or topics, supporting flexible data encoding and request/response flows. Distributed actor frameworks like Akka, Orleans, and Erlang OTP scale across nodes, handling message encoding differently.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280219/blog-cover-images/eibiru9kw3bufrlp22ol.webp",
									},
								],
							],
							summary: [
								"Unlock the secrets of data encoding for seamless communication across networks, databases, and services.",
							],
							longSummary: [
								"To send data without shared memory, encode it as a byte sequence. This chapter covers dataflow methods like databases, REST and RPC service calls, and asynchronous message passing. Compatibility is key for system updates; databases need backward and forward compatibility. RESTful APIs use JSON and OpenAPI, while SOAP is used in large enterprises. RPC frameworks like gRPC and Thrift handle network differences with asynchronous handling. Asynchronous systems like RabbitMQ and Apache Kafka buffer messages, decoupling senders and recipients. The actor model, used in distributed systems, uses frameworks like Akka and Erlang OTP for message encoding.",
							],
							imageUrl:
								"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280200/blog-cover-images/ojnyze3tbgeobdrdxqwg.webp",
						},
						{
							heading: ["# **Summary**"],
							children: [
								"In this chapter we looked at several ways of turning data structures into bytes on the network or bytes on disk. We saw how the details of these encodings affect not only their efficiency, but more importantly also the architecture of applications and your options for deploying them.",
								"In particular, many services need to support rolling upgrades, where a new version of a service is gradually deployed to a few nodes at a time, rather than deploying to all nodes simultaneously. Rolling upgrades allow new versions of a service to be released without downtime (thus encouraging frequent small releases over rare big releases) and make deployments less risky (allowing faulty releases to be detected and rolled back before they affect a large number of users). These properties are hugely beneficial for *evolvability*, the ease of making changes to an application.",
								"During rolling upgrades, or for various other reasons, we must assume that different nodes are running the different versions of our application’s code. Thus, it is important that all data flowing around the system is encoded in a way that provides backward compatibility (new code can read old data) and forward compatibility (old code can read new data).",
								"We discussed several data encoding formats and their compatibility properties:",
								"* Programming language–specific encodings are restricted to a single programming language and often fail to provide forward and backward compatibility.",
								"* Textual formats like JSON, XML, and CSV are widespread, and their compatibility depends on how you use them. They have optional schema languages, which are sometimes helpful and sometimes a hindrance. These formats are somewhat vague about datatypes, so you have to be careful with things like numbers and binary strings.",
								"* Binary schema–driven formats like Thrift, Protocol Buffers, and Avro allow compact, efficient encoding with clearly defined forward and backward compatibility semantics. The schemas can be useful for documentation and code generation in statically typed languages. However, they have the downside that data needs to be decoded before it is human-readable.",
								"We also discussed several modes of dataflow, illustrating different scenarios in which data encodings are important:",
								"* Databases, where the process writing to the database encodes the data and the process reading from the database decodes it",
								"* RPC and REST APIs, where the client encodes a request, the server decodes the request and encodes a response, and the client finally decodes the response",
								"* Asynchronous message passing (using message brokers or actors), where nodes communicate by sending each other messages that are encoded by the sender and decoded by the recipient",
								"We can conclude that with a bit of care, backward/forward compatibility and rolling upgrades are quite achievable. May your application’s evolution be rapid and your deployments be frequent.",
								"##### **Footnotes**",
								"[i]() With the exception of some special cases, such as certain memory-mapped files or when operating directly on compressed data (as described in [“Column Compression”]()).",
								"[ii]() Note that *encoding* has nothing to do with *encryption*. We don’t discuss encryption in this book.",
								"[iii]() Actually, it has three—BinaryProtocol, CompactProtocol, and DenseProtocol—although DenseProtocol is only supported by the C++ implementation, so it doesn’t count as cross-language \\[[18]()\\]. Besides those, it also has two different JSON-based encoding formats \\[[19]()\\]. What fun!",
								"[iv]() To be precise, the default value must be of the type of the *first* branch of the union, although this is a specific limitation of Avro, not a general feature of union types.",
								"[v]() Except for MySQL, which often rewrites an entire table even though it is not strictly necessary, as mentioned in [“Schema flexibility in the document model”]().",
								"[vi]() Even within each camp there are plenty of arguments. For example, HATEOAS (*hypermedia as the engine of application state*), often provokes discussions \\[[35]()\\].",
								"[vii]() Despite the similarity of acronyms, SOAP is not a requirement for SOA. SOAP is a particular technology, whereas SOA is a general approach to building systems.",
								"##### **References**",
								"\\[[1]()\\] “[Java Object Serialization Specification](http://docs.oracle.com/javase/7/docs/platform/serialization/spec/serialTOC.html),” *docs.oracle.com*, 2010.",
								"\\[[2]()\\] “[Ruby 2.2.0 API Documentation](http://ruby-doc.org/core-2.2.0/),” *ruby-doc.org*, Dec 2014.",
								"\\[[3]()\\] “[The Python 3.4.3 Standard Library Reference Manual](https://docs.python.org/3/library/pickle.html),” *docs.python.org*, February 2015.",
								"\\[[4]()\\] “[EsotericSoftware/kryo](https://github.com/EsotericSoftware/kryo),” *github.com*, October 2014.",
								"\\[[5]()\\] “[CWE-502: Deserialization of Untrusted Data](http://cwe.mitre.org/data/definitions/502.html),” Common Weakness Enumeration, *cwe.mitre.org*, July 30, 2014.",
								"\\[[6]()\\] Steve Breen: “[What Do WebLogic, WebSphere, JBoss, Jenkins, OpenNMS, and Your Application Have in Common? This Vulnerability](http://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/),” *foxglovesecurity.com*, November 6, 2015.",
								"\\[[7]()\\] Patrick McKenzie: “[What the Rails Security Issue Means for Your Startup](http://www.kalzumeus.com/2013/01/31/what-the-rails-security-issue-means-for-your-startup/),” *kalzumeus.com*, January 31, 2013.",
								"\\[[8]()\\] Eishay Smith: “[jvm-serializers wiki](https://github.com/eishay/jvm-serializers/wiki),” *github.com*, November 2014.",
								"\\[[9]()\\] “[XML Is a Poor Copy of S-Expressions](http://c2.com/cgi/wiki?XmlIsaPoorCopyOfEssExpressions),” *c2.com* wiki.",
								"\\[[10]()\\] Matt Harris: “[Snowflake: An Update and Some Very Important Information](https://groups.google.com/forum/#!topic/twitter-development-talk/ahbvo3VTIYI),” email to *Twitter Development Talk* mailing list, October 19, 2010.",
								"\\[[11]()\\] Shudi (Sandy) Gao, C. M. Sperberg-McQueen, and Henry S. Thompson: “[XML Schema 1.1](http://www.w3.org/XML/Schema),” W3C Recommendation, May 2001.",
								"\\[[12]()\\] Francis Galiegue, Kris Zyp, and Gary Court: “[JSON Schema](http://json-schema.org/),” IETF Internet-Draft, February 2013.",
								"\\[[13]()\\] Yakov Shafranovich: “[RFC 4180: Common Format and MIME Type for Comma-Separated Values (CSV) Files](https://tools.ietf.org/html/rfc4180),” October 2005.",
								"\\[[14]()\\] “[MessagePack Specification](http://msgpack.org/),” *msgpack.org*.",
								"\\[[15]()\\] Mark Slee, Aditya Agarwal, and Marc Kwiatkowski: “[Thrift: Scalable Cross-Language Services Implementation](http://thrift.apache.org/static/files/thrift-20070401.pdf),” Facebook technical report, April 2007.",
								"\\[[16]()\\] “[Protocol Buffers Developer Guide](https://developers.google.com/protocol-buffers/docs/overview),” Google, Inc., *developers.google.com*.",
								"\\[[17]()\\] Igor Anishchenko: “[Thrift vs Protocol Buffers vs Avro - Biased Comparison](http://www.slideshare.net/IgorAnishchenko/pb-vs-thrift-vs-avro),” *slideshare.net*, September 17, 2012.",
								"\\[[18]()\\] “[A Matrix of the Features Each Individual Language Library Supports](http://wiki.apache.org/thrift/LibraryFeatures),” *wiki.apache.org*.",
								"\\[[19]()\\] Martin Kleppmann: “[Schema Evolution in Avro, Protocol Buffers and Thrift](http://martin.kleppmann.com/2012/12/05/schema-evolution-in-avro-protocol-buffers-thrift.html),” *martin.kleppmann.com*, December 5, 2012.",
								"\\[[20]()\\] “[Apache Avro 1.7.7 Documentation](http://avro.apache.org/docs/1.7.7/),” *avro.apache.org*, July 2014.",
								"\\[[21]()\\] Doug Cutting, Chad Walters, Jim Kellerman, et al.: “[\\[PROPOSAL\\] New Subproject: Avro](http://mail-archives.apache.org/mod_mbox/hadoop-general/200904.mbox/%3C49D53694.1050906@apache.org%3E),” email thread on *hadoop-general* mailing list, *mail-archives.apache.org*, April 2009.",
								"\\[[22]()\\] Tony Hoare: “[Null References: The Billion Dollar Mistake](http://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare),” at *QCon London*, March 2009.",
								"\\[[23]()\\] Aditya Auradkar and Tom Quiggle: “[Introducing Espresso—LinkedIn’s Hot New Distributed Document Store](https://engineering.linkedin.com/espresso/introducing-espresso-linkedins-hot-new-distributed-document-store),” *engineering.linkedin.com*, January 21, 2015.",
								"\\[[24]()\\] Jay Kreps: “[Putting Apache Kafka to Use: A Practical Guide to Building a Stream Data Platform (Part 2)](http://blog.confluent.io/2015/02/25/stream-data-platform-2/),” *blog.confluent.io*, February 25, 2015.",
								"\\[[25]()\\] Gwen Shapira: “[The Problem of Managing Schemas](http://radar.oreilly.com/2014/11/the-problem-of-managing-schemas.html),” *radar.oreilly.com*, November 4, 2014.",
								"\\[[26]()\\] “[Apache Pig 0.14.0 Documentation](http://pig.apache.org/docs/r0.14.0/),” *pig.apache.org*, November 2014.",
								"\\[[27]()\\] John Larmouth: *[ASN.1 Complete](http://www.oss.com/asn1/resources/books-whitepapers-pubs/larmouth-asn1-book.pdf)*. Morgan Kaufmann, 1999. ISBN: 978-0-122-33435-1",
								"\\[[28]()\\] Russell Housley, Warwick Ford, Tim Polk, and David Solo: “[RFC 2459: Internet X.509 Public Key Infrastructure: Certificate and CRL Profile](https://www.ietf.org/rfc/rfc2459.txt),” IETF Network Working Group, Standards Track, January 1999.",
								"\\[[29]()\\] Lev Walkin: “[Question: Extensibility and Dropping Fields](http://lionet.info/asn1c/blog/2010/09/21/question-extensibility-removing-fields/),” *lionet.info*, September 21, 2010.",
								"\\[[30]()\\] Jesse James Garrett: “[Ajax: A New Approach to Web Applications](http://www.adaptivepath.com/ideas/ajax-new-approach-web-applications/),” *adaptivepath.com*, February 18, 2005.",
								"\\[[31]()\\] Sam Newman: *Building Microservices*. O’Reilly Media, 2015. ISBN: 978-1-491-95035-7",
								"\\[[32]()\\] Chris Richardson: “[Microservices: Decomposing Applications for Deployability and Scalability](http://www.infoq.com/articles/microservices-intro),” *infoq.com*, May 25, 2014.",
								"\\[[33]()\\] Pat Helland: “[Data on the Outside Versus Data on the Inside](http://cidrdb.org/cidr2005/papers/P12.pdf),” at *2nd Biennial Conference on Innovative Data Systems Research* (CIDR), January 2005.",
								"\\[[34]()\\] Roy Thomas Fielding: “[Architectural Styles and the Design of Network-Based Software Architectures](https://www.ics.uci.edu/~fielding/pubs/dissertation/fielding_dissertation.pdf),” PhD Thesis, University of California, Irvine, 2000.",
								"\\[[35]()\\] Roy Thomas Fielding: “[REST APIs Must Be Hypertext-Driven](http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven),” *roy.gbiv.com*, October 20 2008.",
								"\\[[36]()\\] “[REST in Peace, SOAP](http://royal.pingdom.com/2010/10/15/rest-in-peace-soap/),” *royal.pingdom.com*, October 15, 2010.",
								"\\[[37]()\\] “[Web Services Standards as of Q1 2007](https://www.innoq.com/resources/ws-standards-poster/),” *innoq.com*, February 2007.",
								"\\[[38]()\\] Pete Lacey: “[The S Stands for Simple](http://harmful.cat-v.org/software/xml/soap/simple),” *harmful.cat-v.org*, November 15, 2006.",
								"\\[[39]()\\] Stefan Tilkov: “[Interview: Pete Lacey Criticizes Web Services](http://www.infoq.com/articles/pete-lacey-ws-criticism),” *infoq.com*, December 12, 2006.",
								"\\[[40]()\\] “[OpenAPI Specification (fka Swagger RESTful API Documentation Specification) Version 2.0](http://swagger.io/specification/),” *swagger.io*, September 8, 2014.",
								"\\[[41]()\\] Michi Henning: “[The Rise and Fall of CORBA](http://queue.acm.org/detail.cfm?id=1142044),” *ACM Queue*, volume 4, number 5, pages 28–34, June 2006. [doi:10.1145/1142031.1142044](http://dx.doi.org/10.1145/1142031.1142044)",
								"\\[[42]()\\] Andrew D. Birrell and Bruce Jay Nelson: “[Implementing Remote Procedure Calls](http://www.cs.princeton.edu/courses/archive/fall03/cs518/papers/rpc.pdf),” *ACM Transactions on Computer Systems* (TOCS), volume 2, number 1, pages 39–59, February 1984. [doi:10.1145/2080.357392](http://dx.doi.org/10.1145/2080.357392)",
								"\\[[43]()\\] Jim Waldo, Geoff Wyant, Ann Wollrath, and Sam Kendall: “[A Note on Distributed Computing](http://m.mirror.facebook.net/kde/devel/smli_tr-94-29.pdf),” Sun Microsystems Laboratories, Inc., Technical Report TR-94-29, November 1994.",
								"\\[[44]()\\] Steve Vinoski: “[Convenience over Correctness](http://steve.vinoski.net/pdf/IEEE-Convenience_Over_Correctness.pdf),” *IEEE Internet Computing*, volume 12, number 4, pages 89–92, July 2008. [doi:10.1109/MIC.2008.75](http://dx.doi.org/10.1109/MIC.2008.75)",
								"\\[[45]()\\] Marius Eriksen: “[Your Server as a Function](http://monkey.org/~marius/funsrv.pdf),” at *7th Workshop on Programming Languages and Operating Systems* (PLOS), November 2013. [doi:10.1145/2525528.2525538](http://dx.doi.org/10.1145/2525528.2525538)",
								"\\[[46]()\\] “[grpc-common Documentation](https://github.com/grpc/grpc-common),” Google, Inc., *github.com*, February 2015.",
								"\\[[47]()\\] Aditya Narayan and Irina Singh: “[Designing and Versioning Compatible Web Services](http://www.ibm.com/developerworks/websphere/library/techarticles/0705_narayan/0705_narayan.html),” *ibm.com*, March 28, 2007.",
								"\\[[48]()\\] Troy Hunt: “[Your API Versioning Is Wrong, Which Is Why I Decided to Do It 3 Different Wrong Ways](http://www.troyhunt.com/2014/02/your-api-versioning-is-wrong-which-is.html),” *troyhunt.com*, February 10, 2014.",
								"\\[[49]()\\] “[API Upgrades](https://stripe.com/docs/upgrades),” Stripe, Inc., April 2015.",
								"\\[[50]()\\] Jonas Bonér: “[Upgrade in an Akka Cluster](http://grokbase.com/t/gg/akka-user/138wd8j9e3/upgrade-in-an-akka-cluster),” email to *akka-user* mailing list, *grokbase.com*, August 28, 2013.",
								"\\[[51]()\\] Philip A. Bernstein, Sergey Bykov, Alan Geller, et al.: “[Orleans: Distributed Virtual Actors for Programmability and Scalability](http://research.microsoft.com/pubs/210931/Orleans-MSR-TR-2014-41.pdf),” Microsoft Research Technical Report MSR-TR-2014-41, March 2014.",
								"\\[[52]()\\] “[Microsoft Project Orleans Documentation](http://dotnet.github.io/orleans/),” Microsoft Research, *dotnet.github.io*, 2015.",
								"\\[[53]()\\] David Mercer, Sean Hinde, Yinso Chen, and Richard A O’Keefe: “[beginner: Updating Data Structures](http://erlang.org/pipermail/erlang-questions/2007-October/030318.html),” email thread on *erlang-questions* mailing list, *erlang.com*, October 29, 2007.",
								"\\[[54]()\\] Fred Hebert: “[Postscript: Maps](http://learnyousomeerlang.com/maps),” *learnyousomeerlang.com*, April 9, 2014.",
							],
							summary: [
								"Explore data encoding methods for efficient, compatible deployments and rapid application evolution.",
							],
							longSummary: [
								"This chapter explores encoding data structures for network transmission or disk storage, focusing on efficiency, application architecture, and deployment. It stresses backward and forward compatibility for risk-reduced, frequent deployments. Encoding formats include language-specific (limited compatibility), textual like JSON/XML (variable compatibility), and binary schema-driven like Thrift, Protocol Buffers, and Avro (compact, clear compatibility). It also discusses dataflow modes such as databases, RPC/REST APIs, and asynchronous messaging. Footnotes clarify technical distinctions, and references cover 54 sources on serialization, schema evolution, and distributed systems.",
							],
							imageUrl:
								"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280199/blog-cover-images/jthovhjkedobggu7ixja.webp",
						},
					],
				],
				summary: [
					"Adaptable systems thrive on evolvability, balancing data formats and code compatibility seamlessly.",
				],
				longSummary: [
					"Applications evolve with new features and user needs, requiring adaptable systems. Relational databases use migrations, while schema-on-read databases mix formats. Code adapts to data changes through rolling upgrades for server-side apps and user updates for client-side apps. Backward compatibility is easier than forward. Formats like JSON, XML, Protocol Buffers, Thrift, and Avro manage schema changes, supporting coexistence of old and new data. Protocol Buffers and Avro offer compact encoding and schema evolution. RESTful APIs and RPC frameworks like gRPC and Thrift ensure service communication. Encoding choices affect efficiency, architecture, and deployment, enabling frequent updates.",
				],
				imageUrl:
					"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747280191/blog-cover-images/fdht3gtp2ip1dxo5bf0t.webp",
			},
			{
				heading: ["# **Chapter 5. Replication**"],
				children: [
					"*Replication* means keeping a copy of the same data on multiple machines that are connected via a network. As discussed in the introduction to [Part II](), there are several reasons why you might want to replicate data:",
					"* To keep data geographically close to your users (and thus reduce latency)",
					"* To allow the system to continue working even if some of its parts have failed (and thus increase availability)",
					"* To scale out the number of machines that can serve read queries (and thus increase read throughput)",
					"In this chapter we will assume that your dataset is so small that each machine can hold a copy of the entire dataset. In [Chapter 6]() we will relax that assumption and discuss *partitioning* (*sharding*) of datasets that are too big for a single machine. In later chapters we will discuss various kinds of faults that can occur in a replicated data system, and how to deal with them.",
					"If the data that you’re replicating does not change over time, then replication is easy: you just need to copy the data to every node once, and you’re done. All of the difficulty in replication lies in handling *changes* to replicated data, and that’s what this chapter is about. We will discuss three popular algorithms for replicating changes between nodes: *single-leader*, *multi-leader*, and *leaderless* replication. Almost all distributed databases use one of these three approaches. They all have various pros and cons, which we will examine in detail.",
					"There are many trade-offs to consider with replication: for example, whether to use synchronous or asynchronous replication, and how to handle failed replicas. Those are often configuration options in databases, and although the details vary by database, the general principles are similar across many different implementations. We will discuss the consequences of such choices in this chapter.",
					"Replication of databases is an old topic—the principles haven’t changed much since they were studied in the 1970s \\[[1]()\\], because the fundamental constraints of networks have remained the same. However, outside of research, many developers continued to assume for a long time that a database consisted of just one node. Mainstream use of distributed databases is more recent. Since many application developers are new to this area, there has been a lot of misunderstanding around issues such as *eventual consistency*. In [“Problems with Replication Lag”](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#sec_replication_lag) we will get more precise about eventual consistency and discuss things like the *read-your-writes* and *monotonic reads* guarantees.",
					[
						{
							heading: ["# **Leaders and Followers**"],
							children: [
								"Each node that stores a copy of the database is called a *replica*. With multiple replicas, a question inevitably arises: how do we ensure that all the data ends up on all the replicas?",
								"Every write to the database needs to be processed by every replica; otherwise, the replicas would no longer contain the same data. The most common solution for this is called *leader-based replication* (also known as *active/passive* or *master–slave replication*) and is illustrated in [Figure 5-1](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#fig_replication_leader_follower). It works as follows:",
								"1. One of the replicas is designated the *leader* (also known as *master* or *primary*). When clients want to write to the database, they must send their requests to the leader, which first writes the new data to its local storage.",
								"2. The other replicas are known as *followers* (*read replicas*, *slaves*, *secondaries*, or *hot standbys*).[i]() Whenever the leader writes new data to its local storage, it also sends the data change to all of its followers as part of a *replication log* or *change stream*. Each follower takes the log from the leader and updates its local copy of the database accordingly, by applying all writes in the same order as they were processed on the leader.",
								"3. When a client wants to read from the database, it can query either the leader or any of the followers. However, writes are only accepted on the leader (the followers are read-only from the client’s point of view).",
								"![ddia 0501](blob:https://johnfactotum.github.io/f737af4f-7a64-41e5-8a86-3a1cb168ec8e)",
								"###### *Figure 5-1. Leader-based (master–slave) replication.*",
								"This mode of replication is a built-in feature of many relational databases, such as PostgreSQL (since version 9.0), MySQL, Oracle Data Guard \\[[2]()\\], and SQL Server’s AlwaysOn Availability Groups \\[[3]()\\]. It is also used in some nonrelational databases, including MongoDB, RethinkDB, and Espresso \\[[4]()\\]. Finally, leader-based replication is not restricted to only databases: distributed message brokers such as Kafka \\[[5]()\\] and RabbitMQ highly available queues \\[[6]()\\] also use it. Some network filesystems and replicated block devices such as DRBD are similar.",
								[
									{
										heading: [
											"## **Synchronous Versus Asynchronous Replication**",
										],
										children: [
											"An important detail of a replicated system is whether the replication happens *synchronously* or *asynchronously*. (In relational databases, this is often a configurable option; other systems are often hardcoded to be either one or the other.)",
											"Think about what happens in [Figure 5-1](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#fig_replication_leader_follower), where the user of a website updates their profile image. At some point in time, the client sends the update request to the leader; shortly afterward, it is received by the leader. At some point, the leader forwards the data change to the followers. Eventually, the leader notifies the client that the update was successful.",
											"[Figure 5-2](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#fig_replication_sync_replication) shows the communication between various components of the system: the user’s client, the leader, and two followers. Time flows from left to right. A request or response message is shown as a thick arrow.",
											"![ddia 0502](blob:https://johnfactotum.github.io/1b03582c-d65d-4911-a37a-5cbf63e8cb22)",
											"###### *Figure 5-2. Leader-based replication with one synchronous and one asynchronous follower.*",
											"In the example of [Figure 5-2](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#fig_replication_sync_replication), the replication to follower 1 is *synchronous*: the leader waits until follower 1 has confirmed that it received the write before reporting success to the user, and before making the write visible to other clients. The replication to follower 2 is *asynchronous*: the leader sends the message, but doesn’t wait for a response from the follower.",
											"The diagram shows that there is a substantial delay before follower 2 processes the message. Normally, replication is quite fast: most database systems apply changes to followers in less than a second. However, there is no guarantee of how long it might take. There are circumstances when followers might fall behind the leader by several minutes or more; for example, if a follower is recovering from a failure, if the system is operating near maximum capacity, or if there are network problems between the nodes.",
											"The advantage of synchronous replication is that the follower is guaranteed to have an up-to-date copy of the data that is consistent with the leader. If the leader suddenly fails, we can be sure that the data is still available on the follower. The disadvantage is that if the synchronous follower doesn’t respond (because it has crashed, or there is a network fault, or for any other reason), the write cannot be processed. The leader must block all writes and wait until the synchronous replica is available again.",
											"For that reason, it is impractical for all followers to be synchronous: any one node outage would cause the whole system to grind to a halt. In practice, if you enable synchronous replication on a database, it usually means that *one* of the followers is synchronous, and the others are asynchronous. If the synchronous follower becomes unavailable or slow, one of the asynchronous followers is made synchronous. This guarantees that you have an up-to-date copy of the data on at least two nodes: the leader and one synchronous follower. This configuration is sometimes also called *semi-synchronous* \\[[7]()\\].",
											"Often, leader-based replication is configured to be completely asynchronous. In this case, if the leader fails and is not recoverable, any writes that have not yet been replicated to followers are lost. This means that a write is not guaranteed to be durable, even if it has been confirmed to the client. However, a fully asynchronous configuration has the advantage that the leader can continue processing writes, even if all of its followers have fallen behind.",
											"Weakening durability may sound like a bad trade-off, but asynchronous replication is nevertheless widely used, especially if there are many followers or if they are geographically distributed. We will return to this issue in [“Problems with Replication Lag”](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#sec_replication_lag).",
											[
												{
													heading: [
														"##### **Research on Replication**",
													],
													children: [
														"It can be a serious problem for asynchronously replicated systems to lose data if the leader fails, so researchers have continued investigating replication methods that do not lose data but still provide good performance and availability. For example, *chain replication* \\[[8](), [9]()\\] is a variant of synchronous replication that has been successfully implemented in a few systems such as Microsoft Azure Storage \\[[10](), [11]()\\].",
														"There is a strong connection between consistency of replication and *consensus* (getting several nodes to agree on a value), and we will explore this area of theory in more detail in [Chapter 9](). In this chapter we will concentrate on the simpler forms of replication that are most commonly used in databases in practice.",
													],
													summary: [
														"Explore robust replication methods ensuring data safety and performance in databases.",
													],
													longSummary: [
														"Asynchronous replication systems risk data loss if the leader fails, prompting ongoing research into replication methods that ensure data integrity while maintaining performance and availability. Chain replication, a variant of synchronous replication, has been effectively implemented in systems like Microsoft Azure Storage. The relationship between replication consistency and consensus, where multiple nodes agree on a value, will be further explored in Chapter 9. This chapter focuses on simpler, commonly used replication forms in databases.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289566/blog-cover-images/zmw7ijxtdjegpyz5m9uj.webp",
												},
											],
										],
										summary: [
											"Explore synchronous vs. asynchronous replication: balancing data consistency, performance, and availability.",
										],
										longSummary: [
											"In replicated systems, replication can be synchronous or asynchronous. Synchronous replication requires the leader to wait for follower confirmation, ensuring up-to-date data but blocking writes if a follower doesn't respond. Usually, only one follower is synchronous to ensure data on two nodes. Asynchronous replication lets the leader continue processing writes even if followers lag, risking data loss if the leader fails. Despite this risk, it's popular, especially with many or geographically distributed followers. Researchers are exploring methods like chain replication to balance performance and data durability.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289525/blog-cover-images/kgpzh5ya96cg4zwb1giz.webp",
									},
									{
										heading: [
											"## **Setting Up New Followers**",
										],
										children: [
											"From time to time, you need to set up new followers—perhaps to increase the number of replicas, or to replace failed nodes. How do you ensure that the new follower has an accurate copy of the leader’s data?",
											"Simply copying data files from one node to another is typically not sufficient: clients are constantly writing to the database, and the data is always in flux, so a standard file copy would see different parts of the database at different points in time. The result might not make any sense.",
											"You could make the files on disk consistent by locking the database (making it unavailable for writes), but that would go against our goal of high availability. Fortunately, setting up a follower can usually be done without downtime. Conceptually, the process looks like this:",
											"1. Take a consistent snapshot of the leader’s database at some point in time—if possible, without taking a lock on the entire database. Most databases have this feature, as it is also required for backups. In some cases, third-party tools are needed, such as *innobackupex* for MySQL \\[[12]()\\].",
											"2. Copy the snapshot to the new follower node.",
											"3. The follower connects to the leader and requests all the data changes that have happened since the snapshot was taken. This requires that the snapshot is associated with an exact position in the leader’s replication log. That position has various names: for example, PostgreSQL calls it the *log sequence number*, and MySQL calls it the *binlog coordinates*.",
											"4. When the follower has processed the backlog of data changes since the snapshot, we say it has *caught up*. It can now continue to process data changes from the leader as they happen.",
											"The practical steps of setting up a follower vary significantly by database. In some systems the process is fully automated, whereas in others it can be a somewhat arcane multi-step workflow that needs to be manually performed by an administrator.",
										],
										summary: [
											"Effortlessly set up new database followers without downtime using snapshot and replication techniques.",
										],
										longSummary: [
											"To set up new followers for increasing replicas or replacing failed nodes without downtime, follow these steps: Take a consistent snapshot of the leader's database without locking it, copy this snapshot to the new follower node, and have the follower connect to the leader to request all data changes since the snapshot using a replication log position. Once the follower processes these changes, it catches up and can continue processing real-time data changes from the leader. The specific steps differ by database, with some systems offering full automation and others needing manual intervention.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289525/blog-cover-images/tm6qnsco2hzyzfdgqqmv.webp",
									},
									{
										heading: [
											"## **Handling Node Outages**",
										],
										children: [
											"Any node in the system can go down, perhaps unexpectedly due to a fault, but just as likely due to planned maintenance (for example, rebooting a machine to install a kernel security patch). Being able to reboot individual nodes without downtime is a big advantage for operations and maintenance. Thus, our goal is to keep the system as a whole running despite individual node failures, and to keep the impact of a node outage as small as possible.",
											"How do you achieve high availability with leader-based replication?",
											[
												{
													heading: [
														"### **Follower failure: Catch-up recovery**",
													],
													children: [
														"On its local disk, each follower keeps a log of the data changes it has received from the leader. If a follower crashes and is restarted, or if the network between the leader and the follower is temporarily interrupted, the follower can recover quite easily: from its log, it knows the last transaction that was processed before the fault occurred. Thus, the follower can connect to the leader and request all the data changes that occurred during the time when the follower was disconnected. When it has applied these changes, it has caught up to the leader and can continue receiving a stream of data changes as before.",
													],
													summary: [
														"Followers log data changes to recover seamlessly after crashes or disconnections.",
													],
													longSummary: [
														"Each follower maintains a log of data changes from the leader on its local disk. In the event of a crash, restart, or network interruption, the follower uses this log to identify the last processed transaction. It then reconnects to the leader, requests any missed data changes, applies them to catch up, and resumes receiving the data stream.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289561/blog-cover-images/kq1nvpnbokakuv1xs9zq.webp",
												},
												{
													heading: [
														"### **Leader failure: Failover**",
													],
													children: [
														"Handling a failure of the leader is trickier: one of the followers needs to be promoted to be the new leader, clients need to be reconfigured to send their writes to the new leader, and the other followers need to start consuming data changes from the new leader. This process is called *failover*.",
														"Failover can happen manually (an administrator is notified that the leader has failed and takes the necessary steps to make a new leader) or automatically. An automatic failover process usually consists of the following steps:",
														"1. *Determining that the leader has failed.* There are many things that could potentially go wrong: crashes, power outages, network issues, and more. There is no foolproof way of detecting what has gone wrong, so most systems simply use a timeout: nodes frequently bounce messages back and forth between each other, and if a node doesn’t respond for some period of time—say, 30 seconds—it is assumed to be dead. (If the leader is deliberately taken down for planned maintenance, this doesn’t apply.)",
														"2. *Choosing a new leader.* This could be done through an election process (where the leader is chosen by a majority of the remaining replicas), or a new leader could be appointed by a previously elected *controller node*. The best candidate for leadership is usually the replica with the most up-to-date data changes from the old leader (to minimize any data loss). Getting all the nodes to agree on a new leader is a consensus problem, discussed in detail in [Chapter 9]().",
														"3. *Reconfiguring the system to use the new leader.* Clients now need to send their write requests to the new leader (we discuss this in [“Request Routing”]()). If the old leader comes back, it might still believe that it is the leader, not realizing that the other replicas have forced it to step down. The system needs to ensure that the old leader becomes a follower and recognizes the new leader.",
														"Failover is fraught with things that can go wrong:",
														"* If asynchronous replication is used, the new leader may not have received all the writes from the old leader before it failed. If the former leader rejoins the cluster after a new leader has been chosen, what should happen to those writes? The new leader may have received conflicting writes in the meantime. The most common solution is for the old leader’s unreplicated writes to simply be discarded, which may violate clients’ durability expectations.",
														"* Discarding writes is especially dangerous if other storage systems outside of the database need to be coordinated with the database contents. For example, in one incident at GitHub \\[[13]()\\], an out-of-date MySQL follower was promoted to leader. The database used an autoincrementing counter to assign primary keys to new rows, but because the new leader’s counter lagged behind the old leader’s, it reused some primary keys that were previously assigned by the old leader. These primary keys were also used in a Redis store, so the reuse of primary keys resulted in inconsistency between MySQL and Redis, which caused some private data to be disclosed to the wrong users.",
														"* In certain fault scenarios (see [Chapter 8]()), it could happen that two nodes both believe that they are the leader. This situation is called *split brain*, and it is dangerous: if both leaders accept writes, and there is no process for resolving conflicts (see [“Multi-Leader Replication”](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#sec_replication_multi_leader)), data is likely to be lost or corrupted. As a safety catch, some systems have a mechanism to shut down one node if two leaders are detected.[ii]() However, if this mechanism is not carefully designed, you can end up with both nodes being shut down \\[[14]()\\].",
														"* What is the right timeout before the leader is declared dead? A longer timeout means a longer time to recovery in the case where the leader fails. However, if the timeout is too short, there could be unnecessary failovers. For example, a temporary load spike could cause a node’s response time to increase above the timeout, or a network glitch could cause delayed packets. If the system is already struggling with high load or network problems, an unnecessary failover is likely to make the situation worse, not better.",
														"There are no easy solutions to these problems. For this reason, some operations teams prefer to perform failovers manually, even if the software supports automatic failover.",
														"These issues—node failures; unreliable networks; and trade-offs around replica consistency, durability, availability, and latency—are in fact fundamental problems in distributed systems. In [Chapter 8]() and [Chapter 9]() we will discuss them in greater depth.",
													],
													summary: [
														"Failover challenges in distributed systems: leader election, data consistency, and split-brain risks.",
													],
													longSummary: [
														"Handling leader failure in distributed systems involves a process called failover, where a follower is promoted to leader status. This can be manual or automatic and includes detecting failure, selecting a new leader, and reconfiguring the system. Challenges include asynchronous replication leading to missed writes, potential inconsistencies with external systems, split brain scenarios causing data corruption, and the difficulty of setting appropriate timeouts. These issues highlight fundamental distributed system problems like node failures and unreliable networks, prompting some teams to prefer manual failovers despite the availability of automatic solutions.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289563/blog-cover-images/uwgkbj4hejfskuaa8sle.webp",
												},
											],
										],
										summary: [
											"Achieve high availability in distributed systems despite node failures and network unreliability challenges.",
										],
										longSummary: [
											"In distributed systems, nodes can fail unexpectedly or require planned maintenance, such as reboots for security updates. To maintain high availability, systems use leader-based replication where each follower logs data changes from the leader. If a follower crashes or loses connection, it can recover using its log to catch up with the leader's changes. Leader failure necessitates a failover, promoting a follower to leader, which can be manual or automatic. However, failover poses challenges like potential data inconsistencies, split-brain scenarios, and difficult timeout settings. These issues highlight the complexities of balancing consistency, durability, availability, and latency in distributed systems.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289525/blog-cover-images/umhtk4uuinvc5pz6wnof.webp",
									},
									{
										heading: [
											"## **Implementation of Replication Logs**",
										],
										children: [
											"How does leader-based replication work under the hood? Several different replication methods are used in practice, so let’s look at each one briefly.",
											[
												{
													heading: [
														"### **Statement-based replication**",
													],
													children: [
														"In the simplest case, the leader logs every write request (*statement*) that it executes and sends that statement log to its followers. For a relational database, this means that every `INSERT`, `UPDATE`, or `DELETE` statement is forwarded to followers, and each follower parses and executes that SQL statement as if it had been received from a client.",
														"Although this may sound reasonable, there are various ways in which this approach to replication can break down:",
														"* Any statement that calls a nondeterministic function, such as `NOW()` to get the current date and time or `RAND()` to get a random number, is likely to generate a different value on each replica.",
														"* If statements use an autoincrementing column, or if they depend on the existing data in the database (e.g., `UPDATE … WHERE`*`<some condition>`*), they must be executed in exactly the same order on each replica, or else they may have a different effect. This can be limiting when there are multiple concurrently executing transactions.",
														"* Statements that have side effects (e.g., triggers, stored procedures, user-defined functions) may result in different side effects occurring on each replica, unless the side effects are absolutely deterministic.",
														"It is possible to work around those issues—for example, the leader can replace any nondeterministic function calls with a fixed return value when the statement is logged so that the followers all get the same value. However, because there are so many edge cases, other replication methods are now generally preferred.",
														"Statement-based replication was used in MySQL before version 5.1. It is still sometimes used today, as it is quite compact, but by default MySQL now switches to row-based replication (discussed shortly) if there is any nondeterminism in a statement. VoltDB uses statement-based replication, and makes it safe by requiring transactions to be deterministic \\[[15]()\\].",
													],
													summary: [
														"Statement-based replication faces challenges with nondeterminism, concurrency, and side effects, prompting alternatives.",
													],
													longSummary: [
														"In statement-based replication, the leader logs and forwards SQL write requests to followers for execution, but this method faces challenges. Nondeterministic functions like NOW() or RAND() can generate different values on replicas, and statements relying on autoincrementing columns or existing data must execute in the same order, limiting concurrency. Additionally, statements with side effects may yield inconsistent results unless fully deterministic. While workarounds exist, other replication methods are generally preferred. MySQL used statement-based replication before version 5.1 but now defaults to row-based replication when nondeterminism is detected. VoltDB still uses statement-based replication with deterministic transactions for safety.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289555/blog-cover-images/z1zhlyoqkdadmt6mheo0.webp",
												},
												{
													heading: [
														"### **Write-ahead log (WAL) shipping**",
													],
													children: [
														"In [Chapter 3]() we discussed how storage engines represent data on disk, and we found that usually every write is appended to a log:",
														"* In the case of a log-structured storage engine (see [“SSTables and LSM-Trees”]()), this log is the main place for storage. Log segments are compacted and garbage-collected in the background.",
														"* In the case of a B-tree (see [“B-Trees”]()), which overwrites individual disk blocks, every modification is first written to a write-ahead log so that the index can be restored to a consistent state after a crash.",
														"In either case, the log is an append-only sequence of bytes containing all writes to the database. We can use the exact same log to build a replica on another node: besides writing the log to disk, the leader also sends it across the network to its followers. When the follower processes this log, it builds a copy of the exact same data structures as found on the leader.",
														"This method of replication is used in PostgreSQL and Oracle, among others \\[[16]()\\]. The main disadvantage is that the log describes the data on a very low level: a WAL contains details of which bytes were changed in which disk blocks. This makes replication closely coupled to the storage engine. If the database changes its storage format from one version to another, it is typically not possible to run different versions of the database software on the leader and the followers.",
														"That may seem like a minor implementation detail, but it can have a big operational impact. If the replication protocol allows the follower to use a newer software version than the leader, you can perform a zero-downtime upgrade of the database software by first upgrading the followers and then performing a failover to make one of the upgraded nodes the new leader. If the replication protocol does not allow this version mismatch, as is often the case with WAL shipping, such upgrades require downtime.",
													],
													summary: [
														"Discover how log-structured storage engines impact data replication and zero-downtime upgrades.",
													],
													longSummary: [
														"In Chapter 3, we explored how storage engines handle data on disk, focusing on log-structured storage engines where data is appended to a log, with segments compacted and garbage-collected in the background. B-trees use a write-ahead log to recover the index after crashes. This append-only log facilitates replication by sending it from the leader to followers, who then build identical data structures. While used in PostgreSQL and Oracle, this method's downside is its low-level data description, tightly coupling replication to the storage engine. This coupling complicates zero-downtime upgrades, as differing storage formats between versions prevent seamless leader-follower transitions.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289554/blog-cover-images/tc60xtqvtkvo9p1p9jnb.webp",
												},
												{
													heading: [
														"### **Logical (row-based) log replication**",
													],
													children: [
														"An alternative is to use different log formats for replication and for the storage engine, which allows the replication log to be decoupled from the storage engine internals. This kind of replication log is called a *logical log*, to distinguish it from the storage engine’s (*physical*) data representation.",
														"A logical log for a relational database is usually a sequence of records describing writes to database tables at the granularity of a row:",
														"* For an inserted row, the log contains the new values of all columns.",
														"* For a deleted row, the log contains enough information to uniquely identify the row that was deleted. Typically this would be the primary key, but if there is no primary key on the table, the old values of all columns need to be logged.",
														"* For an updated row, the log contains enough information to uniquely identify the updated row, and the new values of all columns (or at least the new values of all columns that changed).",
														"A transaction that modifies several rows generates several such log records, followed by a record indicating that the transaction was committed. MySQL’s binlog (when configured to use row-based replication) uses this approach \\[[17]()\\].",
														"Since a logical log is decoupled from the storage engine internals, it can more easily be kept backward compatible, allowing the leader and the follower to run different versions of the database software, or even different storage engines.",
														"A logical log format is also easier for external applications to parse. This aspect is useful if you want to send the contents of a database to an external system, such as a data warehouse for offline analysis, or for building custom indexes and caches \\[[18]()\\]. This technique is called *change data capture*, and we will return to it in [Chapter 11]().",
													],
													summary: [
														"Logical logs enable flexible, version-independent replication and simplify data capture for external applications.",
													],
													longSummary: [
														"Logical logs offer a compelling alternative to physical logs for replication by separating the replication log from storage engine internals. In relational databases, logical logs record row-level writes: new values for inserted rows, unique identifiers for deleted rows, and identification plus new values for updated rows. Transactions affecting multiple rows produce several log records, culminating in a commit record, similar to MySQL's binlog with row-based replication. The benefits of logical logs include backward compatibility across different software versions between leader and follower, and ease of parsing for external applications, facilitating change data capture for data warehousing or custom index building.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289559/blog-cover-images/rhgrhauige4t4ysy1rpw.webp",
												},
												{
													heading: [
														"### **Trigger-based replication**",
													],
													children: [
														"The replication approaches described so far are implemented by the database system, without involving any application code. In many cases, that’s what you want—but there are some circumstances where more flexibility is needed. For example, if you want to only replicate a subset of the data, or want to replicate from one kind of database to another, or if you need conflict resolution logic (see [“Handling Write Conflicts”](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#sec_replication_write_conflicts)), then you may need to move replication up to the application layer.",
														"Some tools, such as Oracle GoldenGate \\[[19]()\\], can make data changes available to an application by reading the database log. An alternative is to use features that are available in many relational databases: *triggers* and *stored procedures*.",
														"A trigger lets you register custom application code that is automatically executed when a data change (write transaction) occurs in a database system. The trigger has the opportunity to log this change into a separate table, from which it can be read by an external process. That external process can then apply any necessary application logic and replicate the data change to another system. Databus for Oracle \\[[20]()\\] and Bucardo for Postgres \\[[21]()\\] work like this, for example.",
														"Trigger-based replication typically has greater overheads than other replication methods, and is more prone to bugs and limitations than the database’s built-in replication. However, it can nevertheless be useful due to its flexibility.",
													],
													summary: [
														"For flexible data replication, consider application-layer tools like Oracle GoldenGate or trigger-based methods.",
													],
													longSummary: [
														"For flexible data replication, consider moving replication to the application layer. This approach is useful for replicating data subsets, working across different databases, or handling conflict resolution. Tools like Oracle GoldenGate read database logs to track data changes. Relational databases also support triggers and stored procedures to automatically execute custom code and log changes for replication. While trigger-based replication can be more resource-intensive and bug-prone than built-in options, its flexibility is beneficial. Examples include Databus for Oracle and Bucardo for Postgres.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289560/blog-cover-images/oocnlhy9fip4pbyuhn7b.webp",
												},
											],
										],
										summary: [
											"Explore leader-based replication: from statement-based to logical logs, and application-layer flexibility.",
										],
										longSummary: [
											"Leader-based replication includes several methods with distinct features. Statement-based replication logs SQL statements to followers but struggles with nondeterministic functions and execution order, limiting concurrency. MySQL used this before version 5.1 but now defaults to row-based replication when nondeterminism is detected. Log-based replication, used by PostgreSQL and Oracle, sends a low-level log to followers but is tightly linked to the storage engine, complicating upgrades. Logical logs, like MySQL's binlog, offer flexibility and compatibility across versions. For customized replication, consider application-layer solutions like Oracle GoldenGate or database triggers, despite their overheads.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289524/blog-cover-images/sdtwq3lkdn6qyzepqkde.webp",
									},
								],
							],
							summary: [
								"Explore the intricacies of leader-based replication: ensuring data consistency, handling failures, and more.",
							],
							longSummary: [
								"In leader-based replication, one replica handles all write requests, while followers update from the leader, ensuring data consistency across replicas. Clients can read from any replica, but only the leader processes writes. This method is used in databases like PostgreSQL, MySQL, and Oracle, and systems like Kafka and RabbitMQ. Replication can be synchronous or asynchronous, affecting consistency and availability. Failover processes manage leader failures but may cause data loss or split-brain issues. Replication methods include statement-based, log-based, and logical logs. While built-in replication is standard, application-layer replication offers more flexibility but with higher overhead.",
							],
							imageUrl:
								"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289515/blog-cover-images/sqah2pii9kjw3g1gg4u2.webp",
						},
						{
							heading: ["# **Problems with Replication Lag**"],
							children: [
								"Being able to tolerate node failures is just one reason for wanting replication. As mentioned in the introduction to [Part II](), other reasons are scalability (processing more requests than a single machine can handle) and latency (placing replicas geographically closer to users).",
								"Leader-based replication requires all writes to go through a single node, but read-only queries can go to any replica. For workloads that consist of mostly reads and only a small percentage of writes (a common pattern on the web), there is an attractive option: create many followers, and distribute the read requests across those followers. This removes load from the leader and allows read requests to be served by nearby replicas.",
								"In this *read-scaling* architecture, you can increase the capacity for serving read-only requests simply by adding more followers. However, this approach only realistically works with asynchronous replication—if you tried to synchronously replicate to all followers, a single node failure or network outage would make the entire system unavailable for writing. And the more nodes you have, the likelier it is that one will be down, so a fully synchronous configuration would be very unreliable.",
								"Unfortunately, if an application reads from an *asynchronous* follower, it may see outdated information if the follower has fallen behind. This leads to apparent inconsistencies in the database: if you run the same query on the leader and a follower at the same time, you may get different results, because not all writes have been reflected in the follower. This inconsistency is just a temporary state—if you stop writing to the database and wait a while, the followers will eventually catch up and become consistent with the leader. For that reason, this effect is known as *eventual consistency* \\[[22](), [23]()\\].[iii]()",
								"The term “eventually” is deliberately vague: in general, there is no limit to how far a replica can fall behind. In normal operation, the delay between a write happening on the leader and being reflected on a follower—the *replication lag*—may be only a fraction of a second, and not noticeable in practice. However, if the system is operating near capacity or if there is a problem in the network, the lag can easily increase to several seconds or even minutes.",
								"When the lag is so large, the inconsistencies it introduces are not just a theoretical issue but a real problem for applications. In this section we will highlight three examples of problems that are likely to occur when there is replication lag and outline some approaches to solving them.",
								[
									{
										heading: [
											"## **Reading Your Own Writes**",
										],
										children: [
											"Many applications let the user submit some data and then view what they have submitted. This might be a record in a customer database, or a comment on a discussion thread, or something else of that sort. When new data is submitted, it must be sent to the leader, but when the user views the data, it can be read from a follower. This is especially appropriate if data is frequently viewed but only occasionally written.",
											"With asynchronous replication, there is a problem, illustrated in [Figure 5-3](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#fig_replication_read_your_writes): if the user views the data shortly after making a write, the new data may not yet have reached the replica. To the user, it looks as though the data they submitted was lost, so they will be understandably unhappy.",
											"![ddia 0503](blob:https://johnfactotum.github.io/4f56735a-c6b8-43d2-ae60-a2a5db4bff82)",
											"###### *Figure 5-3. A user makes a write, followed by a read from a stale replica. To prevent this anomaly, we need read-after-write consistency.*",
											"In this situation, we need *read-after-write consistency*, also known as *read-your-writes consistency* \\[[24]()\\]. This is a guarantee that if the user reloads the page, they will always see any updates they submitted themselves. It makes no promises about other users: other users’ updates may not be visible until some later time. However, it reassures the user that their own input has been saved correctly.",
											"How can we implement read-after-write consistency in a system with leader-based replication? There are various possible techniques. To mention a few:",
											"* When reading something that the user may have modified, read it from the leader; otherwise, read it from a follower. This requires that you have some way of knowing whether something might have been modified, without actually querying it. For example, user profile information on a social network is normally only editable by the owner of the profile, not by anybody else. Thus, a simple rule is: always read the user’s own profile from the leader, and any other users’ profiles from a follower.",
											"* If most things in the application are potentially editable by the user, that approach won’t be effective, as most things would have to be read from the leader (negating the benefit of read scaling). In that case, other criteria may be used to decide whether to read from the leader. For example, you could track the time of the last update and, for one minute after the last update, make all reads from the leader. You could also monitor the replication lag on followers and prevent queries on any follower that is more than one minute behind the leader.",
											"* The client can remember the timestamp of its most recent write—then the system can ensure that the replica serving any reads for that user reflects updates at least until that timestamp. If a replica is not sufficiently up to date, either the read can be handled by another replica or the query can wait until the replica has caught up. The timestamp could be a *logical timestamp* (something that indicates ordering of writes, such as the log sequence number) or the actual system clock (in which case clock synchronization becomes critical; see [“Unreliable Clocks”]()).",
											"* If your replicas are distributed across multiple datacenters (for geographical proximity to users or for availability), there is additional complexity. Any request that needs to be served by the leader must be routed to the datacenter that contains the leader.",
											"Another complication arises when the same user is accessing your service from multiple devices, for example a desktop web browser and a mobile app. In this case you may want to provide *cross-device* read-after-write consistency: if the user enters some information on one device and then views it on another device, they should see the information they just entered.",
											"In this case, there are some additional issues to consider:",
											"* Approaches that require remembering the timestamp of the user’s last update become more difficult, because the code running on one device doesn’t know what updates have happened on the other device. This metadata will need to be centralized.",
											"* If your replicas are distributed across different datacenters, there is no guarantee that connections from different devices will be routed to the same datacenter. (For example, if the user’s desktop computer uses the home broadband connection and their mobile device uses the cellular data network, the devices’ network routes may be completely different.) If your approach requires reading from the leader, you may first need to route requests from all of a user’s devices to the same datacenter.",
										],
										summary: [
											"Ensuring immediate data visibility in leader-based systems challenges cross-device consistency and replication.",
										],
										longSummary: [
											"Read-after-write consistency ensures users can immediately view their submitted data, posing challenges in leader-based replication systems where followers may lag. Techniques to address this include reading user-modified data from the leader, reading from the leader after updates, and using clients' last write timestamps to ensure replicas are current. Routing complexities arise when replicas span multiple datacenters, and cross-device consistency adds further complications. Here, centralizing timestamp metadata and routing requests from different devices to the same datacenter are crucial to maintaining consistency.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289534/blog-cover-images/uyltxo2sgcbxohbukg5i.webp",
									},
									{
										heading: ["## **Monotonic Reads**"],
										children: [
											"Our second example of an anomaly that can occur when reading from asynchronous followers is that it’s possible for a user to see things *moving backward in time*.",
											"This can happen if a user makes several reads from different replicas. For example, [Figure 5-4](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#fig_replication_monotonic_reads) shows user 2345 making the same query twice, first to a follower with little lag, then to a follower with greater lag. (This scenario is quite likely if the user refreshes a web page, and each request is routed to a random server.) The first query returns a comment that was recently added by user 1234, but the second query doesn’t return anything because the lagging follower has not yet picked up that write. In effect, the second query is observing the system at an earlier point in time than the first query. This wouldn’t be so bad if the first query hadn’t returned anything, because user 2345 probably wouldn’t know that user 1234 had recently added a comment. However, it’s very confusing for user 2345 if they first see user 1234’s comment appear, and then see it disappear again.",
											"![ddia 0504](blob:https://johnfactotum.github.io/456f2e6b-d4a8-44bc-8815-85989861cdd6)",
											"###### *Figure 5-4. A user first reads from a fresh replica, then from a stale replica. Time appears to go backward. To prevent this anomaly, we need monotonic reads.*",
											"*Monotonic reads* \\[[23]()\\] is a guarantee that this kind of anomaly does not happen. It’s a lesser guarantee than strong consistency, but a stronger guarantee than eventual consistency. When you read data, you may see an old value; monotonic reads only means that if one user makes several reads in sequence, they will not see time go backward—i.e., they will not read older data after having previously read newer data.",
											"One way of achieving monotonic reads is to make sure that each user always makes their reads from the same replica (different users can read from different replicas). For example, the replica can be chosen based on a hash of the user ID, rather than randomly. However, if that replica fails, the user’s queries will need to be rerouted to another replica.",
										],
										summary: [
											"Experience time travel in data: how monotonic reads prevent backward jumps in asynchronous systems.",
										],
										longSummary: [
											"When reading from asynchronous followers, users can experience anomalies where data appears to move backward in time. This occurs when a user reads from different replicas, such as user 2345 seeing a comment from user 1234 on a less lagging follower, then not seeing it on a lagging one. Monotonic reads prevent this by ensuring sequential reads don't show older data after newer data, offering a consistency level between eventual and strong consistency. One solution is to consistently route a user to the same replica, possibly using a hash of the user ID, with rerouting needed if that replica fails.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289542/blog-cover-images/f0l4ujvxfmxatzhdvrtl.webp",
									},
									{
										heading: [
											"## **Consistent Prefix Reads**",
										],
										children: [
											"Our third example of replication lag anomalies concerns violation of causality. Imagine the following short dialog between Mr. Poons and Mrs. Cake:",
											"Mr. Poons",
											"How far into the future can you see, Mrs. Cake?",
											"Mrs. Cake",
											"About ten seconds usually, Mr. Poons.",
											"There is a causal dependency between those two sentences: Mrs. Cake heard Mr. Poons’s question and answered it.",
											"Now, imagine a third person is listening to this conversation through followers. The things said by Mrs. Cake go through a follower with little lag, but the things said by Mr. Poons have a longer replication lag (see [Figure 5-5](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#fig_replication_consistent_prefix)). This observer would hear the following:",
											"Mrs. Cake",
											"About ten seconds usually, Mr. Poons.",
											"Mr. Poons",
											"How far into the future can you see, Mrs. Cake?",
											"To the observer it looks as though Mrs. Cake is answering the question before Mr. Poons has even asked it. Such psychic powers are impressive, but very confusing \\[[25]()\\].",
											"![ddia 0505](blob:https://johnfactotum.github.io/b0d7d615-47d8-4132-a2c2-fe677996e4f3)",
											"###### *Figure 5-5. If some partitions are replicated slower than others, an observer may see the answer before they see the question.*",
											"Preventing this kind of anomaly requires another type of guarantee: *consistent prefix reads* \\[[23]()\\]. This guarantee says that if a sequence of writes happens in a certain order, then anyone reading those writes will see them appear in the same order.",
											"This is a particular problem in partitioned (sharded) databases, which we will discuss in [Chapter 6](). If the database always applies writes in the same order, reads always see a consistent prefix, so this anomaly cannot happen. However, in many distributed databases, different partitions operate independently, so there is no global ordering of writes: when a user reads from the database, they may see some parts of the database in an older state and some in a newer state.",
											"One solution is to make sure that any writes that are causally related to each other are written to the same partition—but in some applications that cannot be done efficiently. There are also algorithms that explicitly keep track of causal dependencies, a topic that we will return to in [“The “happens-before” relationship and concurrency”](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#sec_replication_happens_before).",
										],
										summary: [
											"Can Mrs. Cake answer Mr. Poons before he asks? Discover replication lag anomalies.",
										],
										longSummary: [
											"In replication lag anomalies, causality violations can occur, as illustrated in a conversation between Mr. Poons and Mrs. Cake, where Mrs. Cake's answer might be heard before Mr. Poons's question due to differing replication lags. This creates an illusion of psychic powers. To prevent such anomalies, a \"consistent prefix reads\" guarantee is needed, ensuring that writes are read in the same order they occur. This issue is particularly challenging in partitioned databases with independent partitions and no global write ordering. Solutions involve directing causally related writes to the same partition or employing algorithms that track causal dependencies.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289544/blog-cover-images/zokakvgkcnpjtc7zllz7.webp",
									},
									{
										heading: [
											"## **Solutions for Replication Lag**",
										],
										children: [
											"When working with an eventually consistent system, it is worth thinking about how the application behaves if the replication lag increases to several minutes or even hours. If the answer is “no problem,” that’s great. However, if the result is a bad experience for users, it’s important to design the system to provide a stronger guarantee, such as read-after-write. Pretending that replication is synchronous when in fact it is asynchronous is a recipe for problems down the line.",
											"As discussed earlier, there are ways in which an application can provide a stronger guarantee than the underlying database—for example, by performing certain kinds of reads on the leader. However, dealing with these issues in application code is complex and easy to get wrong.",
											"It would be better if application developers didn’t have to worry about subtle replication issues and could just trust their databases to “do the right thing.” This is why *transactions* exist: they are a way for a database to provide stronger guarantees so that the application can be simpler.",
											"Single-node transactions have existed for a long time. However, in the move to distributed (replicated and partitioned) databases, many systems have abandoned them, claiming that transactions are too expensive in terms of performance and availability, and asserting that eventual consistency is inevitable in a scalable system. There is some truth in that statement, but it is overly simplistic, and we will develop a more nuanced view over the course of the rest of this book. We will return to the topic of transactions in Chapters [7]() and [9](), and we will discuss some alternative mechanisms in [Part III]().",
										],
										summary: [
											"Design systems with strong guarantees to handle replication lag and avoid asynchronous pitfalls.",
										],
										longSummary: [
											"When dealing with an eventually consistent system, consider how increased replication lag affects user experience. If it causes issues, design the system with stronger guarantees like read-after-write. Avoid assuming asynchronous replication is synchronous, as this leads to problems. While applications can offer stronger guarantees than the database, implementing these in code is complex and error-prone. Transactions are designed to provide these guarantees, alleviating developer concerns about replication issues. Although many distributed databases have moved away from single-node transactions citing performance and availability, this perspective is overly simplistic. Transactions will be discussed further in later chapters.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289545/blog-cover-images/se557nmdvidsqduw1tan.webp",
									},
								],
							],
							summary: [
								"Replication enhances scalability and latency but can cause consistency issues; explore solutions here.",
							],
							longSummary: [
								"Replication boosts scalability and reduces latency by routing writes through a leader node and distributing reads across followers. However, asynchronous replication can cause eventual consistency, leading to inconsistencies that affect applications needing immediate data visibility. To address this, read user-modified data from the leader and ensure cross-device consistency. Anomalies like time regression and causality violations require guarantees such as monotonic reads and consistent prefix reads. Implementing stronger guarantees in application code is complex and error-prone, emphasizing the importance of transactions in managing replication challenges.",
							],
							imageUrl:
								"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289516/blog-cover-images/gdfkqmcsgrl3yq32mxmx.webp",
						},
						{
							heading: ["# **Multi-Leader Replication**"],
							children: [
								"So far in this chapter we have only considered replication architectures using a single leader. Although that is a common approach, there are interesting alternatives.",
								"Leader-based replication has one major downside: there is only one leader, and all writes must go through it.[iv]() If you can’t connect to the leader for any reason, for example due to a network interruption between you and the leader, you can’t write to the database.",
								"A natural extension of the leader-based replication model is to allow more than one node to accept writes. Replication still happens in the same way: each node that processes a write must forward that data change to all the other nodes. We call this a *multi-leader* configuration (also known as *master–master* or *active/active replication*). In this setup, each leader simultaneously acts as a follower to the other leaders.",
								[
									{
										heading: [
											"## **Use Cases for Multi-Leader Replication**",
										],
										children: [
											"It rarely makes sense to use a multi-leader setup within a single datacenter, because the benefits rarely outweigh the added complexity. However, there are some situations in which this configuration is reasonable.",
											[
												{
													heading: [
														"### **Multi-datacenter operation**",
													],
													children: [
														"Imagine you have a database with replicas in several different datacenters (perhaps so that you can tolerate failure of an entire datacenter, or perhaps in order to be closer to your users). With a normal leader-based replication setup, the leader has to be in *one* of the datacenters, and all writes must go through that datacenter.",
														"In a multi-leader configuration, you can have a leader in *each* datacenter. [Figure 5-6](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#fig_replication_multi_dc) shows what this architecture might look like. Within each datacenter, regular leader–follower replication is used; between datacenters, each datacenter’s leader replicates its changes to the leaders in other datacenters.",
														"![ddia 0506](blob:https://johnfactotum.github.io/7538d256-6abc-4208-8d4b-6c1386b6d591)",
														"###### *Figure 5-6. Multi-leader replication across multiple datacenters.*",
														"Let’s compare how the single-leader and multi-leader configurations fare in a multi-datacenter deployment:",
														"Performance",
														"In a single-leader configuration, every write must go over the internet to the datacenter with the leader. This can add significant latency to writes and might contravene the purpose of having multiple datacenters in the first place. In a multi-leader configuration, every write can be processed in the local datacenter and is replicated asynchronously to the other datacenters. Thus, the inter-datacenter network delay is hidden from users, which means the perceived performance may be better.",
														"Tolerance of datacenter outages",
														"In a single-leader configuration, if the datacenter with the leader fails, failover can promote a follower in another datacenter to be leader. In a multi-leader configuration, each datacenter can continue operating independently of the others, and replication catches up when the failed datacenter comes back online.",
														"Tolerance of network problems",
														"Traffic between datacenters usually goes over the public internet, which may be less reliable than the local network within a datacenter. A single-leader configuration is very sensitive to problems in this inter-datacenter link, because writes are made synchronously over this link. A multi-leader configuration with asynchronous replication can usually tolerate network problems better: a temporary network interruption does not prevent writes being processed.",
														"Some databases support multi-leader configurations by default, but it is also often implemented with external tools, such as Tungsten Replicator for MySQL \\[[26]()\\], BDR for PostgreSQL \\[[27]()\\], and GoldenGate for Oracle \\[[19]()\\].",
														"Although multi-leader replication has advantages, it also has a big downside: the same data may be concurrently modified in two different datacenters, and those write conflicts must be resolved (indicated as “conflict resolution” in [Figure 5-6](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#fig_replication_multi_dc)). We will discuss this issue in [“Handling Write Conflicts”](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#sec_replication_write_conflicts).",
														"As multi-leader replication is a somewhat retrofitted feature in many databases, there are often subtle configuration pitfalls and surprising interactions with other database features. For example, autoincrementing keys, triggers, and integrity constraints can be problematic. For this reason, multi-leader replication is often considered dangerous territory that should be avoided if possible \\[[28]()\\].",
													],
													summary: [
														"Multi-leader replication boosts performance but risks data conflicts and complex configurations.",
													],
													longSummary: [
														"In a multi-leader replication setup, each datacenter has its own leader, unlike a single-leader configuration where all writes go through one datacenter. This approach enhances performance by processing writes locally and replicating them asynchronously, improves tolerance to datacenter outages, and handles network issues between datacenters better. Some databases support multi-leader configurations natively, while others use tools like Tungsten Replicator for MySQL. However, a major drawback is the potential for concurrent data modifications across datacenters, necessitating conflict resolution. This setup can be risky due to complex configurations and unexpected interactions with features like autoincrementing keys and integrity constraints.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289567/blog-cover-images/wdl19avkeolioqiks1ju.webp",
												},
												{
													heading: [
														"### **Clients with offline operation**",
													],
													children: [
														"Another situation in which multi-leader replication is appropriate is if you have an application that needs to continue to work while it is disconnected from the internet.",
														"For example, consider the calendar apps on your mobile phone, your laptop, and other devices. You need to be able to see your meetings (make read requests) and enter new meetings (make write requests) at any time, regardless of whether your device currently has an internet connection. If you make any changes while you are offline, they need to be synced with a server and your other devices when the device is next online.",
														"In this case, every device has a local database that acts as a leader (it accepts write requests), and there is an asynchronous multi-leader replication process (sync) between the replicas of your calendar on all of your devices. The replication lag may be hours or even days, depending on when you have internet access available.",
														"From an architectural point of view, this setup is essentially the same as multi-leader replication between datacenters, taken to the extreme: each device is a “datacenter,” and the network connection between them is extremely unreliable. As the rich history of broken calendar sync implementations demonstrates, multi-leader replication is a tricky thing to get right.",
														"There are tools that aim to make this kind of multi-leader configuration easier. For example, CouchDB is designed for this mode of operation \\[[29]()\\].",
													],
													summary: [
														"Multi-leader replication enables offline functionality, syncing devices like independent datacenters when online.",
													],
													longSummary: [
														"Multi-leader replication is ideal for applications that must operate offline, such as calendar apps on various devices. Each device acts as a leader with a local database, accepting write requests and using asynchronous multi-leader replication to sync changes when online. This setup mirrors multi-leader replication between datacenters but extends it to individual devices with unreliable network connections. Despite the challenges in implementing this correctly, as evidenced by past issues with calendar syncs, tools like CouchDB are specifically designed to support this mode of operation, ensuring functionality even when disconnected from the internet.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289568/blog-cover-images/iik7nvlgozpidlusjiz8.webp",
												},
												{
													heading: [
														"### **Collaborative editing**",
													],
													children: [
														"*Real-time collaborative editing* applications allow several people to edit a document simultaneously. For example, Etherpad \\[[30]()\\] and Google Docs \\[[31]()\\] allow multiple people to concurrently edit a text document or spreadsheet (the algorithm is briefly discussed in [“Automatic Conflict Resolution”](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#sidebar_conflict_resolution)).",
														"We don’t usually think of collaborative editing as a database replication problem, but it has a lot in common with the previously mentioned offline editing use case. When one user edits a document, the changes are instantly applied to their local replica (the state of the document in their web browser or client application) and asynchronously replicated to the server and any other users who are editing the same document.",
														"If you want to guarantee that there will be no editing conflicts, the application must obtain a lock on the document before a user can edit it. If another user wants to edit the same document, they first have to wait until the first user has committed their changes and released the lock. This collaboration model is equivalent to single-leader replication with transactions on the leader.",
														"However, for faster collaboration, you may want to make the unit of change very small (e.g., a single keystroke) and avoid locking. This approach allows multiple users to edit simultaneously, but it also brings all the challenges of multi-leader replication, including requiring conflict resolution \\[[32]()\\].",
													],
													summary: [
														"Collaborative editing apps enable simultaneous document edits, tackling multi-leader replication challenges.",
													],
													longSummary: [
														"Real-time collaborative editing applications like Etherpad and Google Docs enable multiple users to edit a document simultaneously. Although not typically seen as a database replication issue, they share similarities with offline editing. Changes made by a user are instantly applied locally and asynchronously replicated to the server and other users. To prevent editing conflicts, applications can use locks, akin to single-leader replication with transactions. However, for faster collaboration, minimizing the unit of change (e.g., a single keystroke) and avoiding locks allows simultaneous editing by multiple users, introducing challenges of multi-leader replication, including the need for conflict resolution.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289569/blog-cover-images/w8q5q2ap95etb5rqk4qh.webp",
												},
											],
										],
										summary: [
											"Multi-leader replication offers local writes and offline functionality but demands careful conflict resolution.",
										],
										longSummary: [
											"Using a multi-leader setup in a single datacenter is complex but useful in specific cases. It allows local processing of writes and asynchronous replication, boosting performance and resilience to outages. However, it introduces challenges like conflict resolution due to concurrent data modifications and unpredictable interactions with database features. This setup is ideal for applications needing offline functionality, such as calendar apps, where each device acts as a leader. Real-time collaborative editing, like Google Docs, also benefits from this approach, requiring careful conflict management to enable simultaneous edits without locking.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289525/blog-cover-images/i52mhngs8cpraig0cyes.webp",
									},
									{
										heading: [
											"## **Handling Write Conflicts**",
										],
										children: [
											"The biggest problem with multi-leader replication is that write conflicts can occur, which means that conflict resolution is required.",
											"For example, consider a wiki page that is simultaneously being edited by two users, as shown in [Figure 5-7](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#fig_replication_write_conflict). User 1 changes the title of the page from A to B, and user 2 changes the title from A to C at the same time. Each user’s change is successfully applied to their local leader. However, when the changes are asynchronously replicated, a conflict is detected \\[[33]()\\]. This problem does not occur in a single-leader database.",
											"![ddia 0507](blob:https://johnfactotum.github.io/12ce0a57-b2b6-4963-819f-8f93c341c408)",
											"###### *Figure 5-7. A write conflict caused by two leaders concurrently updating the same record.*",
											[
												{
													heading: [
														"### **Synchronous versus asynchronous conflict detection**",
													],
													children: [
														"In a single-leader database, the second writer will either block and wait for the first write to complete, or abort the second write transaction, forcing the user to retry the write. On the other hand, in a multi-leader setup, both writes are successful, and the conflict is only detected asynchronously at some later point in time. At that time, it may be too late to ask the user to resolve the conflict.",
														"In principle, you could make the conflict detection synchronous—i.e., wait for the write to be replicated to all replicas before telling the user that the write was successful. However, by doing so, you would lose the main advantage of multi-leader replication: allowing each replica to accept writes independently. If you want synchronous conflict detection, you might as well just use single-leader replication.",
													],
													summary: [
														"Single-leader databases block or abort writes; multi-leader setups risk late conflict detection.",
													],
													longSummary: [
														"In a single-leader database, a second writer must either wait for the first write to complete or retry if the transaction is aborted. In contrast, multi-leader setups allow both writes to succeed initially, but conflicts are detected later, potentially too late for resolution. Making conflict detection synchronous by waiting for replication to all replicas negates the main benefit of multi-leader replication, which is independent write acceptance at each replica. Therefore, if synchronous conflict detection is important, single-leader replication may be more suitable.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289571/blog-cover-images/i1rznlhneidovoe9zavj.webp",
												},
												{
													heading: [
														"### **Conflict avoidance**",
													],
													children: [
														"The simplest strategy for dealing with conflicts is to avoid them: if the application can ensure that all writes for a particular record go through the same leader, then conflicts cannot occur. Since many implementations of multi-leader replication handle conflicts quite poorly, avoiding conflicts is a frequently recommended approach \\[[34]()\\].",
														"For example, in an application where a user can edit their own data, you can ensure that requests from a particular user are always routed to the same datacenter and use the leader in that datacenter for reading and writing. Different users may have different “home” datacenters (perhaps picked based on geographic proximity to the user), but from any one user’s point of view the configuration is essentially single-leader.",
														"However, sometimes you might want to change the designated leader for a record—perhaps because one datacenter has failed and you need to reroute traffic to another datacenter, or perhaps because a user has moved to a different location and is now closer to a different datacenter. In this situation, conflict avoidance breaks down, and you have to deal with the possibility of concurrent writes on different leaders.",
													],
													summary: [
														"Avoid conflicts in multi-leader replication by routing user requests to a consistent leader.",
													],
													longSummary: [
														'To manage conflicts in multi-leader replication, the simplest approach is to avoid them by directing all writes for a specific record through the same leader. This can be achieved by routing a user\'s requests to their designated "home" datacenter, which handles both reading and writing. Users are typically assigned to datacenters based on geographic proximity. However, this conflict avoidance strategy can fail if the designated leader needs to change, such as during a datacenter failure or user relocation, leading to potential concurrent writes on different leaders.',
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289573/blog-cover-images/hqv382xid9fd8obxxhym.webp",
												},
												{
													heading: [
														"### **Converging toward a consistent state**",
													],
													children: [
														"A single-leader database applies writes in a sequential order: if there are several updates to the same field, the last write determines the final value of the field.",
														"In a multi-leader configuration, there is no defined ordering of writes, so it’s not clear what the final value should be. In [Figure 5-7](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#fig_replication_write_conflict), at leader 1 the title is first updated to B and then to C; at leader 2 it is first updated to C and then to B. Neither order is “more correct” than the other.",
														"If each replica simply applied writes in the order that it saw the writes, the database would end up in an inconsistent state: the final value would be C at leader 1 and B at leader 2. That is not acceptable—every replication scheme must ensure that the data is eventually the same in all replicas. Thus, the database must resolve the conflict in a *convergent* way, which means that all replicas must arrive at the same final value when all changes have been replicated.",
														"There are various ways of achieving convergent conflict resolution:",
														"* Give each write a unique ID (e.g., a timestamp, a long random number, a UUID, or a hash of the key and value), pick the write with the highest ID as the *winner*, and throw away the other writes. If a timestamp is used, this technique is known as *last write wins* (LWW). Although this approach is popular, it is dangerously prone to data loss \\[[35]()\\]. We will discuss LWW in more detail at the end of this chapter ([“Detecting Concurrent Writes”](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#sec_replication_concurrent)).",
														"* Give each replica a unique ID, and let writes that originated at a higher-numbered replica always take precedence over writes that originated at a lower-numbered replica. This approach also implies data loss.",
														"* Somehow merge the values together—e.g., order them alphabetically and then concatenate them (in [Figure 5-7](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#fig_replication_write_conflict), the merged title might be something like “B/C”).",
														"* Record the conflict in an explicit data structure that preserves all information, and write application code that resolves the conflict at some later time (perhaps by prompting the user).",
													],
													summary: [
														"Multi-leader databases face write conflicts; explore strategies for convergent conflict resolution.",
													],
													longSummary: [
														"In single-leader databases, writes are applied sequentially, with the last write determining the final value. Multi-leader configurations, however, lack a defined order for writes, leading to conflict resolution challenges. To ensure data consistency across replicas, databases must implement convergent conflict resolution. Approaches include using unique IDs for writes and selecting the highest (risking data loss), prioritizing writes from higher-numbered replicas (also risking data loss), merging values (like alphabetical concatenation), or explicitly recording conflicts for later resolution by application code or users.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289575/blog-cover-images/skzi9vuhdyn8gup0hfyt.webp",
												},
												{
													heading: [
														"### **Custom conflict resolution logic**",
													],
													children: [
														"As the most appropriate way of resolving a conflict may depend on the application, most multi-leader replication tools let you write conflict resolution logic using application code. That code may be executed on write or on read:",
														"On write",
														"As soon as the database system detects a conflict in the log of replicated changes, it calls the conflict handler. For example, Bucardo allows you to write a snippet of Perl for this purpose. This handler typically cannot prompt a user—it runs in a background process and it must execute quickly.",
														"On read",
														"When a conflict is detected, all the conflicting writes are stored. The next time the data is read, these multiple versions of the data are returned to the application. The application may prompt the user or automatically resolve the conflict, and write the result back to the database. CouchDB works this way, for example.",
														"Note that conflict resolution usually applies at the level of an individual row or document, not for an entire transaction \\[[36]()\\]. Thus, if you have a transaction that atomically makes several different writes (see [Chapter 7]()), each write is still considered separately for the purposes of conflict resolution.",
														[
															{
																heading: [
																	"##### **Automatic Conflict Resolution**",
																],
																children: [
																	"Conflict resolution rules can quickly become complicated, and custom code can be error-prone. Amazon is a frequently cited example of surprising effects due to a conflict resolution handler: for some time, the conflict resolution logic on the shopping cart would preserve items added to the cart, but not items removed from the cart. Thus, customers would sometimes see items reappearing in their carts even though they had previously been removed \\[[37]()\\].",
																	"There has been some interesting research into automatically resolving conflicts caused by concurrent data modifications. A few lines of research are worth mentioning:",
																	"* *Conflict-free replicated datatypes* (CRDTs) \\[[32](), [38]()\\] are a family of data structures for sets, maps, ordered lists, counters, etc. that can be concurrently edited by multiple users, and which automatically resolve conflicts in sensible ways. Some CRDTs have been implemented in Riak 2.0 \\[[39](), [40]()\\].",
																	"* *Mergeable persistent data structures* \\[[41]()\\] track history explicitly, similarly to the Git version control system, and use a three-way merge function (whereas CRDTs use two-way merges).",
																	"* *Operational transformation* \\[[42]()\\] is the conflict resolution algorithm behind collaborative editing applications such as Etherpad \\[[30]()\\] and Google Docs \\[[31]()\\]. It was designed particularly for concurrent editing of an ordered list of items, such as the list of characters that constitute a text document.",
																	"Implementations of these algorithms in databases are still young, but it’s likely that they will be integrated into more replicated data systems in the future. Automatic conflict resolution could make multi-leader data synchronization much simpler for applications to deal with.",
																],
																summary: [
																	"Simplifying conflict resolution: CRDTs and operational transformation revolutionize data synchronization in applications.",
																],
																longSummary: [
																	"Conflict resolution rules can be complex and prone to errors, as seen in Amazon's shopping cart issue where removed items reappeared. Research into automatic conflict resolution includes CRDTs in Riak 2.0, mergeable persistent data structures that track history like Git, and operational transformation used in collaborative editing tools like Etherpad and Google Docs. Although these algorithms are still in early stages for databases, they are expected to be integrated into more replicated data systems, simplifying multi-leader data synchronization for applications in the future.",
																],
																imageUrl:
																	"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289619/blog-cover-images/oifi5ibqojjujmb8a2h4.webp",
															},
														],
													],
													summary: [
														"Master conflict resolution in multi-leader replication with cutting-edge algorithms and application-driven logic.",
													],
													longSummary: [
														"Multi-leader replication tools often allow conflict resolution through application code, executed either on write or read. On write, conflict handlers like Bucardo's Perl snippets quickly resolve issues without user interaction. On read, conflicting writes are stored and returned for resolution, possibly involving user input, as seen in CouchDB. Conflict resolution typically occurs at the row or document level and can be complex, as demonstrated by Amazon's shopping cart issue. Emerging solutions include CRDTs in Riak 2.0, mergeable data structures like Git, and operational transformation in collaborative tools like Etherpad. These innovations promise simpler multi-leader data synchronization in the future.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289576/blog-cover-images/u3uxpu6cthpsc47yd32e.webp",
												},
												{
													heading: [
														"### **What is a conflict?**",
													],
													children: [
														"Some kinds of conflict are obvious. In the example in [Figure 5-7](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#fig_replication_write_conflict), two writes concurrently modified the same field in the same record, setting it to two different values. There is little doubt that this is a conflict.",
														"Other kinds of conflict can be more subtle to detect. For example, consider a meeting room booking system: it tracks which room is booked by which group of people at which time. This application needs to ensure that each room is only booked by one group of people at any one time (i.e., there must not be any overlapping bookings for the same room). In this case, a conflict may arise if two different bookings are created for the same room at the same time. Even if the application checks availability before allowing a user to make a booking, there can be a conflict if the two bookings are made on two different leaders.",
														"There isn’t a quick ready-made answer, but in the following chapters we will trace a path toward a good understanding of this problem. We will see some more examples of conflicts in [Chapter 7](), and in [Chapter 12]() we will discuss scalable approaches for detecting and resolving conflicts in a replicated system.",
													],
													summary: [
														"Explore subtle conflicts in systems, from double bookings to scalable conflict resolution strategies.",
													],
													longSummary: [
														"Conflicts can be overt, like two writes altering the same field differently, or subtle, such as double bookings in a meeting room system despite availability checks. There is no simple solution for these conflicts, but upcoming chapters will guide you through understanding the issue. Chapter 7 will provide more examples, while Chapter 12 will explore scalable methods for detecting and resolving conflicts in replicated systems.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289578/blog-cover-images/jdcqb7z48nji4jinaexn.webp",
												},
											],
										],
										summary: [
											"Multi-leader replication risks write conflicts, requiring complex resolution strategies for data consistency.",
										],
										longSummary: [
											"Multi-leader replication struggles with write conflicts, needing resolution when simultaneous edits occur, like two users changing a wiki page title. Unlike single-leader databases, multi-leader systems detect conflicts asynchronously, often too late for user intervention. Routing requests to the same leader can avoid conflicts but fails if the leader changes. Resolution strategies include unique IDs, prioritizing writes, merging values, or recording conflicts, though these can be complex and error-prone. Emerging solutions like CRDTs and operational transformation aim to simplify this, but subtle conflicts, such as double bookings, need careful handling.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289532/blog-cover-images/uj1rgonojznkb9nqwrdr.webp",
									},
									{
										heading: [
											"## **Multi-Leader Replication Topologies**",
										],
										children: [
											"A *replication topology* describes the communication paths along which writes are propagated from one node to another. If you have two leaders, like in [Figure 5-7](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#fig_replication_write_conflict), there is only one plausible topology: leader 1 must send all of its writes to leader 2, and vice versa. With more than two leaders, various different topologies are possible. Some examples are illustrated in [Figure 5-8](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#fig_replication_topologies).",
											"![ddia 0508](blob:https://johnfactotum.github.io/7ce074f9-58e7-45e7-9c47-e9113471929f)",
											"###### *Figure 5-8. Three example topologies in which multi-leader replication can be set up.*",
											"The most general topology is *all-to-all* ([Figure 5-8](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#fig_replication_topologies) \\[c\\]), in which every leader sends its writes to every other leader. However, more restricted topologies are also used: for example, MySQL by default supports only a *circular topology* \\[[34]()\\], in which each node receives writes from one node and forwards those writes (plus any writes of its own) to one other node. Another popular topology has the shape of a *star*:[v]() one designated root node forwards writes to all of the other nodes. The star topology can be generalized to a tree.",
											"In circular and star topologies, a write may need to pass through several nodes before it reaches all replicas. Therefore, nodes need to forward data changes they receive from other nodes. To prevent infinite replication loops, each node is given a unique identifier, and in the replication log, each write is tagged with the identifiers of all the nodes it has passed through \\[[43]()\\]. When a node receives a data change that is tagged with its own identifier, that data change is ignored, because the node knows that it has already been processed.",
											"A problem with circular and star topologies is that if just one node fails, it can interrupt the flow of replication messages between other nodes, causing them to be unable to communicate until the node is fixed. The topology could be reconfigured to work around the failed node, but in most deployments such reconfiguration would have to be done manually. The fault tolerance of a more densely connected topology (such as all-to-all) is better because it allows messages to travel along different paths, avoiding a single point of failure.",
											"On the other hand, all-to-all topologies can have issues too. In particular, some network links may be faster than others (e.g., due to network congestion), with the result that some replication messages may “overtake” others, as illustrated in [Figure 5-9](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#fig_replication_causality).",
											"![ddia 0509](blob:https://johnfactotum.github.io/3354e8d7-6350-42b8-9d3e-220d577aa676)",
											"###### *Figure 5-9. With multi-leader replication, writes may arrive in the wrong order at some replicas.*",
											"In [Figure 5-9](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#fig_replication_causality), client A inserts a row into a table on leader 1, and client B updates that row on leader 3. However, leader 2 may receive the writes in a different order: it may first receive the update (which, from its point of view, is an update to a row that does not exist in the database) and only later receive the corresponding insert (which should have preceded the update).",
											"This is a problem of causality, similar to the one we saw in [“Consistent Prefix Reads”](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#sec_replication_consistent_prefix): the update depends on the prior insert, so we need to make sure that all nodes process the insert first, and then the update. Simply attaching a timestamp to every write is not sufficient, because clocks cannot be trusted to be sufficiently in sync to correctly order these events at leader 2 (see [Chapter 8]()).",
											"To order these events correctly, a technique called *version vectors* can be used, which we will discuss later in this chapter (see [“Detecting Concurrent Writes”](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#sec_replication_concurrent)). However, conflict detection techniques are poorly implemented in many multi-leader replication systems. For example, at the time of writing, PostgreSQL BDR does not provide causal ordering of writes \\[[27]()\\], and Tungsten Replicator for MySQL doesn’t even try to detect conflicts \\[[34]()\\].",
											"If you are using a system with multi-leader replication, it is worth being aware of these issues, carefully reading the documentation, and thoroughly testing your database to ensure that it really does provide the guarantees you believe it to have.",
										],
										summary: [
											"Explore multi-leader replication topologies: circular, star, all-to-all—each with unique challenges.",
										],
										longSummary: [
											"A replication topology defines how writes are communicated between nodes, with options like all-to-all, circular, and star configurations. Circular and star topologies require nodes to forward changes and tag writes to prevent loops, but a single node failure can disrupt replication. All-to-all topologies offer better fault tolerance by allowing multiple message paths, but they can suffer from causality issues due to varying network speeds, leading to out-of-order writes. Version vectors can help, but many systems poorly implement conflict detection, so it's crucial to thoroughly test your database to ensure it meets your expectations.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289533/blog-cover-images/ofofes2exh7ludojpqgu.webp",
									},
								],
							],
							summary: [
								"Multi-leader replication allows independent writes but requires careful conflict resolution and topology management.",
							],
							longSummary: [
								"Multi-leader replication, or master-master replication, allows multiple nodes to accept writes, enhancing performance by processing writes locally and asynchronously replicating them. This setup improves tolerance to datacenter outages and network issues but introduces write conflicts, requiring complex resolution strategies. Applications like offline calendar apps and real-time collaborative editing benefit from this but face conflict management challenges. Topologies such as all-to-all, circular, and star dictate write propagation, each with pros and cons. Conflict resolution can be managed through application code, using strategies like last-write-wins, though these can be error-prone. Emerging technologies like CRDTs aim to simplify this process.",
							],
							imageUrl:
								"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289515/blog-cover-images/p9sjntyuhk4pohkahfcr.webp",
						},
						{
							heading: ["# **Leaderless Replication**"],
							children: [
								"The replication approaches we have discussed so far in this chapter—single-leader and multi-leader replication—are based on the idea that a client sends a write request to one node (the leader), and the database system takes care of copying that write to the other replicas. A leader determines the order in which writes should be processed, and followers apply the leader’s writes in the same order.",
								"Some data storage systems take a different approach, abandoning the concept of a leader and allowing any replica to directly accept writes from clients. Some of the earliest replicated data systems were leaderless \\[[1](), [44]()\\], but the idea was mostly forgotten during the era of dominance of relational databases. It once again became a fashionable architecture for databases after Amazon used it for its in-house *Dynamo* system \\[[37]()\\].[vi]() Riak, Cassandra, and Voldemort are open source datastores with leaderless replication models inspired by Dynamo, so this kind of database is also known as *Dynamo-style*.",
								"In some leaderless implementations, the client directly sends its writes to several replicas, while in others, a coordinator node does this on behalf of the client. However, unlike a leader database, that coordinator does not enforce a particular ordering of writes. As we shall see, this difference in design has profound consequences for the way the database is used.",
								[
									{
										heading: [
											"## **Writing to the Database When a Node Is Down**",
										],
										children: [
											"Imagine you have a database with three replicas, and one of the replicas is currently unavailable—perhaps it is being rebooted to install a system update. In a leader-based configuration, if you want to continue processing writes, you may need to perform a failover (see [“Handling Node Outages”](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#sec_replication_failover)).",
											"On the other hand, in a leaderless configuration, failover does not exist. [Figure 5-10](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#fig_replication_quorum_node_outage) shows what happens: the client (user 1234) sends the write to all three replicas in parallel, and the two available replicas accept the write but the unavailable replica misses it. Let’s say that it’s sufficient for two out of three replicas to acknowledge the write: after user 1234 has received two *ok* responses, we consider the write to be successful. The client simply ignores the fact that one of the replicas missed the write.",
											"![ddia 0510](blob:https://johnfactotum.github.io/45c93c9b-7cce-4bc3-a934-d3f0fa6be1da)",
											"###### *Figure 5-10. A quorum write, quorum read, and read repair after a node outage.*",
											"Now imagine that the unavailable node comes back online, and clients start reading from it. Any writes that happened while the node was down are missing from that node. Thus, if you read from that node, you may get *stale* (outdated) values as responses.",
											"To solve that problem, when a client reads from the database, it doesn’t just send its request to one replica: *read requests are also sent to several nodes in parallel*. The client may get different responses from different nodes; i.e., the up-to-date value from one node and a stale value from another. Version numbers are used to determine which value is newer (see [“Detecting Concurrent Writes”](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#sec_replication_concurrent)).",
											"![ddia 0510](blob:https://johnfactotum.github.io/45c93c9b-7cce-4bc3-a934-d3f0fa6be1da)",
											"###### *Figure 5-10. A quorum write, quorum read, and read repair after a node outage.*",
											[
												{
													heading: [
														"### **Read repair and anti-entropy**",
													],
													children: [
														"The replication scheme should ensure that eventually all the data is copied to every replica. After an unavailable node comes back online, how does it catch up on the writes that it missed?",
														"Two mechanisms are often used in Dynamo-style datastores:",
														"Read repair",
														"When a client makes a read from several nodes in parallel, it can detect any stale responses. For example, in [Figure 5-10](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#fig_replication_quorum_node_outage), user 2345 gets a version 6 value from replica 3 and a version 7 value from replicas 1 and 2. The client sees that replica 3 has a stale value and writes the newer value back to that replica. This approach works well for values that are frequently read.",
														"Anti-entropy process",
														"In addition, some datastores have a background process that constantly looks for differences in the data between replicas and copies any missing data from one replica to another. Unlike the replication log in leader-based replication, this *anti-entropy process* does not copy writes in any particular order, and there may be a significant delay before data is copied.",
														"Not all systems implement both of these; for example, Voldemort currently does not have an anti-entropy process. Note that without an anti-entropy process, values that are rarely read may be missing from some replicas and thus have reduced durability, because read repair is only performed when a value is read by the application.",
													],
													summary: [
														"Ensure data consistency in distributed systems with read repair and anti-entropy processes.",
													],
													longSummary: [
														"In Dynamo-style datastores, ensuring all data is eventually copied to every replica involves two key mechanisms: Read repair and the Anti-entropy process. Read repair updates stale replicas during client reads by writing newer values back, which is effective for frequently accessed data. The Anti-entropy process, a background task, continuously checks for data discrepancies between replicas and copies missing data, albeit without a specific order and with potential delays. Not all systems use both methods; for instance, Voldemort lacks an anti-entropy process, risking missing data in rarely read replicas and thus reducing durability.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289579/blog-cover-images/vcadinjgthrgqzyu427b.webp",
												},
												{
													heading: [
														"### **Quorums for reading and writing**",
													],
													children: [
														"In the example of [Figure 5-10](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#fig_replication_quorum_node_outage), we considered the write to be successful even though it was only processed on two out of three replicas. What if only one out of three replicas accepted the write? How far can we push this?",
														"If we know that every successful write is guaranteed to be present on at least two out of three replicas, that means at most one replica can be stale. Thus, if we read from at least two replicas, we can be sure that at least one of the two is up to date. If the third replica is down or slow to respond, reads can nevertheless continue returning an up-to-date value.",
														"More generally, if there are *n* replicas, every write must be confirmed by *w* nodes to be considered successful, and we must query at least *r* nodes for each read. (In our example, *n* = 3, *w* = 2, *r* = 2.) As long as *w* + *r* > *n*, we expect to get an up-to-date value when reading, because at least one of the *r* nodes we’re reading from must be up to date. Reads and writes that obey these *r* and *w* values are called *quorum* reads and writes \\[[44]()\\].[vii]() You can think of *r* and *w* as the minimum number of votes required for the read or write to be valid.",
														"In Dynamo-style databases, the parameters *n*, *w*, and *r* are typically configurable. A common choice is to make *n* an odd number (typically 3 or 5) and to set *w* = *r* = (*n* + 1) / 2 (rounded up). However, you can vary the numbers as you see fit. For example, a workload with few writes and many reads may benefit from setting *w* = *n* and *r* = 1. This makes reads faster, but has the disadvantage that just one failed node causes all database writes to fail.",
														"###### **Note**",
														"There may be more than *n* nodes in the cluster, but any given value is stored only on *n* nodes. This allows the dataset to be partitioned, supporting datasets that are larger than you can fit on one node. We will return to partitioning in [Chapter 6]().",
														"The quorum condition, *w* + *r* > *n*, allows the system to tolerate unavailable nodes as follows:",
														"* If *w* < *n*, we can still process writes if a node is unavailable.",
														"* If *r* < *n*, we can still process reads if a node is unavailable.",
														"* With *n* = 3, *w* = 2, *r* = 2 we can tolerate one unavailable node.",
														"* With *n* = 5, *w* = 3, *r* = 3 we can tolerate two unavailable nodes. This case is illustrated in [Figure 5-11](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#fig_replication_quorum_overlap).",
														"* Normally, reads and writes are always sent to all *n* replicas in parallel. The parameters *w* and *r* determine how many nodes we wait for—i.e., how many of the *n* nodes need to report success before we consider the read or write to be successful.",
														"![ddia 0511](blob:https://johnfactotum.github.io/97f22801-907f-4236-9262-15381a206ca9)",
														"###### *Figure 5-11. If w + r > n, at least one of the r replicas you read from must have seen the most recent successful write.*",
														"If fewer than the required *w* or *r* nodes are available, writes or reads return an error. A node could be unavailable for many reasons: because the node is down (crashed, powered down), due to an error executing the operation (can’t write because the disk is full), due to a network interruption between the client and the node, or for any number of other reasons. We only care whether the node returned a successful response and don’t need to distinguish between different kinds of fault.",
													],
													summary: [
														"Quorum reads/writes ensure data consistency in distributed databases, even with node failures.",
													],
													longSummary: [
														"In distributed databases, quorum reads and writes ensure data consistency by requiring a write confirmation from w nodes and querying at least r nodes for reads, with w + r > n. This setup ensures access to current data, as at least one node is up-to-date. In Dynamo-style databases, n is usually odd (3 or 5), with w = r = (n + 1)/2, allowing for node failures. For n = 3, w = 2, r = 2, one node can fail; for n = 5, w = 3, r = 3, two nodes can fail. Operations succeed if enough nodes respond.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289580/blog-cover-images/qhhne4tqtbfjcurrty4b.webp",
												},
												{
													heading: [
														"## **Limitations of Quorum Consistency**",
													],
													children: [
														"If you have *n* replicas, and you choose *w* and *r* such that *w* + *r* > *n*, you can generally expect every read to return the most recent value written for a key. This is the case because the set of nodes to which you’ve written and the set of nodes from which you’ve read must overlap. That is, among the nodes you read there must be at least one node with the latest value (illustrated in [Figure 5-11](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#fig_replication_quorum_overlap)).",
														"Often, *r* and *w* are chosen to be a majority (more than *n*/2) of nodes, because that ensures *w* + *r* > *n* while still tolerating up to *n*/2 node failures. But quorums are not necessarily majorities—it only matters that the sets of nodes used by the read and write operations overlap in at least one node. Other quorum assignments are possible, which allows some flexibility in the design of distributed algorithms \\[[45]()\\].",
														"You may also set *w* and *r* to smaller numbers, so that *w* + *r* ≤ *n* (i.e., the quorum condition is not satisfied). In this case, reads and writes will still be sent to *n* nodes, but a smaller number of successful responses is required for the operation to succeed.",
														"With a smaller *w* and *r* you are more likely to read stale values, because it’s more likely that your read didn’t include the node with the latest value. On the upside, this configuration allows lower latency and higher availability: if there is a network interruption and many replicas become unreachable, there’s a higher chance that you can continue processing reads and writes. Only after the number of reachable replicas falls below *w* or *r* does the database become unavailable for writing or reading, respectively.",
														"However, even with *w* + *r* > *n*, there are likely to be edge cases where stale values are returned. These depend on the implementation, but possible scenarios include:",
														"* If a sloppy quorum is used (see [“Sloppy Quorums and Hinted Handoff”](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#sec_replication_sloppy_quorum)), the *w* writes may end up on different nodes than the *r* reads, so there is no longer a guaranteed overlap between the *r* nodes and the *w* nodes \\[[46]()\\].",
														"* If two writes occur concurrently, it is not clear which one happened first. In this case, the only safe solution is to merge the concurrent writes (see [“Handling Write Conflicts”](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#sec_replication_write_conflicts)). If a winner is picked based on a timestamp (last write wins), writes can be lost due to clock skew \\[[35]()\\]. We will return to this topic in [“Detecting Concurrent Writes”](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#sec_replication_concurrent).",
														"* If a write happens concurrently with a read, the write may be reflected on only some of the replicas. In this case, it’s undetermined whether the read returns the old or the new value.",
														"* If a write succeeded on some replicas but failed on others (for example because the disks on some nodes are full), and overall succeeded on fewer than *w* replicas, it is not rolled back on the replicas where it succeeded. This means that if a write was reported as failed, subsequent reads may or may not return the value from that write \\[[47]()\\].",
														"* If a node carrying a new value fails, and its data is restored from a replica carrying an old value, the number of replicas storing the new value may fall below *w*, breaking the quorum condition.",
														"* Even if everything is working correctly, there are edge cases in which you can get unlucky with the timing, as we shall see in [“Linearizability and quorums”]().",
														"Thus, although quorums appear to guarantee that a read returns the latest written value, in practice it is not so simple. Dynamo-style databases are generally optimized for use cases that can tolerate eventual consistency. The parameters *w* and *r* allow you to adjust the probability of stale values being read, but it’s wise to not take them as absolute guarantees.",
														"In particular, you usually do not get the guarantees discussed in [“Problems with Replication Lag”](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#sec_replication_lag) (reading your writes, monotonic reads, or consistent prefix reads), so the previously mentioned anomalies can occur in applications. Stronger guarantees generally require transactions or consensus. We will return to these topics in [Chapter 7]() and [Chapter 9]().",
														[
															{
																heading: [
																	"### **Monitoring staleness**",
																],
																children: [
																	"From an operational perspective, it’s important to monitor whether your databases are returning up-to-date results. Even if your application can tolerate stale reads, you need to be aware of the health of your replication. If it falls behind significantly, it should alert you so that you can investigate the cause (for example, a problem in the network or an overloaded node).",
																	"For leader-based replication, the database typically exposes metrics for the replication lag, which you can feed into a monitoring system. This is possible because writes are applied to the leader and to followers in the same order, and each node has a position in the replication log (the number of writes it has applied locally). By subtracting a follower’s current position from the leader’s current position, you can measure the amount of replication lag.",
																	"However, in systems with leaderless replication, there is no fixed order in which writes are applied, which makes monitoring more difficult. Moreover, if the database only uses read repair (no anti-entropy), there is no limit to how old a value might be—if a value is only infrequently read, the value returned by a stale replica may be ancient.",
																	"There has been some research on measuring replica staleness in databases with leaderless replication and predicting the expected percentage of stale reads depending on the parameters *n*, *w*, and *r* \\[[48]()\\]. This is unfortunately not yet common practice, but it would be good to include staleness measurements in the standard set of metrics for databases. Eventual consistency is a deliberately vague guarantee, but for operability it’s important to be able to quantify “eventual.”",
																],
																summary: [
																	"Monitoring database replication lag is vital for ensuring timely data consistency and operational efficiency.",
																],
																longSummary: [
																	"Monitoring database replication lag is essential for ensuring up-to-date results. In leader-based replication, databases provide metrics indicating the difference between a follower's and leader's positions in the replication log. However, leaderless replication systems face monitoring challenges due to their non-fixed write order, particularly with read repair, where infrequently accessed values can become outdated. Although research exists on measuring replica staleness and predicting stale read percentages in leaderless systems using parameters n, w, and r, it is not yet standard practice. To improve operability, staleness measurements should be included in standard database metrics to better quantify \"eventual\" consistency.",
																],
																imageUrl:
																	"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289621/blog-cover-images/a9odstizwtylae6t38hj.webp",
															},
														],
													],
													summary: [
														"Optimize read/write settings in distributed systems to balance consistency, latency, and availability.",
													],
													longSummary: [
														"In a system with n replicas, setting write (w) and read (r) values so that w + r > n ensures overlapping nodes for reads and writes, promoting the return of the most recent value. While w and r are often majorities, smaller values (w + r ≤ n) can improve latency and availability but risk stale reads. Even with w + r > n, stale values may occur due to sloppy quorums, concurrent operations, or node failures. Dynamo-style databases focus on eventual consistency, adjusting w and r to manage stale read probabilities. Monitoring replication lag is crucial, especially in leaderless systems.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289583/blog-cover-images/qmkgqduwbg7odnjmtee3.webp",
												},
											],
										],
										summary: [
											"In leaderless databases, quorum reads and writes ensure consistency despite node failures and staleness.",
										],
										longSummary: [
											"In a database with three replicas, leaderless configurations allow writes to proceed by sending them to all replicas simultaneously. If two out of three replicas acknowledge the write, it's considered successful. When a node returns with stale data, read requests go to multiple nodes to find the newest version. Dynamo-style databases use read repair and anti-entropy to sync data. Quorum reads and writes, with parameters n, w, and r, ensure consistency despite node failures. This approach favors eventual consistency over immediate consistency, making replication lag monitoring and staleness measurements essential for database metrics.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289533/blog-cover-images/v3dk2b9mnxe5kxqmetot.webp",
									},
									{
										heading: [
											"## **Sloppy Quorums and Hinted Handoff**",
										],
										children: [
											"Databases with appropriately configured quorums can tolerate the failure of individual nodes without the need for failover. They can also tolerate individual nodes going slow, because requests don’t have to wait for all *n* nodes to respond—they can return when *w* or *r* nodes have responded. These characteristics make databases with leaderless replication appealing for use cases that require high availability and low latency, and that can tolerate occasional stale reads.",
											"However, quorums (as described so far) are not as fault-tolerant as they could be. A network interruption can easily cut off a client from a large number of database nodes. Although those nodes are alive, and other clients may be able to connect to them, to a client that is cut off from the database nodes, they might as well be dead. In this situation, it’s likely that fewer than *w* or *r* reachable nodes remain, so the client can no longer reach a quorum.",
											"In a large cluster (with significantly more than *n* nodes) it’s likely that the client can connect to *some* database nodes during the network interruption, just not to the nodes that it needs to assemble a quorum for a particular value. In that case, database designers face a trade-off:",
											"* Is it better to return errors to all requests for which we cannot reach a quorum of *w* or *r* nodes?",
											"* Or should we accept writes anyway, and write them to some nodes that are reachable but aren’t among the *n* nodes on which the value usually lives?",
											"The latter is known as a *sloppy quorum* \\[[37]()\\]: writes and reads still require *w* and *r* successful responses, but those may include nodes that are not among the designated *n* “home” nodes for a value. By analogy, if you lock yourself out of your house, you may knock on the neighbor’s door and ask whether you may stay on their couch temporarily.",
											"Once the network interruption is fixed, any writes that one node temporarily accepted on behalf of another node are sent to the appropriate “home” nodes. This is called *hinted handoff*. (Once you find the keys to your house again, your neighbor politely asks you to get off their couch and go home.)",
											"Sloppy quorums are particularly useful for increasing write availability: as long as *any* *w* nodes are available, the database can accept writes. However, this means that even when *w* + *r* > *n*, you cannot be sure to read the latest value for a key, because the latest value may have been temporarily written to some nodes outside of *n* \\[[47]()\\].",
											"Thus, a sloppy quorum actually isn’t a quorum at all in the traditional sense. It’s only an assurance of durability, namely that the data is stored on *w* nodes somewhere. There is no guarantee that a read of *r* nodes will see it until the hinted handoff has completed.",
											"Sloppy quorums are optional in all common Dynamo implementations. In Riak they are enabled by default, and in Cassandra and Voldemort they are disabled by default \\[[46](), [49](), [50]()\\].",
											[
												{
													heading: [
														"### **Multi-datacenter operation**",
													],
													children: [
														"We previously discussed cross-datacenter replication as a use case for multi-leader replication (see [“Multi-Leader Replication”](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#sec_replication_multi_leader)). Leaderless replication is also suitable for multi-datacenter operation, since it is designed to tolerate conflicting concurrent writes, network interruptions, and latency spikes.",
														"Cassandra and Voldemort implement their multi-datacenter support within the normal leaderless model: the number of replicas *n* includes nodes in all datacenters, and in the configuration you can specify how many of the *n* replicas you want to have in each datacenter. Each write from a client is sent to all replicas, regardless of datacenter, but the client usually only waits for acknowledgment from a quorum of nodes within its local datacenter so that it is unaffected by delays and interruptions on the cross-datacenter link. The higher-latency writes to other datacenters are often configured to happen asynchronously, although there is some flexibility in the configuration \\[[50](), [51]()\\].",
														"Riak keeps all communication between clients and database nodes local to one datacenter, so *n* describes the number of replicas within one datacenter. Cross-datacenter replication between database clusters happens asynchronously in the background, in a style that is similar to multi-leader replication \\[[52]()\\].",
													],
													summary: [
														"Explore leaderless replication for resilient multi-datacenter operations with Cassandra, Voldemort, and Riak.",
													],
													longSummary: [
														"Leaderless replication is ideal for multi-datacenter operations due to its ability to handle conflicting writes, network interruptions, and latency spikes. In systems like Cassandra and Voldemort, multi-datacenter support is integrated into the leaderless model, where the total number of replicas includes nodes across all datacenters, and you can specify the number of replicas per datacenter. Writes are sent to all replicas, but clients typically wait for acknowledgment from a quorum within the local datacenter. Riak, however, confines client-node communication to one datacenter, with asynchronous cross-datacenter replication occurring in the background, akin to multi-leader replication.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289590/blog-cover-images/se9ezjx79yrll3f6ioaa.webp",
												},
											],
										],
										summary: [
											"Leaderless replication ensures high availability and low latency, tolerating node failures and network issues.",
										],
										longSummary: [
											"Leaderless replication with configured quorums in databases ensures high availability and low latency, even with node failures, without needing failover. However, network issues can hinder quorum achievement, forcing a choice between returning errors or using 'sloppy quorums' to boost write availability by accepting writes on any available nodes. 'Hinted handoff' later corrects these writes. While this method increases availability, it doesn't ensure immediate consistency. In multi-datacenter setups, leaderless replication supports concurrent writes and network interruptions. Cassandra and Voldemort integrate multi-datacenter support, while Riak manages cross-datacenter replication asynchronously.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289535/blog-cover-images/ndjdulxp4ncu0dqby06z.webp",
									},
									{
										heading: [
											"## **Detecting Concurrent Writes**",
										],
										children: [
											"Dynamo-style databases allow several clients to concurrently write to the same key, which means that conflicts will occur even if strict quorums are used. The situation is similar to multi-leader replication (see [“Handling Write Conflicts”](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#sec_replication_write_conflicts)), although in Dynamo-style databases conflicts can also arise during read repair or hinted handoff.",
											"The problem is that events may arrive in a different order at different nodes, due to variable network delays and partial failures. For example, [Figure 5-12](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#fig_replication_concurrency) shows two clients, A and B, simultaneously writing to a key *X* in a three-node datastore:",
											"* Node 1 receives the write from A, but never receives the write from B due to a transient outage.",
											"* Node 2 first receives the write from A, then the write from B.",
											"* Node 3 first receives the write from B, then the write from A.",
											"![ddia 0512](blob:https://johnfactotum.github.io/18df6891-745e-48c9-a120-0e98789e297a)",
											"###### *Figure 5-12. Concurrent writes in a Dynamo-style datastore: there is no well-defined ordering.*",
											"If each node simply overwrote the value for a key whenever it received a write request from a client, the nodes would become permanently inconsistent, as shown by the final *get* request in [Figure 5-12](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#fig_replication_concurrency): node 2 thinks that the final value of *X* is B, whereas the other nodes think that the value is A.",
											"In order to become eventually consistent, the replicas should converge toward the same value. How do they do that? One might hope that replicated databases would handle this automatically, but unfortunately most implementations are quite poor: if you want to avoid losing data, you—the application developer—need to know a lot about the internals of your database’s conflict handling.",
											"We briefly touched on some techniques for conflict resolution in [“Handling Write Conflicts”](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#sec_replication_write_conflicts). Before we wrap up this chapter, let’s explore the issue in a bit more detail.",
											[
												{
													heading: [
														"### **Last write wins (discarding concurrent writes)**",
													],
													children: [
														"One approach for achieving eventual convergence is to declare that each replica need only store the most “recent” value and allow “older” values to be overwritten and discarded. Then, as long as we have some way of unambiguously determining which write is more “recent,” and every write is eventually copied to every replica, the replicas will eventually converge to the same value.",
														"As indicated by the quotes around “recent,” this idea is actually quite misleading. In the example of [Figure 5-12](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#fig_replication_concurrency), neither client knew about the other one when it sent its write requests to the database nodes, so it’s not clear which one happened first. In fact, it doesn’t really make sense to say that either happened “first”: we say the writes are *concurrent*, so their order is undefined.",
														"Even though the writes don’t have a natural ordering, we can force an arbitrary order on them. For example, we can attach a timestamp to each write, pick the biggest timestamp as the most “recent,” and discard any writes with an earlier timestamp. This conflict resolution algorithm, called *last write wins* (LWW), is the only supported conflict resolution method in Cassandra \\[[53]()\\], and an optional feature in Riak \\[[35]()\\].",
														"LWW achieves the goal of eventual convergence, but at the cost of durability: if there are several concurrent writes to the same key, even if they were all reported as successful to the client (because they were written to *w* replicas), only one of the writes will survive and the others will be silently discarded. Moreover, LWW may even drop writes that are not concurrent, as we shall discuss in [“Timestamps for ordering events”]().",
														"There are some situations, such as caching, in which lost writes are perhaps acceptable. If losing data is not acceptable, LWW is a poor choice for conflict resolution.",
														"The only safe way of using a database with LWW is to ensure that a key is only written once and thereafter treated as immutable, thus avoiding any concurrent updates to the same key. For example, a recommended way of using Cassandra is to use a UUID as the key, thus giving each write operation a unique key \\[[53]()\\].",
													],
													summary: [
														"Last Write Wins ensures convergence but risks data loss; use with caution.",
													],
													longSummary: [
														"To achieve convergence in distributed systems, storing only the most recent value can lead to issues with concurrent writes. Conflict resolution algorithms like last write wins (LWW) use timestamps to retain the latest write, ensuring convergence but risking data loss by discarding concurrent and some non-concurrent writes. LWW is ideal for caching but unsuitable where data loss is unacceptable. To use LWW safely, ensure each key is written once and treated as immutable, such as using a UUID for unique keys.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289586/blog-cover-images/lgn3bivfr6akgdfbmhix.webp",
												},
												{
													heading: [
														"### **The “happens-before” relationship and concurrency**",
													],
													children: [
														"How do we decide whether two operations are concurrent or not? To develop an intuition, let’s look at some examples:",
														"* In [Figure 5-9](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#fig_replication_causality), the two writes are not concurrent: A’s insert *happens before* B’s increment, because the value incremented by B is the value inserted by A. In other words, B’s operation builds upon A’s operation, so B’s operation must have happened later. We also say that B is *causally dependent* on A.",
														"* On the other hand, the two writes in [Figure 5-12](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#fig_replication_concurrency) are concurrent: when each client starts the operation, it does not know that another client is also performing an operation on the same key. Thus, there is no causal dependency between the operations.",
														"An operation A *happens before* another operation B if B knows about A, or depends on A, or builds upon A in some way. Whether one operation happens before another operation is the key to defining what concurrency means. In fact, we can simply say that two operations are *concurrent* if neither happens before the other (i.e., neither knows about the other) \\[[54]()\\].",
														"Thus, whenever you have two operations A and B, there are three possibilities: either A happened before B, or B happened before A, or A and B are concurrent. What we need is an algorithm to tell us whether two operations are concurrent or not. If one operation happened before another, the later operation should overwrite the earlier operation, but if the operations are concurrent, we have a conflict that needs to be resolved.",
														"##### **Concurrency, Time, and Relativity**",
														"It may seem that two operations should be called concurrent if they occur “at the same time”—but in fact, it is not important whether they literally overlap in time. Because of problems with clocks in distributed systems, it is actually quite difficult to tell whether two things happened at exactly the same time—an issue we will discuss in more detail in [Chapter 8]().",
														"For defining concurrency, exact time doesn’t matter: we simply call two operations concurrent if they are both unaware of each other, regardless of the physical time at which they occurred. People sometimes make a connection between this principle and the special theory of relativity in physics \\[[54]()\\], which introduced the idea that information cannot travel faster than the speed of light. Consequently, two events that occur some distance apart cannot possibly affect each other if the time between the events is shorter than the time it takes light to travel the distance between them.",
														"In computer systems, two operations might be concurrent even though the speed of light would in principle have allowed one operation to affect the other. For example, if the network was slow or interrupted at the time, two operations can occur some time apart and still be concurrent, because the network problems prevented one operation from being able to know about the other.",
													],
													summary: [
														"Concurrency in distributed systems hinges on operations' mutual awareness, not their timing overlap.",
													],
													longSummary: [
														"Determining concurrency in distributed systems is crucial for conflict resolution. Two operations are concurrent if neither is aware of the other, meaning neither happens before the other. An operation A happens before B if B knows about, depends on, or builds upon A, such as when a client increments a value inserted by another client. Concurrent operations occur when two clients act on the same key without knowledge of each other's actions, leading to conflicts that require resolution. Concurrency is about awareness, not timing; operations can be concurrent even if separated by time due to network issues preventing mutual awareness.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289584/blog-cover-images/qoptrqw99msa9ddd9abk.webp",
												},
												{
													heading: [
														"### **Capturing the happens-before relationship**",
													],
													children: [
														"Let’s look at an algorithm that determines whether two operations are concurrent, or whether one happened before another. To keep things simple, let’s start with a database that has only one replica. Once we have worked out how to do this on a single replica, we can generalize the approach to a leaderless database with multiple replicas.",
														"[Figure 5-13](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#fig_replication_causality_single) shows two clients concurrently adding items to the same shopping cart. (If that example strikes you as too inane, imagine instead two air traffic controllers concurrently adding aircraft to the sector they are tracking.) Initially, the cart is empty. Between them, the clients make five writes to the database:",
														"1. Client 1 adds `milk` to the cart. This is the first write to that key, so the server successfully stores it and assigns it version 1. The server also echoes the value back to the client, along with the version number.",
														"2. Client 2 adds `eggs` to the cart, not knowing that client 1 concurrently added `milk` (client 2 thought that its `eggs` were the only item in the cart). The server assigns version 2 to this write, and stores `eggs` and `milk` as two separate values. It then returns *both* values to the client, along with the version number of 2.",
														"3. Client 1, oblivious to client 2’s write, wants to add `flour` to the cart, so it thinks the current cart contents should be `[milk, flour]`. It sends this value to the server, along with the version number 1 that the server gave client 1 previously. The server can tell from the version number that the write of `[milk, flour]` supersedes the prior value of `[milk]` but that it is concurrent with `[eggs]`. Thus, the server assigns version 3 to `[milk, flour]`, overwrites the version 1 value `[milk]`, but keeps the version 2 value `[eggs]` and returns both remaining values to the client.",
														"4. Meanwhile, client 2 wants to add `ham` to the cart, unaware that client 1 just added `flour`. Client 2 received the two values `[milk]` and `[eggs]` from the server in the last response, so the client now merges those values and adds `ham` to form a new value, `[eggs, milk, ham]`. It sends that value to the server, along with the previous version number 2. The server detects that version 2 overwrites `[eggs]` but is concurrent with `[milk, flour]`, so the two remaining values are `[milk, flour]` with version 3, and `[eggs, milk, ham]` with version 4.",
														"5. Finally, client 1 wants to add `bacon`. It previously received `[milk, flour]` and `[eggs]` from the server at version 3, so it merges those, adds `bacon`, and sends the final value `[milk, flour, eggs, bacon]` to the server, along with the version number 3. This overwrites `[milk, flour]` (note that `[eggs]` was already overwritten in the last step) but is concurrent with `[eggs, milk, ham]`, so the server keeps those two concurrent values.",
														"![ddia 0513](blob:https://johnfactotum.github.io/1c04cec2-c2cc-479b-bac0-97993f1585ef)",
														"###### *Figure 5-13. Capturing causal dependencies between two clients concurrently editing a shopping cart.*",
														"The dataflow between the operations in [Figure 5-13](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#fig_replication_causality_single) is illustrated graphically in [Figure 5-14](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#fig_replication_causal_dependencies). The arrows indicate which operation *happened before* which other operation, in the sense that the later operation *knew about* or *depended on* the earlier one. In this example, the clients are never fully up to date with the data on the server, since there is always another operation going on concurrently. But old versions of the value do get overwritten eventually, and no writes are lost.",
														"![ddia 0514](blob:https://johnfactotum.github.io/93e0870e-ff26-4472-b8bc-3b89b2fd653d)",
														"###### *Figure 5-14. Graph of causal dependencies in [Figure 5-13](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#fig_replication_causality_single).*",
														"Note that the server can determine whether two operations are concurrent by looking at the version numbers—it does not need to interpret the value itself (so the value could be any data structure). The algorithm works as follows:",
														"* The server maintains a version number for every key, increments the version number every time that key is written, and stores the new version number along with the value written.",
														"* When a client reads a key, the server returns all values that have not been overwritten, as well as the latest version number. A client must read a key before writing.",
														"* When a client writes a key, it must include the version number from the prior read, and it must merge together all values that it received in the prior read. (The response from a write request can be like a read, returning all current values, which allows us to chain several writes like in the shopping cart example.)",
														"* When the server receives a write with a particular version number, it can overwrite all values with that version number or below (since it knows that they have been merged into the new value), but it must keep all values with a higher version number (because those values are concurrent with the incoming write).",
														"When a write includes the version number from a prior read, that tells us which previous state the write is based on. If you make a write without including a version number, it is concurrent with all other writes, so it will not overwrite anything—it will just be returned as one of the values on subsequent reads.",
													],
													summary: [
														"Discover how an algorithm ensures concurrent operations in databases using a shopping cart example.",
													],
													longSummary: [
														"The algorithm uses version numbers to determine if operations in a multi-client database are concurrent or sequential. In a shopping cart, when client 1 adds milk (version 1) and client 2 adds eggs (version 2), both items are stored. The server identifies concurrent operations by version numbers, preserving concurrent values and overwriting outdated ones. It maintains incrementing version numbers for each key, returns all non-overwritten values during reads, requires clients to include previous version numbers, and merges prior values when writing, overwriting only values with equal or lower version numbers.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289586/blog-cover-images/i2kihw3rdyvapjdhmc4x.webp",
												},
												{
													heading: [
														"### **Merging concurrently written values**",
													],
													children: [
														"This algorithm ensures that no data is silently dropped, but it unfortunately requires that the clients do some extra work: if several operations happen concurrently, clients have to clean up afterward by merging the concurrently written values. Riak calls these concurrent values *siblings*.",
														"Merging sibling values is essentially the same problem as conflict resolution in multi-leader replication, which we discussed previously (see [“Handling Write Conflicts”](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#sec_replication_write_conflicts)). A simple approach is to just pick one of the values based on a version number or timestamp (last write wins), but that implies losing data. So, you may need to do something more intelligent in application code.",
														"With the example of a shopping cart, a reasonable approach to merging siblings is to just take the union. In [Figure 5-14](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#fig_replication_causal_dependencies), the two final siblings are `[milk, flour, eggs, bacon]` and `[eggs, milk, ham]`; note that `milk` and `eggs` appear in both, even though they were each only written once. The merged value might be something like `[milk, flour, eggs, bacon, ham]`, without duplicates.",
														"However, if you want to allow people to also *remove* things from their carts, and not just add things, then taking the union of siblings may not yield the right result: if you merge two sibling carts and an item has been removed in only one of them, then the removed item will reappear in the union of the siblings \\[[37]()\\]. To prevent this problem, an item cannot simply be deleted from the database when it is removed; instead, the system must leave a marker with an appropriate version number to indicate that the item has been removed when merging siblings. Such a deletion marker is known as a *tombstone*. (We previously saw tombstones in the context of log compaction in [“Hash Indexes”]().)",
														"As merging siblings in application code is complex and error-prone, there are some efforts to design data structures that can perform this merging automatically, as discussed in [“Automatic Conflict Resolution”](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#sidebar_conflict_resolution). For example, Riak’s datatype support uses a family of data structures called CRDTs \\[[38](), [39](), [55]()\\] that can automatically merge siblings in sensible ways, including preserving deletions.",
													],
													summary: [
														"Prevent silent data loss: merge concurrent values with CRDTs for accurate conflict resolution.",
													],
													longSummary: [
														"This algorithm prevents silent data loss by requiring clients to merge concurrent values, similar to conflict resolution in multi-leader replication. Simply choosing a value based on version number or timestamp can lead to data loss. For example, in shopping carts, merging siblings by taking the union of items can work, but it may cause deleted items to reappear if item removal is allowed. To address this, systems use tombstones to mark removals during merges. Merging siblings in application code is complex, so systems like Riak use CRDTs, which automatically merge siblings sensibly while preserving deletions.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289588/blog-cover-images/hdu1dkfd5nu6qalmukux.webp",
												},
												{
													heading: [
														"### **Version vectors**",
													],
													children: [
														"The example in [Figure 5-13](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#fig_replication_causality_single) used only a single replica. How does the algorithm change when there are multiple replicas, but no leader?",
														"[Figure 5-13](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#fig_replication_causality_single) uses a single version number to capture dependencies between operations, but that is not sufficient when there are multiple replicas accepting writes concurrently. Instead, we need to use a version number *per replica* as well as per key. Each replica increments its own version number when processing a write, and also keeps track of the version numbers it has seen from each of the other replicas. This information indicates which values to overwrite and which values to keep as siblings.",
														"The collection of version numbers from all the replicas is called a *version vector* \\[[56]()\\]. A few variants of this idea are in use, but the most interesting is probably the *dotted version vector* \\[[57]()\\], which is used in Riak 2.0 \\[[58](), [59]()\\]. We won’t go into the details, but the way it works is quite similar to what we saw in our cart example.",
														"Like the version numbers in [Figure 5-13](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#fig_replication_causality_single), version vectors are sent from the database replicas to clients when values are read, and need to be sent back to the database when a value is subsequently written. (Riak encodes the version vector as a string that it calls *causal context*.) The version vector allows the database to distinguish between overwrites and concurrent writes.",
														"Also, like in the single-replica example, the application may need to merge siblings. The version vector structure ensures that it is safe to read from one replica and subsequently write back to another replica. Doing so may result in siblings being created, but no data is lost as long as siblings are merged correctly.",
													],
													summary: [
														"Handling causality in leaderless databases requires version vectors for safe data synchronization.",
													],
													longSummary: [
														'In replicated databases without a leader, handling causality requires a version number for each replica and key, rather than a single version number. Each replica increments its version number during writes and tracks others\' version numbers to manage overwrites or retain siblings. This system, known as a "version vector," includes the "dotted version vector" used in Riak 2.0. Version vectors are exchanged between replicas and clients during reads and writes, distinguishing overwrites from concurrent writes. This structure allows safe reading from one replica and writing to another without data loss, as long as siblings are correctly merged.',
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289589/blog-cover-images/m6fqlgtnn9lmhs3uxenx.webp",
												},
											],
										],
										summary: [
											"Concurrent writes in Dynamo-style databases cause conflicts; resolving them requires careful conflict resolution strategies.",
										],
										longSummary: [
											"Dynamo-style databases allow concurrent writes to the same key, leading to conflicts due to network delays and partial failures. To achieve eventual consistency, replicas must converge on the same value, but many databases handle this poorly, requiring developers to understand conflict resolution. Last write wins (LWW) uses timestamps to resolve conflicts but risks data loss. A safer method involves version numbers for each key, preserving concurrent values and requiring clients to merge them. Systems like Riak use CRDTs to automate merging while preserving deletions. Version vectors track changes across replicas, ensuring safe reads and writes.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289535/blog-cover-images/z5fdhzpclakanmofsa5i.webp",
									},
								],
							],
							summary: [
								"Leaderless databases offer high availability and eventual consistency, tolerating node failures without failover.",
							],
							longSummary: [
								"Leaderless replication allows any replica to accept writes directly, enhancing availability and fault tolerance. Popularized by Amazon's Dynamo and used by Riak, Cassandra, and Voldemort, this method involves clients sending writes to multiple replicas, succeeding if a quorum acknowledges them. It tolerates node failures without failover but may cause stale reads, addressed by read repair and anti-entropy. Quorum reads and writes ensure consistency, with parameters n, w, and r managing replicas, write acknowledgments, and read queries. While supporting eventual consistency and high availability, it requires conflict resolution using version vectors and CRDTs, suitable for multi-datacenter operations.",
							],
							imageUrl:
								"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289515/blog-cover-images/gijqvzcd6ndnnmvf6op8.webp",
						},
						{
							heading: [
								"# **Version vectors and vector clocks**",
							],
							children: [
								"A *version vector* is sometimes also called a *vector clock*, even though they are not quite the same. The difference is subtle—please see the references for details \\[[57](), [60](), [61]()\\]. In brief, when comparing the state of replicas, version vectors are the right data structure to use.",
							],
							summary: [
								"Discover how version vectors excel in comparing replica states—subtle yet powerful tools.",
							],
							longSummary: [
								"A version vector, often referred to as a vector clock, is a crucial data structure for comparing the state of replicas, despite subtle differences between the two terms. For a deeper understanding of these distinctions, further references are recommended.",
							],
							imageUrl:
								"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289514/blog-cover-images/duohcubqanqewipx09wj.webp",
						},
						{
							heading: ["# **Summary**"],
							children: [
								"In this chapter we looked at the issue of replication. Replication can serve several purposes:",
								"*High availability*",
								"Keeping the system running, even when one machine (or several machines, or an entire datacenter) goes down",
								"*Disconnected operation*",
								"Allowing an application to continue working when there is a network interruption",
								"*Latency*",
								"Placing data geographically close to users, so that users can interact with it faster",
								"*Scalability*",
								"Being able to handle a higher volume of reads than a single machine could handle, by performing reads on replicas",
								"Despite being a simple goal—keeping a copy of the same data on several machines—replication turns out to be a remarkably tricky problem. It requires carefully thinking about concurrency and about all the things that can go wrong, and dealing with the consequences of those faults. At a minimum, we need to deal with unavailable nodes and network interruptions (and that’s not even considering the more insidious kinds of fault, such as silent data corruption due to software bugs).",
								"We discussed three main approaches to replication:",
								"*Single-leader replication*",
								"Clients send all writes to a single node (the leader), which sends a stream of data change events to the other replicas (followers). Reads can be performed on any replica, but reads from followers might be stale.",
								"*Multi-leader replication*",
								"Clients send each write to one of several leader nodes, any of which can accept writes. The leaders send streams of data change events to each other and to any follower nodes.",
								"*Leaderless replication*",
								"Clients send each write to several nodes, and read from several nodes in parallel in order to detect and correct nodes with stale data.",
								"Each approach has advantages and disadvantages. Single-leader replication is popular because it is fairly easy to understand and there is no conflict resolution to worry about. Multi-leader and leaderless replication can be more robust in the presence of faulty nodes, network interruptions, and latency spikes—at the cost of being harder to reason about and providing only very weak consistency guarantees.",
								"Replication can be synchronous or asynchronous, which has a profound effect on the system behavior when there is a fault. Although asynchronous replication can be fast when the system is running smoothly, it’s important to figure out what happens when replication lag increases and servers fail. If a leader fails and you promote an asynchronously updated follower to be the new leader, recently committed data may be lost.",
								"We looked at some strange effects that can be caused by replication lag, and we discussed a few consistency models which are helpful for deciding how an application should behave under replication lag:",
								"*Read-after-write consistency*",
								"Users should always see data that they submitted themselves.",
								"*Monotonic reads*",
								"After users have seen the data at one point in time, they shouldn’t later see the data from some earlier point in time.",
								"*Consistent prefix reads*",
								"Users should see the data in a state that makes causal sense: for example, seeing a question and its reply in the correct order.",
								"Finally, we discussed the concurrency issues that are inherent in multi-leader and leaderless replication approaches: because they allow multiple writes to happen concurrently, conflicts may occur. We examined an algorithm that a database might use to determine whether one operation happened before another, or whether they happened concurrently. We also touched on methods for resolving conflicts by merging together concurrent updates.",
								"In the next chapter we will continue looking at data that is distributed across multiple machines, through the counterpart of replication: splitting a large dataset into *partitions*.",
								"##### **Footnotes**",
								"[i]() Different people have different definitions for *hot*, *warm*, and *cold* standby servers. In PostgreSQL, for example, *hot standby* is used to refer to a replica that accepts reads from clients, whereas a *warm standby* processes changes from the leader but doesn’t process any queries from clients. For purposes of this book, the difference isn’t important.",
								"[ii]() This approach is known as *fencing* or, more emphatically, *Shoot The Other Node In The Head* (STONITH). We will discuss fencing in more detail in [“The leader and the lock”]().",
								"[iii]() The term *eventual consistency* was coined by Douglas Terry et al. \\[[24]()\\], popularized by Werner Vogels \\[[22]()\\], and became the battle cry of many NoSQL projects. However, not only NoSQL databases are eventually consistent: followers in an asynchronously replicated relational database have the same characteristics.",
								"[iv]() If the database is partitioned (see [Chapter 6]()), each partition has one leader. Different partitions may have their leaders on different nodes, but each partition must nevertheless have one leader node.",
								"[v]() Not to be confused with a *star schema* (see [“Stars and Snowflakes: Schemas for Analytics”]()), which describes the structure of a data model, not the communication topology between nodes.",
								"[vi]() Dynamo is not available to users outside of Amazon. Confusingly, AWS offers a hosted database product called *DynamoDB*, which uses a completely different architecture: it is based on single-leader replication.",
								"[vii]() Sometimes this kind of quorum is called a *strict quorum*, to contrast with *sloppy quorums* (discussed in [“Sloppy Quorums and Hinted Handoff”](blob:https://johnfactotum.github.io/4128b86f-b9ba-49cb-837e-cd7bd3cd4b7f#sec_replication_sloppy_quorum)).",
								"##### **References**",
								"\\[[1]()\\] Bruce G. Lindsay, Patricia Griffiths Selinger, C. Galtieri, et al.: “[Notes on Distributed Databases](http://domino.research.ibm.com/library/cyberdig.nsf/papers/A776EC17FC2FCE73852579F100578964/$File/RJ2571.pdf),” IBM Research, Research Report RJ2571(33471), July 1979.",
								"\\[[2]()\\] “[Oracle Active Data Guard Real-Time Data Protection and Availability](http://www.oracle.com/technetwork/database/availability/active-data-guard-wp-12c-1896127.pdf),” Oracle White Paper, June 2013.",
								"\\[[3]()\\] “[AlwaysOn Availability Groups](http://msdn.microsoft.com/en-us/library/hh510230.aspx),” in *SQL Server Books Online*, Microsoft, 2012.",
								"\\[[4]()\\] Lin Qiao, Kapil Surlaker, Shirshanka Das, et al.: “[On Brewing Fresh Espresso: LinkedIn’s Distributed Data Serving Platform](http://www.slideshare.net/amywtang/espresso-20952131),” at *ACM International Conference on Management of Data* (SIGMOD), June 2013.",
								"\\[[5]()\\] Jun Rao: “[Intra-Cluster Replication for Apache Kafka](http://www.slideshare.net/junrao/kafka-replication-apachecon2013),” at *ApacheCon North America*, February 2013.",
								"\\[[6]()\\] “[Highly Available Queues](https://www.rabbitmq.com/ha.html),” in *RabbitMQ Server Documentation*, Pivotal Software, Inc., 2014.",
								"\\[[7]()\\] Yoshinori Matsunobu: “[Semi-Synchronous Replication at Facebook](http://yoshinorimatsunobu.blogspot.co.uk/2014/04/semi-synchronous-replication-at-facebook.html),” *yoshinorimatsunobu.blogspot.co.uk*, April 1, 2014.",
								"\\[[8]()\\] Robbert van Renesse and Fred B. Schneider: “[Chain Replication for Supporting High Throughput and Availability](http://static.usenix.org/legacy/events/osdi04/tech/full_papers/renesse/renesse.pdf),” at *6th USENIX Symposium on Operating System Design and Implementation* (OSDI), December 2004.",
								"\\[[9]()\\] Jeff Terrace and Michael J. Freedman: “[Object Storage on CRAQ: High-Throughput Chain Replication for Read-Mostly Workloads](https://www.usenix.org/legacy/event/usenix09/tech/full_papers/terrace/terrace.pdf),” at *USENIX Annual Technical Conference* (ATC), June 2009.",
								"\\[[10]()\\] Brad Calder, Ju Wang, Aaron Ogus, et al.: “[Windows Azure Storage: A Highly Available Cloud Storage Service with Strong Consistency](http://sigops.org/sosp/sosp11/current/2011-Cascais/printable/11-calder.pdf),” at *23rd ACM Symposium on Operating Systems Principles* (SOSP), October 2011.",
								"\\[[11]()\\] Andrew Wang: “[Windows Azure Storage](http://umbrant.com/blog/2016/windows_azure_storage.html),” *umbrant.com*, February 4, 2016.",
								"\\[[12]()\\] “[Percona Xtrabackup - Documentation](https://www.percona.com/doc/percona-xtrabackup/2.1/index.html),” Percona LLC, 2014.",
								"\\[[13]()\\] Jesse Newland: “[GitHub Availability This Week](https://github.com/blog/1261-github-availability-this-week),” *github.com*, September 14, 2012.",
								"\\[[14]()\\] Mark Imbriaco: “[Downtime Last Saturday](https://github.com/blog/1364-downtime-last-saturday),” *github.com*, December 26, 2012.",
								"\\[[15]()\\] John Hugg: “[‘All in’ with Determinism for Performance and Testing in Distributed Systems](https://www.youtube.com/watch?v=gJRj3vJL4wE),” at *Strange Loop*, September 2015.",
								"\\[[16]()\\] Amit Kapila: “[WAL Internals of PostgreSQL](http://www.pgcon.org/2012/schedule/attachments/258_212_Internals%20Of%20PostgreSQL%20Wal.pdf),” at *PostgreSQL Conference* (PGCon), May 2012.",
								"\\[[17]()\\] *[MySQL Internals Manual](http://dev.mysql.com/doc/internals/en/index.html)*. Oracle, 2014.",
								"\\[[18]()\\] Yogeshwer Sharma, Philippe Ajoux, Petchean Ang, et al.: “[Wormhole: Reliable Pub-Sub to Support Geo-Replicated Internet Services](https://www.usenix.org/system/files/conference/nsdi15/nsdi15-paper-sharma.pdf),” at *12th USENIX Symposium on Networked Systems Design and Implementation* (NSDI), May 2015.",
								"\\[[19]()\\] “[Oracle GoldenGate 12c: Real-Time Access to Real-Time Information](http://www.oracle.com/us/products/middleware/data-integration/oracle-goldengate-realtime-access-2031152.pdf),” Oracle White Paper, October 2013.",
								"\\[[20]()\\] Shirshanka Das, Chavdar Botev, Kapil Surlaker, et al.: “[All Aboard the Databus!](http://www.socc2012.org/s18-das.pdf),” at *ACM Symposium on Cloud Computing* (SoCC), October 2012.",
								"\\[[21]()\\] Greg Sabino Mullane: “[Version 5 of Bucardo Database Replication System](http://blog.endpoint.com/2014/06/bucardo-5-multimaster-postgres-released.html),” *blog.endpoint.com*, June 23, 2014.",
								"\\[[22]()\\] Werner Vogels: “[Eventually Consistent](http://queue.acm.org/detail.cfm?id=1466448),” *ACM Queue*, volume 6, number 6, pages 14–19, October 2008. [doi:10.1145/1466443.1466448](http://dx.doi.org/10.1145/1466443.1466448)",
								"\\[[23]()\\] Douglas B. Terry: “[Replicated Data Consistency Explained Through Baseball](http://research.microsoft.com/pubs/157411/ConsistencyAndBaseballReport.pdf),” Microsoft Research, Technical Report MSR-TR-2011-137, October 2011.",
								"\\[[24]()\\] Douglas B. Terry, Alan J. Demers, Karin Petersen, et al.: “[Session Guarantees for Weakly Consistent Replicated Data](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.71.2269&rep=rep1&type=pdf),” at *3rd International Conference on Parallel and Distributed Information Systems* (PDIS), September 1994. [doi:10.1109/PDIS.1994.331722](http://dx.doi.org/10.1109/PDIS.1994.331722)",
								"\\[[25]()\\] Terry Pratchett: *Reaper Man: A Discworld Novel*. Victor Gollancz, 1991. ISBN: 978-0-575-04979-6",
								"\\[[26]()\\] “[Tungsten Replicator](http://tungsten-replicator.org/),” Continuent, Inc., 2014.",
								"\\[[27]()\\] “[BDR 0.10.0 Documentation](http://bdr-project.org/docs/next/index.html),” The PostgreSQL Global Development Group, *bdr-project.org*, 2015.",
								"\\[[28]()\\] Robert Hodges: “[If You \\*Must\\* Deploy Multi-Master Replication, Read This First](http://scale-out-blog.blogspot.co.uk/2012/04/if-you-must-deploy-multi-master.html),” *scale-out-blog.blogspot.co.uk*, March 30, 2012.",
								"\\[[29]()\\] J. Chris Anderson, Jan Lehnardt, and Noah Slater: *CouchDB: The Definitive Guide*. O’Reilly Media, 2010. ISBN: 978-0-596-15589-6",
								"\\[[30]()\\] AppJet, Inc.: “[Etherpad and EasySync Technical Manual](https://github.com/ether/etherpad-lite/blob/e2ce9dc/doc/easysync/easysync-full-description.pdf),” *github.com*, March 26, 2011.",
								"\\[[31]()\\] John Day-Richter: “[What’s Different About the New Google Docs: Making Collaboration Fast](http://googledrive.blogspot.com/2010/09/whats-different-about-new-google-docs.html),” *googledrive.blogspot.com*, 23 September 2010.",
								"\\[[32]()\\] Martin Kleppmann and Alastair R. Beresford: “[A Conflict-Free Replicated JSON Datatype](http://arxiv.org/abs/1608.03960),” arXiv:1608.03960, August 13, 2016.",
								"\\[[33]()\\] Frazer Clement: “[Eventual Consistency – Detecting Conflicts](http://messagepassing.blogspot.co.uk/2011/10/eventual-consistency-detecting.html),” *messagepassing.blogspot.co.uk*, October 20, 2011.",
								"\\[[34]()\\] Robert Hodges: “[State of the Art for MySQL Multi-Master Replication](https://www.percona.com/live/mysql-conference-2013/sessions/state-art-mysql-multi-master-replication),” at *Percona Live: MySQL Conference & Expo*, April 2013.",
								"\\[[35]()\\] John Daily: “[Clocks Are Bad, or, Welcome to the Wonderful World of Distributed Systems](http://basho.com/clocks-are-bad-or-welcome-to-distributed-systems/),” *basho.com*, November 12, 2013.",
								"\\[[36]()\\] Riley Berton: “[Is Bi-Directional Replication (BDR) in Postgres Transactional?](http://sdf.org/~riley/blog/2016/01/04/is-bi-directional-replication-bdr-in-postgres-transactional/),” *sdf.org*, January 4, 2016.",
								"\\[[37]()\\] Giuseppe DeCandia, Deniz Hastorun, Madan Jampani, et al.: “[Dynamo: Amazon’s Highly Available Key-Value Store](http://www.allthingsdistributed.com/files/amazon-dynamo-sosp2007.pdf),” at *21st ACM Symposium on Operating Systems Principles* (SOSP), October 2007.",
								"\\[[38]()\\] Marc Shapiro, Nuno Preguiça, Carlos Baquero, and Marek Zawirski: “[A Comprehensive Study of Convergent and Commutative Replicated Data Types](http://hal.inria.fr/inria-00555588/),” INRIA Research Report no. 7506, January 2011.",
								"\\[[39]()\\] Sam Elliott: “[CRDTs: An UPDATE (or Maybe Just a PUT)](https://speakerdeck.com/lenary/crdts-an-update-or-just-a-put),” at *RICON West*, October 2013.",
								"\\[[40]()\\] Russell Brown: “[A Bluffers Guide to CRDTs in Riak](https://gist.github.com/russelldb/f92f44bdfb619e089a4d),” *gist.github.com*, October 28, 2013.",
								"\\[[41]()\\] Benjamin Farinier, Thomas Gazagnaire, and Anil Madhavapeddy: “[Mergeable Persistent Data Structures](http://gazagnaire.org/pub/FGM15.pdf),” at *26es Journées Francophones des Langages Applicatifs* (JFLA), January 2015.",
								"\\[[42]()\\] Chengzheng Sun and Clarence Ellis: “[Operational Transformation in Real-Time Group Editors: Issues, Algorithms, and Achievements](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.53.933&rep=rep1&type=pdf),” at *ACM Conference on Computer Supported Cooperative Work* (CSCW), November 1998.",
								"\\[[43]()\\] Lars Hofhansl: “[HBASE-7709: Infinite Loop Possible in Master/Master Replication](https://issues.apache.org/jira/browse/HBASE-7709),” *issues.apache.org*, January 29, 2013.",
								"\\[[44]()\\] David K. Gifford: “[Weighted Voting for Replicated Data](http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.84.7698),” at *7th ACM Symposium on Operating Systems Principles* (SOSP), December 1979. [doi:10.1145/800215.806583](http://dx.doi.org/10.1145/800215.806583)",
								"\\[[45]()\\] Heidi Howard, Dahlia Malkhi, and Alexander Spiegelman: “[Flexible Paxos: Quorum Intersection Revisited](https://arxiv.org/abs/1608.06696),” *arXiv:1608.06696*, August 24, 2016.",
								"\\[[46]()\\] Joseph Blomstedt: “[Re: Absolute Consistency](http://lists.basho.com/pipermail/riak-users_lists.basho.com/2012-January/007157.html),” email to *riak-users* mailing list, *lists.basho.com*, January 11, 2012.",
								"\\[[47]()\\] Joseph Blomstedt: “[Bringing Consistency to Riak](https://vimeo.com/51973001),” at *RICON West*, October 2012.",
								"\\[[48]()\\] Peter Bailis, Shivaram Venkataraman, Michael J. Franklin, et al.: “[Quantifying Eventual Consistency with PBS](http://www.bailis.org/papers/pbs-cacm2014.pdf),” *Communications of the ACM*, volume 57, number 8, pages 93–102, August 2014. [doi:10.1145/2632792](http://dx.doi.org/10.1145/2632792)",
								"\\[[49]()\\] Jonathan Ellis: “[Modern Hinted Handoff](http://www.datastax.com/dev/blog/modern-hinted-handoff),” *datastax.com*, December 11, 2012.",
								"\\[[50]()\\] “[Project Voldemort Wiki](https://github.com/voldemort/voldemort/wiki),” *github.com*, 2013.",
								"\\[[51]()\\] “[Apache Cassandra 2.0 Documentation](http://www.datastax.com/documentation/cassandra/2.0/index.html),” DataStax, Inc., 2014.",
								"\\[[52]()\\] “[Riak Enterprise: Multi-Datacenter Replication](http://basho.com/assets/MultiDatacenter_Replication.pdf).” Technical whitepaper, Basho Technologies, Inc., September 2014.",
								"\\[[53]()\\] Jonathan Ellis: “[Why Cassandra Doesn’t Need Vector Clocks](http://www.datastax.com/dev/blog/why-cassandra-doesnt-need-vector-clocks),” *datastax.com*, September 2, 2013.",
								"\\[[54]()\\] Leslie Lamport: “[Time, Clocks, and the Ordering of Events in a Distributed System](http://research.microsoft.com/en-US/um/people/Lamport/pubs/time-clocks.pdf),” *Communications of the ACM*, volume 21, number 7, pages 558–565, July 1978. [doi:10.1145/359545.359563](http://dx.doi.org/10.1145/359545.359563)",
								"\\[[55]()\\] Joel Jacobson: “[Riak 2.0: Data Types](http://blog.joeljacobson.com/riak-2-0-data-types/),” *blog.joeljacobson.com*, March 23, 2014.",
								"\\[[56]()\\] D. Stott Parker Jr., Gerald J. Popek, Gerard Rudisin, et al.: “[Detection of Mutual Inconsistency in Distributed Systems](http://zoo.cs.yale.edu/classes/cs426/2013/bib/parker83detection.pdf),” *IEEE Transactions on Software Engineering*, volume 9, number 3, pages 240–247, May 1983. [doi:10.1109/TSE.1983.236733](http://dx.doi.org/10.1109/TSE.1983.236733)",
								"\\[[57]()\\] Nuno Preguiça, Carlos Baquero, Paulo Sérgio Almeida, et al.: “[Dotted Version Vectors: Logical Clocks for Optimistic Replication](http://arxiv.org/pdf/1011.5808v1.pdf),” arXiv:1011.5808, November 26, 2010.",
								"\\[[58]()\\] Sean Cribbs: “[A Brief History of Time in Riak](https://www.youtube.com/watch?v=HHkKPdOi-ZU),” at *RICON*, October 2014.",
								"\\[[59]()\\] Russell Brown: “[Vector Clocks Revisited Part 2: Dotted Version Vectors](http://basho.com/posts/technical/vector-clocks-revisited-part-2-dotted-version-vectors/),” *basho.com*, November 10, 2015.",
								"\\[[60]()\\] Carlos Baquero: “[Version Vectors Are Not Vector Clocks](https://haslab.wordpress.com/2011/07/08/version-vectors-are-not-vector-clocks/),” *haslab.wordpress.com*, July 8, 2011.",
								"\\[[61]()\\] Reinhard Schwarz and Friedemann Mattern: “[Detecting Causal Relationships in Distributed Computations: In Search of the Holy Grail](http://dcg.ethz.ch/lectures/hs08/seminar/papers/mattern4.pdf),” *Distributed Computing*, volume 7, number 3, pages 149–174, March 1994. [doi:10.1007/BF02277859](http://dx.doi.org/10.1007/BF02277859)",
							],
							summary: [
								"Explore replication challenges and strategies for high availability, scalability, and fault tolerance.",
							],
							longSummary: [
								"This chapter explores replication, crucial for high availability, latency reduction, and scalability in distributed systems. It examines the challenges of maintaining data copies due to concurrency and faults. Three approaches are discussed: single-leader (centralized writes), multi-leader (distributed writes), and leaderless (parallel writes and reads). Single-leader is simpler, while multi-leader and leaderless offer better fault tolerance but weaker consistency. Synchronous and asynchronous replication affect system behavior during failures. Consistency models like read-after-write and monotonic reads address replication lag. The chapter also covers conflict resolution algorithms and provides extensive references.",
							],
							imageUrl:
								"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289515/blog-cover-images/jymz6ydz9qzms9qlsv5g.webp",
						},
					],
				],
				summary: [
					"Explore the complexities of data replication, from leader-based to leaderless systems, in 15 words.",
				],
				longSummary: [
					"Replication involves maintaining data copies across machines to reduce latency, enhance availability, and boost read throughput. This chapter covers datasets small enough for each machine to hold, with larger datasets in Chapter 6. Key challenges include managing changes with single-leader, multi-leader, and leaderless algorithms. Considerations include synchronous vs. asynchronous replication and handling failed replicas. Leader-based replication designates one leader for writes, while followers replicate changes. Multi-leader replication supports geographically distributed systems but needs conflict resolution. Leaderless replication, used by Amazon's Dynamo, allows any replica to accept writes, using quorum reads and writes for consistency.",
				],
				imageUrl:
					"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289505/blog-cover-images/iztstvhxmvzs6wvfckzl.webp",
			},
			{
				heading: ["# **Chapter 6. Partitioning**"],
				children: [
					"> *Clearly, we must break away from the sequential and not limit the computers. We must state definitions and provide for priorities and descriptions of data. We must state relationships, not procedures.*",
					"> Grace Murray Hopper, *Management and the Computer of the Future* (1962)",
					"![](blob:https://johnfactotum.github.io/be233925-0f0f-4ed1-be0d-1e955ea97f8f)",
					"In [Chapter 5]() we discussed replication—that is, having multiple copies of the same data on different nodes. For very large datasets, or very high query throughput, that is not sufficient: we need to break the data up into *partitions*, also known as *sharding*.[i]()",
					[
						{
							heading: ["# **Terminological confusion**"],
							children: [
								"What we call a *partition* here is called a *shard* in MongoDB, Elasticsearch, and SolrCloud; it’s known as a *region* in HBase, a *tablet* in Bigtable, a *vnode* in Cassandra and Riak, and a *vBucket* in Couchbase. However, *partitioning* is the most established term, so we’ll stick with that.",
								"Normally, partitions are defined in such a way that each piece of data (each record, row, or document) belongs to exactly one partition. There are various ways of achieving this, which we discuss in depth in this chapter. In effect, each partition is a small database of its own, although the database may support operations that touch multiple partitions at the same time.",
								"The main reason for wanting to partition data is *scalability*. Different partitions can be placed on different nodes in a shared-nothing cluster (see the introduction to [Part II]() for a definition of *shared nothing*). Thus, a large dataset can be distributed across many disks, and the query load can be distributed across many processors.",
								"For queries that operate on a single partition, each node can independently execute the queries for its own partition, so query throughput can be scaled by adding more nodes. Large, complex queries can potentially be parallelized across many nodes, although this gets significantly harder.",
								"Partitioned databases were pioneered in the 1980s by products such as Teradata and Tandem NonStop SQL \\[[1]()\\], and more recently rediscovered by NoSQL databases and Hadoop-based data warehouses. Some systems are designed for transactional workloads, and others for analytics (see [“Transaction Processing or Analytics?”]()): this difference affects how the system is tuned, but the fundamentals of partitioning apply to both kinds of workloads.",
								"In this chapter we will first look at different approaches for partitioning large datasets and observe how the indexing of data interacts with partitioning. We’ll then talk about rebalancing, which is necessary if you want to add or remove nodes in your cluster. Finally, we’ll get an overview of how databases route requests to the right partitions and execute queries.",
							],
							summary: [
								"Discover how partitioning boosts scalability by distributing data across independent, scalable databases.",
							],
							longSummary: [
								"Partitioning, also known as sharding, divides data into distinct partitions, creating small independent databases that enhance scalability by distributing large datasets across multiple disks and query loads across numerous processors in a shared-nothing cluster. This allows single-partition queries to operate independently, enabling throughput to scale with the addition of nodes, although complex cross-partition queries remain challenging. Originating in the 1980s with systems like Teradata and Tandem NonStop SQL, partitioning was later adopted by NoSQL and Hadoop-based systems for transactional and analytical workloads. This chapter explores partitioning strategies, indexing interactions, rebalancing nodes, and request routing to appropriate partitions.",
							],
							imageUrl:
								"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289458/blog-cover-images/c7pom7awphjswbwhfjmr.webp",
						},
						{
							heading: ["# **Partitioning and Replication**"],
							children: [
								"Partitioning is usually combined with replication so that copies of each partition are stored on multiple nodes. This means that, even though each record belongs to exactly one partition, it may still be stored on several different nodes for fault tolerance.",
								"A node may store more than one partition. If a leader–follower replication model is used, the combination of partitioning and replication can look like [Figure 6-1](blob:https://johnfactotum.github.io/5d984128-9dff-4ecb-a798-d19425cc73f6#fig_partitioning_replicas). Each partition’s leader is assigned to one node, and its followers are assigned to other nodes. Each node may be the leader for some partitions and a follower for other partitions.",
								"Everything we discussed in [Chapter 5]() about replication of databases applies equally to replication of partitions. The choice of partitioning scheme is mostly independent of the choice of replication scheme, so we will keep things simple and ignore replication in this chapter.",
								"![ddia 0601](blob:https://johnfactotum.github.io/0974b566-8566-404e-9c71-b585c067f710)",
								"###### *Figure 6-1. Combining replication and partitioning: each node acts as leader for some partitions and follower for other partitions.*",
							],
							summary: [
								"Replication and partitioning ensure fault tolerance, with nodes leading or following different partitions.",
							],
							longSummary: [
								"Partitioning is often paired with replication to ensure fault tolerance by storing copies of each partition across multiple nodes, although each record is assigned to a single partition. A node can hold multiple partitions and, in a leader-follower replication model, may lead some partitions while following others. The partitioning scheme operates largely independently of the replication scheme. Figure 6-1 demonstrates this combination, highlighting how nodes can simultaneously act as leaders for certain partitions and followers for others.",
							],
							imageUrl:
								"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289458/blog-cover-images/w52cyanmmb7hxwwxkzzu.webp",
						},
						{
							heading: ["# **Partitioning of Key-Value Data**"],
							children: [
								"Say you have a large amount of data, and you want to partition it. How do you decide which records to store on which nodes?",
								"Our goal with partitioning is to spread the data and the query load evenly across nodes. If every node takes a fair share, then—in theory—10 nodes should be able to handle 10 times as much data and 10 times the read and write throughput of a single node (ignoring replication for now).",
								"If the partitioning is unfair, so that some partitions have more data or queries than others, we call it *skewed*. The presence of skew makes partitioning much less effective. In an extreme case, all the load could end up on one partition, so 9 out of 10 nodes are idle and your bottleneck is the single busy node. A partition with disproportionately high load is called a *hot spot*.",
								"The simplest approach for avoiding hot spots would be to assign records to nodes randomly. That would distribute the data quite evenly across the nodes, but it has a big disadvantage: when you’re trying to read a particular item, you have no way of knowing which node it is on, so you have to query all nodes in parallel.",
								"We can do better. Let’s assume for now that you have a simple key-value data model, in which you always access a record by its primary key. For example, in an old-fashioned paper encyclopedia, you look up an entry by its title; since all the entries are alphabetically sorted by title, you can quickly find the one you’re looking for.",
								[
									{
										heading: [
											"## **Partitioning by Key Range**",
										],
										children: [
											"One way of partitioning is to assign a continuous range of keys (from some minimum to some maximum) to each partition, like the volumes of a paper encyclopedia ([Figure 6-2](blob:https://johnfactotum.github.io/5d984128-9dff-4ecb-a798-d19425cc73f6#fig_partitioning_encyclopedia)). If you know the boundaries between the ranges, you can easily determine which partition contains a given key. If you also know which partition is assigned to which node, then you can make your request directly to the appropriate node (or, in the case of the encyclopedia, pick the correct book off the shelf).",
											"![ddia 0602](blob:https://johnfactotum.github.io/bcf90158-f0ea-47e2-a4ac-6e8c7146b4fe)",
											"###### *Figure 6-2. A print encyclopedia is partitioned by key range.*",
											"The ranges of keys are not necessarily evenly spaced, because your data may not be evenly distributed. For example, in [Figure 6-2](blob:https://johnfactotum.github.io/5d984128-9dff-4ecb-a798-d19425cc73f6#fig_partitioning_encyclopedia), volume 1 contains words starting with A and B, but volume 12 contains words starting with T, U, V, X, Y, and Z. Simply having one volume per two letters of the alphabet would lead to some volumes being much bigger than others. In order to distribute the data evenly, the partition boundaries need to adapt to the data.",
											"The partition boundaries might be chosen manually by an administrator, or the database can choose them automatically (we will discuss choices of partition boundaries in more detail in [“Rebalancing Partitions”](blob:https://johnfactotum.github.io/5d984128-9dff-4ecb-a798-d19425cc73f6#sec_partitioning_rebalancing)). This partitioning strategy is used by Bigtable, its open source equivalent HBase \\[[2](), [3]()\\], RethinkDB, and MongoDB before version 2.4 \\[[4]()\\].",
											"Within each partition, we can keep keys in sorted order (see [“SSTables and LSM-Trees”]()). This has the advantage that range scans are easy, and you can treat the key as a concatenated index in order to fetch several related records in one query (see [“Multi-column indexes”]()). For example, consider an application that stores data from a network of sensors, where the key is the timestamp of the measurement (*year-month-day-hour-minute-second*). Range scans are very useful in this case, because they let you easily fetch, say, all the readings from a particular month.",
											"However, the downside of key range partitioning is that certain access patterns can lead to hot spots. If the key is a timestamp, then the partitions correspond to ranges of time—e.g., one partition per day. Unfortunately, because we write data from the sensors to the database as the measurements happen, all the writes end up going to the same partition (the one for today), so that partition can be overloaded with writes while others sit idle \\[[5]()\\].",
											"To avoid this problem in the sensor database, you need to use something other than the timestamp as the first element of the key. For example, you could prefix each timestamp with the sensor name so that the partitioning is first by sensor name and then by time. Assuming you have many sensors active at the same time, the write load will end up more evenly spread across the partitions. Now, when you want to fetch the values of multiple sensors within a time range, you need to perform a separate range query for each sensor name.",
										],
										summary: [
											"Partition keys by range for efficient data access, but beware of potential hot spots.",
										],
										longSummary: [
											"Partitioning by assigning a continuous range of keys to each partition allows direct requests to the correct node if boundaries are known, similar to encyclopedia volumes. Used by Bigtable, HBase, RethinkDB, and MongoDB (pre-version 2.4), this method doesn't need evenly spaced ranges due to uneven data distribution. Partition boundaries can be set manually or automatically, with keys sorted for easy range scans. However, it can cause hot spots, like in sensor databases using timestamps as keys. To mitigate this, prefix timestamps with sensor names to distribute the load.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289476/blog-cover-images/kj9e4v0s10m8foxflcak.webp",
									},
									{
										heading: [
											"## **Partitioning by Hash of Key**",
										],
										children: [
											"Because of this risk of skew and hot spots, many distributed datastores use a hash function to determine the partition for a given key.",
											"A good hash function takes skewed data and makes it uniformly distributed. Say you have a 32-bit hash function that takes a string. Whenever you give it a new string, it returns a seemingly random number between 0 and 232 − 1. Even if the input strings are very similar, their hashes are evenly distributed across that range of numbers.",
											"For partitioning purposes, the hash function need not be cryptographically strong: for example, Cassandra and MongoDB use MD5, and Voldemort uses the Fowler–Noll–Vo function. Many programming languages have simple hash functions built in (as they are used for hash tables), but they may not be suitable for partitioning: for example, in Java’s `Object.hashCode()` and Ruby’s `Object#hash`, the same key may have a different hash value in different processes \\[[6]()\\].",
											"Once you have a suitable hash function for keys, you can assign each partition a range of hashes (rather than a range of keys), and every key whose hash falls within a partition’s range will be stored in that partition. This is illustrated in [Figure 6-3](blob:https://johnfactotum.github.io/5d984128-9dff-4ecb-a798-d19425cc73f6#fig_partitioning_hashing).",
											"![ddia 0603](blob:https://johnfactotum.github.io/394a573d-98d3-4002-b618-52f4fdc2089a)",
											"###### *Figure 6-3. Partitioning by hash of key.*",
											"This technique is good at distributing keys fairly among the partitions. The partition boundaries can be evenly spaced, or they can be chosen pseudorandomly (in which case the technique is sometimes known as *consistent hashing*).",
											[
												{
													heading: [
														"##### **Consistent Hashing**",
													],
													children: [
														"Consistent hashing, as defined by Karger et al. \\[[7]()\\], is a way of evenly distributing load across an internet-wide system of caches such as a content delivery network (CDN). It uses randomly chosen partition boundaries to avoid the need for central control or distributed consensus. Note that *consistent* here has nothing to do with replica consistency (see [Chapter 5]()) or ACID consistency (see [Chapter 7]()), but rather describes a particular approach to rebalancing.",
														"As we shall see in [“Rebalancing Partitions”](blob:https://johnfactotum.github.io/5d984128-9dff-4ecb-a798-d19425cc73f6#sec_partitioning_rebalancing), this particular approach actually doesn’t work very well for databases \\[[8]()\\], so it is rarely used in practice (the documentation of some databases still refers to consistent hashing, but it is often inaccurate). Because this is so confusing, it’s best to avoid the term *consistent hashing* and just call it *hash partitioning* instead.",
														"Unfortunately however, by using the hash of the key for partitioning we lose a nice property of key-range partitioning: the ability to do efficient range queries. Keys that were once adjacent are now scattered across all the partitions, so their sort order is lost. In MongoDB, if you have enabled hash-based sharding mode, any range query has to be sent to all partitions \\[[4]()\\]. Range queries on the primary key are not supported by Riak \\[[9]()\\], Couchbase \\[[10]()\\], or Voldemort.",
														"Cassandra achieves a compromise between the two partitioning strategies \\[[11](), [12](), [13]()\\]. A table in Cassandra can be declared with a *compound primary key* consisting of several columns. Only the first part of that key is hashed to determine the partition, but the other columns are used as a concatenated index for sorting the data in Cassandra’s SSTables. A query therefore cannot search for a range of values within the first column of a compound key, but if it specifies a fixed value for the first column, it can perform an efficient range scan over the other columns of the key.",
														"The concatenated index approach enables an elegant data model for one-to-many relationships. For example, on a social media site, one user may post many updates. If the primary key for updates is chosen to be `(user_id, update_timestamp)`, then you can efficiently retrieve all updates made by a particular user within some time interval, sorted by timestamp. Different users may be stored on different partitions, but within each user, the updates are stored ordered by timestamp on a single partition.",
													],
													summary: [
														"Consistent hashing struggles with databases; Cassandra's compound keys offer an elegant solution.",
													],
													longSummary: [
														"Consistent hashing, introduced by Karger et al., distributes load across cache systems without central control but is impractical for databases due to inefficient range queries. Hash-based partitioning scatters adjacent keys, forcing MongoDB to query all partitions for range queries, while Riak, Couchbase, and Voldemort lack primary key range query support. Cassandra offers a solution with compound primary keys, using the first part for partitioning and other columns as a concatenated index for sorting. This allows efficient data modeling for one-to-many relationships, such as retrieving user updates within a time interval, sorted by timestamp, in social media applications.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289503/blog-cover-images/g9k0fmgokkebllmaaym8.webp",
												},
											],
										],
										summary: [
											"Hash functions distribute data evenly across partitions, but hinder efficient range queries in databases.",
										],
										longSummary: [
											"Distributed datastores often use hash functions to determine key partitions, mitigating skew and hot spots by distributing data uniformly. While not needing cryptographic strength, hash functions like MD5 in Cassandra and MongoDB, or Fowler–Noll–Vo in Voldemort, effectively assign keys to partitions based on hash ranges. Consistent hashing, which uses pseudorandom partition boundaries, is less effective for databases despite its use in cache systems. Hash-based partitioning complicates range queries, requiring MongoDB to query all partitions and limiting Riak, Couchbase, and Voldemort. Cassandra balances this with compound primary keys, supporting efficient data retrieval in one-to-many relationships, such as social media updates.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289477/blog-cover-images/zbr6o8v2aqsy4v0fk4bm.webp",
									},
									{
										heading: [
											"## **Skewed Workloads and Relieving Hot Spots**",
										],
										children: [
											"As discussed, hashing a key to determine its partition can help reduce hot spots. However, it can’t avoid them entirely: in the extreme case where all reads and writes are for the same key, you still end up with all requests being routed to the same partition.",
											"This kind of workload is perhaps unusual, but not unheard of: for example, on a social media site, a celebrity user with millions of followers may cause a storm of activity when they do something \\[[14]()\\]. This event can result in a large volume of writes to the same key (where the key is perhaps the user ID of the celebrity, or the ID of the action that people are commenting on). Hashing the key doesn’t help, as the hash of two identical IDs is still the same.",
											"Today, most data systems are not able to automatically compensate for such a highly skewed workload, so it’s the responsibility of the application to reduce the skew. For example, if one key is known to be very hot, a simple technique is to add a random number to the beginning or end of the key. Just a two-digit decimal random number would split the writes to the key evenly across 100 different keys, allowing those keys to be distributed to different partitions.",
											"However, having split the writes across different keys, any reads now have to do additional work, as they have to read the data from all 100 keys and combine it. This technique also requires additional bookkeeping: it only makes sense to append the random number for the small number of hot keys; for the vast majority of keys with low write throughput this would be unnecessary overhead. Thus, you also need some way of keeping track of which keys are being split.",
											"Perhaps in the future, data systems will be able to automatically detect and compensate for skewed workloads; but for now, you need to think through the trade-offs for your own application.",
										],
										summary: [
											"Hashing can't fully prevent hot spots; consider randomizing keys to balance workloads.",
										],
										longSummary: [
											"Hashing keys can help reduce hot spots in data systems but can't completely eliminate them, especially when a single key, like a celebrity user on social media, attracts a surge of activity. Most systems can't automatically handle such skewed workloads, so applications need to address the imbalance. One method is appending a random number to hot keys to distribute writes across different keys and partitions, though this complicates reads and requires tracking which keys are split. While future systems may handle skewed workloads better, you must currently weigh these trade-offs for your application.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289483/blog-cover-images/yhpvtlzzdf3ihidbcps5.webp",
									},
								],
							],
							summary: [
								"Efficient data partitioning balances load, avoids hot spots, and optimizes query performance.",
							],
							longSummary: [
								"When partitioning large data across nodes, aim to evenly distribute data and query loads to avoid overloads. Random assignment spreads data evenly but requires querying all nodes. Key-value models assign continuous key ranges to partitions, like encyclopedia volumes, but can create hot spots with sequential keys. Hash functions distribute keys uniformly, complicating range queries. Systems like Cassandra use compound keys for balance. Despite these strategies, skewed workloads, such as from celebrity social media activity, can still occur, necessitating application-level solutions like key splitting to manage load distribution effectively.",
							],
							imageUrl:
								"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289459/blog-cover-images/t7gtzng8iccudcngvlzc.webp",
						},
						{
							heading: [
								"# **Partitioning and Secondary Indexes**",
							],
							children: [
								"The partitioning schemes we have discussed so far rely on a key-value data model. If records are only ever accessed via their primary key, we can determine the partition from that key and use it to route read and write requests to the partition responsible for that key.",
								"The situation becomes more complicated if secondary indexes are involved (see also [“Other Indexing Structures”]()). A secondary index usually doesn’t identify a record uniquely but rather is a way of searching for occurrences of a particular value: find all actions by user `123`, find all articles containing the word `hogwash`, find all cars whose color is `red`, and so on.",
								"Secondary indexes are the bread and butter of relational databases, and they are common in document databases too. Many key-value stores (such as HBase and Voldemort) have avoided secondary indexes because of their added implementation complexity, but some (such as Riak) have started adding them because they are so useful for data modeling. And finally, secondary indexes are the *raison d’être* of search servers such as Solr and Elasticsearch.",
								"The problem with secondary indexes is that they don’t map neatly to partitions. There are two main approaches to partitioning a database with secondary indexes: document-based partitioning and term-based partitioning.",
								[
									{
										heading: [
											"## **Partitioning Secondary Indexes by Document**",
										],
										children: [
											"For example, imagine you are operating a website for selling used cars (illustrated in [Figure 6-4](blob:https://johnfactotum.github.io/5d984128-9dff-4ecb-a798-d19425cc73f6#fig_partitioning_secondary_by_doc)). Each listing has a unique ID—call it the *document ID*—and you partition the database by the document ID (for example, IDs 0 to 499 in partition 0, IDs 500 to 999 in partition 1, etc.).",
											"You want to let users search for cars, allowing them to filter by color and by make, so you need a secondary index on `color` and `make` (in a document database these would be fields; in a relational database they would be columns). If you have declared the index, the database can perform the indexing automatically.[ii]() For example, whenever a red car is added to the database, the database partition automatically adds it to the list of document IDs for the index entry `color:red`.",
											"![ddia 0604](blob:https://johnfactotum.github.io/cab0d6a7-654c-4f9a-9d09-55fb490a5e47)",
											"###### *Figure 6-4. Partitioning secondary indexes by document.*",
											"In this indexing approach, each partition is completely separate: each partition maintains its own secondary indexes, covering only the documents in that partition. It doesn’t care what data is stored in other partitions. Whenever you need to write to the database—to add, remove, or update a document—you only need to deal with the partition that contains the document ID that you are writing. For that reason, a document-partitioned index is also known as a *local index* (as opposed to a *global index*, described in the next section).",
											"However, reading from a document-partitioned index requires care: unless you have done something special with the document IDs, there is no reason why all the cars with a particular color or a particular make would be in the same partition. In [Figure 6-4](blob:https://johnfactotum.github.io/5d984128-9dff-4ecb-a798-d19425cc73f6#fig_partitioning_secondary_by_doc), red cars appear in both partition 0 and partition 1. Thus, if you want to search for red cars, you need to send the query to *all* partitions, and combine all the results you get back.",
											"This approach to querying a partitioned database is sometimes known as *scatter/gather*, and it can make read queries on secondary indexes quite expensive. Even if you query the partitions in parallel, scatter/gather is prone to tail latency amplification (see [“Percentiles in Practice”]()). Nevertheless, it is widely used: MongoDB, Riak \\[[15]()\\], Cassandra \\[[16]()\\], Elasticsearch \\[[17]()\\], SolrCloud \\[[18]()\\], and VoltDB \\[[19]()\\] all use document-partitioned secondary indexes. Most database vendors recommend that you structure your partitioning scheme so that secondary index queries can be served from a single partition, but that is not always possible, especially when you’re using multiple secondary indexes in a single query (such as filtering cars by color and by make at the same time).",
											"![ddia 0605](blob:https://johnfactotum.github.io/ee7413ef-1eb3-4f1a-8542-c31285e7b949)",
											"###### *Figure 6-5. Partitioning secondary indexes by term.*",
										],
										summary: [
											"Partitioning databases simplifies writing but complicates reading; discover why it's widely used.",
										],
										longSummary: [
											"When partitioning a database for a used car website, organize by document ID, with each partition having local indexes for attributes like color and make. This simplifies writing but complicates reading, as you must query all partitions to find specific cars, potentially causing latency. Despite this, document-partitioned secondary indexes are common in databases like MongoDB and Cassandra. Vendors often recommend structuring partitions to handle secondary index queries from a single partition, though this isn't always feasible with multiple criteria.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289485/blog-cover-images/oyzlrtc6co8nrafctwkr.webp",
									},
									{
										heading: [
											"## **Partitioning Secondary Indexes by Term**",
										],
										children: [
											"Rather than each partition having its own secondary index (a *local index*), we can construct a *global index* that covers data in all partitions. However, we can’t just store that index on one node, since it would likely become a bottleneck and defeat the purpose of partitioning. A global index must also be partitioned, but it can be partitioned differently from the primary key index.",
											"[Figure 6-5](blob:https://johnfactotum.github.io/5d984128-9dff-4ecb-a798-d19425cc73f6#fig_partitioning_secondary_by_term) illustrates what this could look like: red cars from all partitions appear under `color:red` in the index, but the index is partitioned so that colors starting with the letters *a* to *r* appear in partition 0 and colors starting with *s* to *z* appear in partition 1. The index on the make of car is partitioned similarly (with the partition boundary being between *f* and *h*).",
											"We call this kind of index *term-partitioned*, because the term we’re looking for determines the partition of the index. Here, a term would be `color:red`, for example. The name *term* comes from full-text indexes (a particular kind of secondary index), where the terms are all the words that occur in a document.",
											"As before, we can partition the index by the term itself, or using a hash of the term. Partitioning by the term itself can be useful for range scans (e.g., on a numeric property, such as the asking price of the car), whereas partitioning on a hash of the term gives a more even distribution of load.",
											"The advantage of a global (term-partitioned) index over a document-partitioned index is that it can make reads more efficient: rather than doing scatter/gather over all partitions, a client only needs to make a request to the partition containing the term that it wants. However, the downside of a global index is that writes are slower and more complicated, because a write to a single document may now affect multiple partitions of the index (every term in the document might be on a different partition, on a different node).",
											"In an ideal world, the index would always be up to date, and every document written to the database would immediately be reflected in the index. However, in a term-partitioned index, that would require a distributed transaction across all partitions affected by a write, which is not supported in all databases (see [Chapter 7]() and [Chapter 9]()).",
											"In practice, updates to global secondary indexes are often asynchronous (that is, if you read the index shortly after a write, the change you just made may not yet be reflected in the index). For example, Amazon DynamoDB states that its global secondary indexes are updated within a fraction of a second in normal circumstances, but may experience longer propagation delays in cases of faults in the infrastructure \\[[20]()\\].",
											"Other uses of global term-partitioned indexes include Riak’s search feature \\[[21]()\\] and the Oracle data warehouse, which lets you choose between local and global indexing \\[[22]()\\]. We will return to the topic of implementing term-partitioned secondary indexes in [Chapter 12]().",
										],
										summary: [
											"Global indexes boost read efficiency but complicate writes; updates may be asynchronously reflected.",
										],
										longSummary: [
											"Global indexes, unlike local indexes for each partition, cover data across all partitions and must be partitioned themselves to prevent bottlenecks. These term-partitioned indexes are divided by the search terms, either directly or using a hash for balanced load distribution. They enhance read efficiency by eliminating scatter/gather operations but complicate and slow down writes, as a single document update can impact multiple index partitions. Updates to global secondary indexes are often asynchronous, so changes may not be immediately visible. Examples include Amazon DynamoDB, Riak's search feature, and Oracle's data warehouse, which supports both local and global indexing.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289485/blog-cover-images/eebmfrtsgjlxrw65znvd.webp",
									},
								],
							],
							summary: [
								"Secondary indexes complicate partitioning; choose document or term-based strategies for efficient querying.",
							],
							longSummary: [
								"Database partitioning often uses a key-value model, routing requests via primary keys. Secondary indexes, essential for relational and document databases, complicate this by not uniquely identifying records but enabling value searches. While some key-value stores avoid secondary indexes, others like Riak use them for data modeling benefits. Document-based partitioning simplifies writing by focusing on the document ID's partition but complicates reading with scatter/gather queries. Term-based partitioning, used in Amazon DynamoDB, Riak, and Oracle's data warehouse, streamlines reads with global indexes but complicates writes due to asynchronous updates across multiple index partitions.",
							],
							imageUrl:
								"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289460/blog-cover-images/w0cq6km6fjp0iro93o1y.webp",
						},
						{
							heading: ["# **Rebalancing Partitions**"],
							children: [
								"Over time, things change in a database:",
								"* The query throughput increases, so you want to add more CPUs to handle the load.",
								"* The dataset size increases, so you want to add more disks and RAM to store it.",
								"* A machine fails, and other machines need to take over the failed machine’s responsibilities.",
								"All of these changes call for data and requests to be moved from one node to another. The process of moving load from one node in the cluster to another is called *rebalancing*.",
								"No matter which partitioning scheme is used, rebalancing is usually expected to meet some minimum requirements:",
								"* After rebalancing, the load (data storage, read and write requests) should be shared fairly between the nodes in the cluster.",
								"* While rebalancing is happening, the database should continue accepting reads and writes.",
								"* No more data than necessary should be moved between nodes, to make rebalancing fast and to minimize the network and disk I/O load.",
								[
									{
										heading: [
											"## **Strategies for Rebalancing**",
										],
										children: [
											"There are a few different ways of assigning partitions to nodes \\[[23]()\\]. Let’s briefly discuss each in turn.",
											[
												{
													heading: [
														"### **How not to do it: hash mod N**",
													],
													children: [
														"When partitioning by the hash of a key, we said earlier ([Figure 6-3](blob:https://johnfactotum.github.io/5d984128-9dff-4ecb-a798-d19425cc73f6#fig_partitioning_hashing)) that it’s best to divide the possible hashes into ranges and assign each range to a partition (e.g., assign *key* to partition 0 if 0 ≤ *hash*(*key*) < *b*0, to partition 1 if *b*0 ≤ *hash*(*key*) < *b*1, etc.).",
														"Perhaps you wondered why we don’t just use *mod* (the `%` operator in many programming languages). For example, *hash*(*key*) *mod* 10 would return a number between 0 and 9 (if we write the hash as a decimal number, the hash *mod* 10 would be the last digit). If we have 10 nodes, numbered 0 to 9, that seems like an easy way of assigning each key to a node.",
														"The problem with the *mod N* approach is that if the number of nodes *N* changes, most of the keys will need to be moved from one node to another. For example, say *hash*(*key*) = 123456. If you initially have 10 nodes, that key starts out on node 6 (because 123456 *mod* 10 = 6). When you grow to 11 nodes, the key needs to move to node 3 (123456 *mod* 11 = 3), and when you grow to 12 nodes, it needs to move to node 0 (123456 *mod* 12 = 0). Such frequent moves make rebalancing excessively expensive.",
														"We need an approach that doesn’t move data around more than necessary.",
													],
													summary: [
														"Avoid costly rebalancing: partition hash keys by ranges, not mod N.",
													],
													longSummary: [
														"When partitioning by hash key, using the mod operator (%) to assign hash(key) mod N to node N can lead to excessive data movement when the number of nodes changes. For instance, a hash(key) of 123456 would be assigned to node 6 with 10 nodes, but would shift to node 3 with 11 nodes, and to node 0 with 12 nodes. This frequent rebalancing is costly, so it's more efficient to divide possible hashes into ranges, minimizing unnecessary data relocation and maintaining stability as nodes are added or removed.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289502/blog-cover-images/sfhpdzuvr3r4qfc2ytlp.webp",
												},
												{
													heading: [
														"### **Fixed number of partitions**",
													],
													children: [
														"Fortunately, there is a fairly simple solution: create many more partitions than there are nodes, and assign several partitions to each node. For example, a database running on a cluster of 10 nodes may be split into 1,000 partitions from the outset so that approximately 100 partitions are assigned to each node.",
														"Now, if a node is added to the cluster, the new node can *steal* a few partitions from every existing node until partitions are fairly distributed once again. This process is illustrated in [Figure 6-6](blob:https://johnfactotum.github.io/5d984128-9dff-4ecb-a798-d19425cc73f6#fig_partitioning_rebalance_fixed). If a node is removed from the cluster, the same happens in reverse.",
														"Only entire partitions are moved between nodes. The number of partitions does not change, nor does the assignment of keys to partitions. The only thing that changes is the assignment of partitions to nodes. This change of assignment is not immediate—it takes some time to transfer a large amount of data over the network—so the old assignment of partitions is used for any reads and writes that happen while the transfer is in progress.",
														"![ddia 0606](blob:https://johnfactotum.github.io/8262705e-89c0-427f-ab57-00ab8df770fa)",
														"###### *Figure 6-6. Adding a new node to a database cluster with multiple partitions per node.*",
														"In principle, you can even account for mismatched hardware in your cluster: by assigning more partitions to nodes that are more powerful, you can force those nodes to take a greater share of the load.",
														"This approach to rebalancing is used in Riak \\[[15]()\\], Elasticsearch \\[[24]()\\], Couchbase \\[[10]()\\], and Voldemort \\[[25]()\\].",
														"In this configuration, the number of partitions is usually fixed when the database is first set up and not changed afterward. Although in principle it’s possible to split and merge partitions (see the next section), a fixed number of partitions is operationally simpler, and so many fixed-partition databases choose not to implement partition splitting. Thus, the number of partitions configured at the outset is the maximum number of nodes you can have, so you need to choose it high enough to accommodate future growth. However, each partition also has management overhead, so it’s counterproductive to choose too high a number.",
														"Choosing the right number of partitions is difficult if the total size of the dataset is highly variable (for example, if it starts small but may grow much larger over time). Since each partition contains a fixed fraction of the total data, the size of each partition grows proportionally to the total amount of data in the cluster. If partitions are very large, rebalancing and recovery from node failures become expensive. But if partitions are too small, they incur too much overhead. The best performance is achieved when the size of partitions is “just right,” neither too big nor too small, which can be hard to achieve if the number of partitions is fixed but the dataset size varies.",
													],
													summary: [
														"Optimize database rebalancing by using more partitions than nodes for efficient distribution.",
													],
													longSummary: [
														"To rebalance partitioned databases, create more partitions than nodes, assigning multiple partitions per node. When adding a node, redistribute partitions from existing nodes to maintain balance, moving entire partitions without changing their numbers or key assignments. The old assignment handles ongoing operations during transfers. Systems like Riak and Elasticsearch use this method, assigning more partitions to powerful nodes to accommodate hardware differences. Set a fixed partition count during setup, but choose wisely—too many cause overhead, too few limit growth, and partition size increases with dataset size, affecting rebalancing and recovery.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289501/blog-cover-images/decte1d4k4qtcxtas4pe.webp",
												},
												{
													heading: [
														"### **Dynamic partitioning**",
													],
													children: [
														"For databases that use key range partitioning (see [“Partitioning by Key Range”](blob:https://johnfactotum.github.io/5d984128-9dff-4ecb-a798-d19425cc73f6#sec_partitioning_key_range)), a fixed number of partitions with fixed boundaries would be very inconvenient: if you got the boundaries wrong, you could end up with all of the data in one partition and all of the other partitions empty. Reconfiguring the partition boundaries manually would be very tedious.",
														"For that reason, key range–partitioned databases such as HBase and RethinkDB create partitions dynamically. When a partition grows to exceed a configured size (on HBase, the default is 10 GB), it is split into two partitions so that approximately half of the data ends up on each side of the split \\[[26]()\\]. Conversely, if lots of data is deleted and a partition shrinks below some threshold, it can be merged with an adjacent partition. This process is similar to what happens at the top level of a B-tree (see [“B-Trees”]()).",
														"Each partition is assigned to one node, and each node can handle multiple partitions, like in the case of a fixed number of partitions. After a large partition has been split, one of its two halves can be transferred to another node in order to balance the load. In the case of HBase, the transfer of partition files happens through HDFS, the underlying distributed filesystem \\[[3]()\\].",
														"An advantage of dynamic partitioning is that the number of partitions adapts to the total data volume. If there is only a small amount of data, a small number of partitions is sufficient, so overheads are small; if there is a huge amount of data, the size of each individual partition is limited to a configurable maximum \\[[23]()\\].",
														"However, a caveat is that an empty database starts off with a single partition, since there is no *a priori* information about where to draw the partition boundaries. While the dataset is small—until it hits the point at which the first partition is split—all writes have to be processed by a single node while the other nodes sit idle. To mitigate this issue, HBase and MongoDB allow an initial set of partitions to be configured on an empty database (this is called *pre-splitting*). In the case of key-range partitioning, pre-splitting requires that you already know what the key distribution is going to look like \\[[4](), [26]()\\].",
														"Dynamic partitioning is not only suitable for key range–partitioned data, but can equally well be used with hash-partitioned data. MongoDB since version 2.4 supports both key-range and hash partitioning, and it splits partitions dynamically in either case.",
													],
													summary: [
														"Dynamic partitioning in databases like HBase optimizes load balancing and data management efficiently.",
													],
													longSummary: [
														"Key range partitioning databases like HBase and RethinkDB dynamically manage partitions by splitting them when they exceed a set size (e.g., 10 GB in HBase) and merging them when they shrink. This ensures balanced load distribution across nodes. Initially, databases start with a single partition, but HBase and MongoDB allow pre-splitting to optimize initial writes, requiring knowledge of key distribution. MongoDB, since version 2.4, supports both key-range and hash-partitioned data, adapting efficiently to varying data volumes while maintaining manageable partition sizes.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289503/blog-cover-images/gn6rqu4v0c6uljpb2sej.webp",
												},
												{
													heading: [
														"### **Partitioning proportionally to nodes**",
													],
													children: [
														"With dynamic partitioning, the number of partitions is proportional to the size of the dataset, since the splitting and merging processes keep the size of each partition between some fixed minimum and maximum. On the other hand, with a fixed number of partitions, the size of each partition is proportional to the size of the dataset. In both of these cases, the number of partitions is independent of the number of nodes.",
														"A third option, used by Cassandra and Ketama, is to make the number of partitions proportional to the number of nodes—in other words, to have a fixed number of partitions *per node* \\[[23](), [27](), [28]()\\]. In this case, the size of each partition grows proportionally to the dataset size while the number of nodes remains unchanged, but when you increase the number of nodes, the partitions become smaller again. Since a larger data volume generally requires a larger number of nodes to store, this approach also keeps the size of each partition fairly stable.",
														"When a new node joins the cluster, it randomly chooses a fixed number of existing partitions to split, and then takes ownership of one half of each of those split partitions while leaving the other half of each partition in place. The randomization can produce unfair splits, but when averaged over a larger number of partitions (in Cassandra, 256 partitions per node by default), the new node ends up taking a fair share of the load from the existing nodes. Cassandra 3.0 introduced an alternative rebalancing algorithm that avoids unfair splits \\[[29]()\\].",
														"Picking partition boundaries randomly requires that hash-based partitioning is used (so the boundaries can be picked from the range of numbers produced by the hash function). Indeed, this approach corresponds most closely to the original definition of consistent hashing \\[[7]()\\] (see [“Consistent Hashing”](blob:https://johnfactotum.github.io/5d984128-9dff-4ecb-a798-d19425cc73f6#sidebar_consistent_hashing)). Newer hash functions can achieve a similar effect with lower metadata overhead \\[[8]()\\].",
													],
													summary: [
														"Discover how consistent hashing balances load with dynamic partitioning in distributed systems like Cassandra.",
													],
													longSummary: [
														"Dynamic partitioning adjusts the number of partitions based on dataset size, while fixed partitioning adjusts partition size. A third method, used by Cassandra and Ketama, ties the number of partitions to the number of nodes, maintaining a fixed number per node. When a new node joins, it randomly splits existing partitions, taking half the load. Although random splits can be uneven, having enough partitions (Cassandra defaults to 256 per node) ensures a fair load distribution. This method relies on hash-based partitioning, allowing partition boundaries to be selected from the hash function's range, aligning with consistent hashing principles.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289505/blog-cover-images/ldfjta57efzybhsfhcdl.webp",
												},
											],
										],
										summary: [
											"Efficient partitioning balances load and minimizes data movement in distributed databases.",
										],
										longSummary: [
											"When assigning partitions to nodes, avoid using hash key partitioning with the mod operator, as it causes excessive data movement during node changes. Instead, create more partitions than nodes and assign several to each node for smoother rebalancing. This method, used in Riak and Elasticsearch, allows for hardware differences by assigning more partitions to powerful nodes. Dynamic partitioning, seen in HBase and RethinkDB, adjusts partition numbers based on data volume. Cassandra and Ketama use a fixed number of partitions per node, splitting them when new nodes join to balance load, ensuring efficient data distribution with minimal overhead.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289475/blog-cover-images/nwtjsqcfg5qfxehmzhwz.webp",
									},
									{
										heading: [
											"## **Operations: Automatic or Manual Rebalancing**",
										],
										children: [
											"There is one important question with regard to rebalancing that we have glossed over: does the rebalancing happen automatically or manually?",
											"There is a gradient between fully automatic rebalancing (the system decides automatically when to move partitions from one node to another, without any administrator interaction) and fully manual (the assignment of partitions to nodes is explicitly configured by an administrator, and only changes when the administrator explicitly reconfigures it). For example, Couchbase, Riak, and Voldemort generate a suggested partition assignment automatically, but require an administrator to commit it before it takes effect.",
											"Fully automated rebalancing can be convenient, because there is less operational work to do for normal maintenance. However, it can be unpredictable. Rebalancing is an expensive operation, because it requires rerouting requests and moving a large amount of data from one node to another. If it is not done carefully, this process can overload the network or the nodes and harm the performance of other requests while the rebalancing is in progress.",
											"Such automation can be dangerous in combination with automatic failure detection. For example, say one node is overloaded and is temporarily slow to respond to requests. The other nodes conclude that the overloaded node is dead, and automatically rebalance the cluster to move load away from it. This puts additional load on the overloaded node, other nodes, and the network—making the situation worse and potentially causing a cascading failure.",
											"For that reason, it can be a good thing to have a human in the loop for rebalancing. It’s slower than a fully automatic process, but it can help prevent operational surprises.",
										],
										summary: [
											"Is rebalancing best handled automatically or manually to avoid operational surprises?",
										],
										longSummary: [
											"Rebalancing can be either automatic or manual, with a spectrum in between. Fully automatic rebalancing is convenient and reduces operational work but can be unpredictable and costly, potentially overloading the network or nodes. This unpredictability is risky, especially when paired with automatic failure detection, as temporary issues might trigger unnecessary rebalancing, worsening the situation and causing cascading failures. Therefore, involving a human in the rebalancing process can prevent such operational surprises, despite being slower than a fully automated approach.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289476/blog-cover-images/jx01mvuxle8sngwxhc4a.webp",
									},
								],
							],
							summary: [
								"Efficient database rebalancing minimizes data movement, ensuring fair load distribution and operational continuity.",
							],
							longSummary: [
								"Databases need rebalancing to handle increased queries, growing datasets, and machine failures. Effective rebalancing ensures fair load distribution and minimal data movement. Instead of using the mod operator, dividing hash ranges is more efficient, reducing data shifts when nodes change. Creating more partitions than nodes allows dynamic load balancing, accommodating hardware differences. Fixed partitioning, used by Riak and Elasticsearch, sets a static partition count, while dynamic partitioning, as in HBase and RethinkDB, adjusts based on data volume. Cassandra and Ketama use node-proportional partitioning. Rebalancing can be automatic or manual, with automation requiring human oversight.",
							],
							imageUrl:
								"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289457/blog-cover-images/jqfulmdnpok97dnxthgq.webp",
						},
						{
							heading: ["# **Request Routing**"],
							children: [
								"We have now partitioned our dataset across multiple nodes running on multiple machines. But there remains an open question: when a client wants to make a request, how does it know which node to connect to? As partitions are rebalanced, the assignment of partitions to nodes changes. Somebody needs to stay on top of those changes in order to answer the question: if I want to read or write the key “foo”, which IP address and port number do I need to connect to?",
								"This is an instance of a more general problem called *service discovery*, which isn’t limited to just databases. Any piece of software that is accessible over a network has this problem, especially if it is aiming for high availability (running in a redundant configuration on multiple machines). Many companies have written their own in-house service discovery tools, and many of these have been released as open source \\[[30]()\\].",
								"On a high level, there are a few different approaches to this problem (illustrated in [Figure 6-7](blob:https://johnfactotum.github.io/5d984128-9dff-4ecb-a798-d19425cc73f6#fig_partitioning_routing)):",
								"1. Allow clients to contact any node (e.g., via a round-robin load balancer). If that node coincidentally owns the partition to which the request applies, it can handle the request directly; otherwise, it forwards the request to the appropriate node, receives the reply, and passes the reply along to the client.",
								"2. Send all requests from clients to a routing tier first, which determines the node that should handle each request and forwards it accordingly. This routing tier does not itself handle any requests; it only acts as a partition-aware load balancer.",
								"3. Require that clients be aware of the partitioning and the assignment of partitions to nodes. In this case, a client can connect directly to the appropriate node, without any intermediary.",
								"In all cases, the key problem is: how does the component making the routing decision (which may be one of the nodes, or the routing tier, or the client) learn about changes in the assignment of partitions to nodes?",
								"![ddia 0607](blob:https://johnfactotum.github.io/7a0edf95-a7ca-493e-94e0-0912d595afb6)",
								"###### *Figure 6-7. Three different ways of routing a request to the right node.*",
								"This is a challenging problem, because it is important that all participants agree—otherwise requests would be sent to the wrong nodes and not handled correctly. There are protocols for achieving consensus in a distributed system, but they are hard to implement correctly (see [Chapter 9]()).",
								"Many distributed data systems rely on a separate coordination service such as ZooKeeper to keep track of this cluster metadata, as illustrated in [Figure 6-8](blob:https://johnfactotum.github.io/5d984128-9dff-4ecb-a798-d19425cc73f6#fig_partitioning_zookeeper). Each node registers itself in ZooKeeper, and ZooKeeper maintains the authoritative mapping of partitions to nodes. Other actors, such as the routing tier or the partitioning-aware client, can subscribe to this information in ZooKeeper. Whenever a partition changes ownership, or a node is added or removed, ZooKeeper notifies the routing tier so that it can keep its routing information up to date.",
								"![ddia 0608](blob:https://johnfactotum.github.io/64395b0a-1572-4921-96d6-8a1d66b139c1)",
								"###### *Figure 6-8. Using ZooKeeper to keep track of assignment of partitions to nodes.*",
								"For example, LinkedIn’s Espresso uses Helix \\[[31]()\\] for cluster management (which in turn relies on ZooKeeper), implementing a routing tier as shown in [Figure 6-8](blob:https://johnfactotum.github.io/5d984128-9dff-4ecb-a798-d19425cc73f6#fig_partitioning_zookeeper). HBase, SolrCloud, and Kafka also use ZooKeeper to track partition assignment. MongoDB has a similar architecture, but it relies on its own *config server* implementation and *mongos* daemons as the routing tier.",
								"Cassandra and Riak take a different approach: they use a *gossip protocol* among the nodes to disseminate any changes in cluster state. Requests can be sent to any node, and that node forwards them to the appropriate node for the requested partition (approach 1 in [Figure 6-7](blob:https://johnfactotum.github.io/5d984128-9dff-4ecb-a798-d19425cc73f6#fig_partitioning_routing)). This model puts more complexity in the database nodes but avoids the dependency on an external coordination service such as ZooKeeper.",
								"Couchbase does not rebalance automatically, which simplifies the design. Normally it is configured with a routing tier called *moxi*, which learns about routing changes from the cluster nodes \\[[32]()\\].",
								"When using a routing tier or when sending requests to a random node, clients still need to find the IP addresses to connect to. These are not as fast-changing as the assignment of partitions to nodes, so it is often sufficient to use DNS for this purpose.",
								[
									{
										heading: [
											"## **Parallel Query Execution**",
										],
										children: [
											"So far we have focused on very simple queries that read or write a single key (plus scatter/gather queries in the case of document-partitioned secondary indexes). This is about the level of access supported by most NoSQL distributed datastores.",
											"However, *massively parallel processing* (MPP) relational database products, often used for analytics, are much more sophisticated in the types of queries they support. A typical data warehouse query contains several join, filtering, grouping, and aggregation operations. The MPP query optimizer breaks this complex query into a number of execution stages and partitions, many of which can be executed in parallel on different nodes of the database cluster. Queries that involve scanning over large parts of the dataset particularly benefit from such parallel execution.",
											"Fast parallel execution of data warehouse queries is a specialized topic, and given the business importance of analytics, it receives a lot of commercial interest. We will discuss some techniques for parallel query execution in [Chapter 10](). For a more detailed overview of techniques used in parallel databases, please see the references \\[[1](), [33]()\\].",
										],
										summary: [
											"Explore how MPP databases optimize complex queries for fast, parallel execution in analytics.",
										],
										longSummary: [
											"While NoSQL distributed datastores typically handle simple queries involving single key reads or writes, massively parallel processing (MPP) relational databases excel in supporting complex queries, often used in analytics. These queries involve multiple operations like joins, filtering, grouping, and aggregation. The MPP query optimizer efficiently breaks down these complex queries into execution stages and partitions, allowing them to be executed in parallel across different nodes in a database cluster. This parallel execution is particularly advantageous for large dataset scans and is a specialized area of significant commercial interest due to its critical role in business analytics.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289484/blog-cover-images/iynltrmrrwsaycdyeneu.webp",
									},
								],
							],
							summary: [
								"Discover how distributed systems manage dynamic partitioning and optimize complex queries for analytics.",
							],
							longSummary: [
								"When partitioning datasets across nodes, service discovery is key to connecting clients to the right node, especially when assignments change. Strategies include request forwarding, routing tiers, or making clients partition-aware. Systems like ZooKeeper track cluster metadata, with nodes registering and components subscribing to updates, as used by LinkedIn's Espresso, HBase, SolrCloud, and Kafka. Cassandra and Riak use gossip protocols, while Couchbase avoids automatic rebalancing. DNS is often enough for initial connections. NoSQL datastores handle simple key-based queries, while MPP relational databases excel in complex queries, optimizing execution for fast analytics.",
							],
							imageUrl:
								"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289465/blog-cover-images/cmqltwg8wonikk19lyht.webp",
						},
						{
							heading: ["# **Summary**"],
							children: [
								"In this chapter we explored different ways of partitioning a large dataset into smaller subsets. Partitioning is necessary when you have so much data that storing and processing it on a single machine is no longer feasible.",
								"The goal of partitioning is to spread the data and query load evenly across multiple machines, avoiding hot spots (nodes with disproportionately high load). This requires choosing a partitioning scheme that is appropriate to your data, and rebalancing the partitions when nodes are added to or removed from the cluster.",
								"We discussed two main approaches to partitioning:",
								"* *Key range partitioning*, where keys are sorted, and a partition owns all the keys from some minimum up to some maximum. Sorting has the advantage that efficient range queries are possible, but there is a risk of hot spots if the application often accesses keys that are close together in the sorted order.",
								"  In this approach, partitions are typically rebalanced dynamically by splitting the range into two subranges when a partition gets too big.",
								"* *Hash partitioning*, where a hash function is applied to each key, and a partition owns a range of hashes. This method destroys the ordering of keys, making range queries inefficient, but may distribute load more evenly.",
								"  When partitioning by hash, it is common to create a fixed number of partitions in advance, to assign several partitions to each node, and to move entire partitions from one node to another when nodes are added or removed. Dynamic partitioning can also be used.",
								"Hybrid approaches are also possible, for example with a compound key: using one part of the key to identify the partition and another part for the sort order.",
								"We also discussed the interaction between partitioning and secondary indexes. A secondary index also needs to be partitioned, and there are two methods:",
								"* *Document-partitioned indexes* (local indexes), where the secondary indexes are stored in the same partition as the primary key and value. This means that only a single partition needs to be updated on write, but a read of the secondary index requires a scatter/gather across all partitions.",
								"* *Term-partitioned indexes* (global indexes), where the secondary indexes are partitioned separately, using the indexed values. An entry in the secondary index may include records from all partitions of the primary key. When a document is written, several partitions of the secondary index need to be updated; however, a read can be served from a single partition.",
								"Finally, we discussed techniques for routing queries to the appropriate partition, which range from simple partition-aware load balancing to sophisticated parallel query execution engines.",
								"By design, every partition operates mostly independently—that’s what allows a partitioned database to scale to multiple machines. However, operations that need to write to several partitions can be difficult to reason about: for example, what happens if the write to one partition succeeds, but another fails? We will address that question in the following chapters.",
							],
							summary: [
								"Discover strategies for partitioning large datasets to optimize storage and processing across machines.",
							],
							longSummary: [
								"This chapter delves into partitioning large datasets into smaller subsets to manage storage and processing limitations on single machines. It aims to distribute data and query loads evenly across multiple machines, avoiding hot spots. Key range partitioning allows efficient range queries but risks hot spots, while hash partitioning ensures even load distribution but hampers range queries. Hybrid approaches using compound keys are also viable. Secondary indexes can be document-partitioned or term-partitioned. Query routing techniques vary from simple load balancing to advanced parallel query execution. Although partitions mostly operate independently for scalability, multi-partition write operations pose challenges to be discussed later.",
							],
							imageUrl:
								"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289468/blog-cover-images/kmjyv3aauurvphnzkeku.webp",
						},
						{
							heading: [
								"##### **Footnotes**",
								"##### **References**",
							],
							children: [
								"\\[[1]()\\] David J. DeWitt and Jim N. Gray: “[Parallel Database Systems: The Future of High Performance Database Systems](http://www.cs.cmu.edu/~pavlo/courses/fall2013/static/papers/dewittgray92.pdf),” *Communications of the ACM*, volume 35, number 6, pages 85–98, June 1992. [doi:10.1145/129888.129894](http://dx.doi.org/10.1145/129888.129894)",
								"\\[[2]()\\] Lars George: “[HBase vs. BigTable Comparison](http://www.larsgeorge.com/2009/11/hbase-vs-bigtable-comparison.html),” *larsgeorge.com*, November 2009.",
								"\\[[3]()\\] “[The Apache HBase Reference Guide](https://hbase.apache.org/book/book.html),” Apache Software Foundation, *hbase.apache.org*, 2014.",
								"\\[[4]()\\] MongoDB, Inc.: “[New Hash-Based Sharding Feature in MongoDB 2.4](http://blog.mongodb.org/post/47633823714/new-hash-based-sharding-feature-in-mongodb-24),” *blog.mongodb.org*, April 10, 2013.",
								"\\[[5]()\\] Ikai Lan: “[App Engine Datastore Tip: Monotonically Increasing Values Are Bad](http://ikaisays.com/2011/01/25/app-engine-datastore-tip-monotonically-increasing-values-are-bad/),” *ikaisays.com*, January 25, 2011.",
								"\\[[6]()\\] Martin Kleppmann: “[Java’s hashCode Is Not Safe for Distributed Systems](http://martin.kleppmann.com/2012/06/18/java-hashcode-unsafe-for-distributed-systems.html),” *martin.kleppmann.com*, June 18, 2012.",
								"\\[[7]()\\] David Karger, Eric Lehman, Tom Leighton, et al.: “[Consistent Hashing and Random Trees: Distributed Caching Protocols for Relieving Hot Spots on the World Wide Web](http://www.akamai.com/dl/technical_publications/ConsistenHashingandRandomTreesDistributedCachingprotocolsforrelievingHotSpotsontheworldwideweb.pdf),” at *29th Annual ACM Symposium on Theory of Computing* (STOC), pages 654–663, 1997. [doi:10.1145/258533.258660](http://dx.doi.org/10.1145/258533.258660)",
								"\\[[8]()\\] John Lamping and Eric Veach: “[A Fast, Minimal Memory, Consistent Hash Algorithm](http://arxiv.org/pdf/1406.2294v1.pdf),” *arxiv.org*, June 2014.",
								"\\[[9]()\\] Eric Redmond: “[A Little Riak Book](http://littleriakbook.com/),” Version 1.4.0, Basho Technologies, September 2013.",
								"\\[[10]()\\] “[Couchbase 2.5 Administrator Guide](http://docs.couchbase.com/couchbase-manual-2.5/cb-admin/),” Couchbase, Inc., 2014.",
								"\\[[11]()\\] Avinash Lakshman and Prashant Malik: “[Cassandra – A Decentralized Structured Storage System](http://www.cs.cornell.edu/Projects/ladis2009/papers/Lakshman-ladis2009.PDF),” at *3rd ACM SIGOPS International Workshop on Large Scale Distributed Systems and Middleware* (LADIS), October 2009.",
								"\\[[12]()\\] Jonathan Ellis: “[Facebook’s Cassandra Paper, Annotated and Compared to Apache Cassandra 2.0](http://www.datastax.com/documentation/articles/cassandra/cassandrathenandnow.html),” *datastax.com*, September 12, 2013.",
								"\\[[13]()\\] “[Introduction to Cassandra Query Language](http://www.datastax.com/documentation/cql/3.1/cql/cql_intro_c.html),” DataStax, Inc., 2014.",
								"\\[[14]()\\] Samuel Axon: “[3% of Twitter’s Servers Dedicated to Justin Bieber](http://mashable.com/2010/09/07/justin-bieber-twitter/),” *mashable.com*, September 7, 2010.",
								"\\[[15]()\\] “[Riak 1.4.8 Docs](http://docs.basho.com/riak/1.4.8/),” Basho Technologies, Inc., 2014.",
								"\\[[16]()\\] Richard Low: “[The Sweet Spot for Cassandra Secondary Indexing](http://www.wentnet.com/blog/?p=77),” *wentnet.com*, October 21, 2013.",
								"\\[[17]()\\] Zachary Tong: “[Customizing Your Document Routing](http://www.elasticsearch.org/blog/customizing-your-document-routing/),” *elasticsearch.org*, June 3, 2013.",
								"\\[[18]()\\] “[Apache Solr Reference Guide](https://cwiki.apache.org/confluence/display/solr/Apache+Solr+Reference+Guide),” Apache Software Foundation, 2014.",
								"\\[[19]()\\] Andrew Pavlo: “[H-Store Frequently Asked Questions](http://hstore.cs.brown.edu/documentation/faq/),” *hstore.cs.brown.edu*, October 2013.",
								"\\[[20]()\\] “[Amazon DynamoDB Developer Guide](http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/),” Amazon Web Services, Inc., 2014.",
								"\\[[21]()\\] Rusty Klophaus: “[Difference Between 2I and Search](http://lists.basho.com/pipermail/riak-users_lists.basho.com/2011-October/006220.html),” email to *riak-users* mailing list, *lists.basho.com*, October 25, 2011.",
								"\\[[22]()\\] Donald K. Burleson: “[Object Partitioning in Oracle](http://www.dba-oracle.com/art_partit.htm),” *dba-oracle.com*, November 8, 2000.",
								"\\[[23]()\\] Eric Evans: “[Rethinking Topology in Cassandra](http://www.slideshare.net/jericevans/virtual-nodes-rethinking-topology-in-cassandra),” at *ApacheCon Europe*, November 2012.",
								"\\[[24]()\\] Rafał Kuć: “[Reroute API Explained](http://elasticsearchserverbook.com/reroute-api-explained/),” *elasticsearchserverbook.com*, September 30, 2013.",
								"\\[[25]()\\] “[Project Voldemort Documentation](http://www.project-voldemort.com/voldemort/),” *project-voldemort.com*.",
								"\\[[26]()\\] Enis Soztutar: “[Apache HBase Region Splitting and Merging](http://hortonworks.com/blog/apache-hbase-region-splitting-and-merging/),” *hortonworks.com*, February 1, 2013.",
								"\\[[27]()\\] Brandon Williams: “[Virtual Nodes in Cassandra 1.2](http://www.datastax.com/dev/blog/virtual-nodes-in-cassandra-1-2),” *datastax.com*, December 4, 2012.",
								"\\[[28]()\\] Richard Jones: “[libketama: Consistent Hashing Library for Memcached Clients](https://www.metabrew.com/article/libketama-consistent-hashing-algo-memcached-clients),” *metabrew.com*, April 10, 2007.",
								"\\[[29]()\\] Branimir Lambov: “[New Token Allocation Algorithm in Cassandra 3.0](http://www.datastax.com/dev/blog/token-allocation-algorithm),” *datastax.com*, January 28, 2016.",
								"\\[[30]()\\] Jason Wilder: “[Open-Source Service Discovery](http://jasonwilder.com/blog/2014/02/04/service-discovery-in-the-cloud/),” *jasonwilder.com*, February 2014.",
								"\\[[31]()\\] Kishore Gopalakrishna, Shi Lu, Zhen Zhang, et al.: “[Untangling Cluster Management with Helix](http://www.socc2012.org/helix_onecol.pdf?attredirects=0),” at *ACM Symposium on Cloud Computing* (SoCC), October 2012. [doi:10.1145/2391229.2391248](http://dx.doi.org/10.1145/2391229.2391248)",
								"\\[[32]()\\] “[Moxi 1.8 Manual](http://docs.couchbase.com/moxi-manual-1.8/),” Couchbase, Inc., 2014.",
								"\\[[33]()\\] Shivnath Babu and Herodotos Herodotou: “[Massively Parallel Databases and MapReduce Systems](http://research.microsoft.com/pubs/206464/db-mr-survey-final.pdf),” *Foundations and Trends in Databases*, volume 5, number 1, pages 1–104, November 2013. [doi:10.1561/1900000036](http://dx.doi.org/10.1561/1900000036)",
							],
							summary: [
								"Explore a comprehensive guide to distributed databases, featuring insights from top experts and organizations.",
							],
							longSummary: [
								"This bibliography compiles references on distributed database systems and data partitioning, addressing parallel database systems, NoSQL databases like HBase, MongoDB, Cassandra, and others, as well as consistent hashing, sharding, secondary indexing, document routing, topology management, and service discovery. It includes academic papers, technical documentation, blog posts, and presentations by notable authors such as David DeWitt, Jim Gray, and Martin Kleppmann, and organizations like Apache, MongoDB, DataStax, Basho, and AWS, covering works from 1992 to 2016.",
							],
							imageUrl:
								"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289466/blog-cover-images/rwqbjhbdt8jg46prqo2k.webp",
						},
					],
				],
				summary: [
					"Partitioning data enhances scalability by distributing load across nodes, but challenges remain.",
				],
				longSummary: [
					"In 'Management and the Computer of the Future,' Grace Murray Hopper urged a shift from sequential computing to defining data relationships. Chapter 5 highlights the importance of partitioning (or sharding) for scalability in large datasets, distributing data across nodes to manage high query loads. Partitioning divides data into independent databases, facilitating efficient scaling, though complex queries across partitions can be difficult. Key range partitioning supports efficient range queries but risks hot spots, while hash partitioning balances load but complicates range queries. Hybrid strategies and secondary indexing help address these issues, with rebalancing and service discovery ensuring optimal performance.",
				],
				imageUrl:
					"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289449/blog-cover-images/kzq9qniafrfalkprptip.webp",
			},
			{
				heading: ["# **Chapter 7. Transactions**"],
				children: [
					"> *Some authors have claimed that general two-phase commit is too expensive to support, because of the performance or availability problems that it brings. We believe it is better to have application programmers deal with performance problems due to overuse of transactions as bottlenecks arise, rather than always coding around the lack of transactions.*",
					"> James Corbett et al., *Spanner: Google’s Globally-Distributed Database* (2012)",
					"![](blob:https://johnfactotum.github.io/db35ee5a-a40d-4402-8fa1-3462646515e3)",
					"In the harsh reality of data systems, many things can go wrong:",
					"* The database software or hardware may fail at any time (including in the middle of a write operation).",
					"* The application may crash at any time (including halfway through a series of operations).",
					"* Interruptions in the network can unexpectedly cut off the application from the database, or one database node from another.",
					"* Several clients may write to the database at the same time, overwriting each other’s changes.",
					"* A client may read data that doesn’t make sense because it has only partially been updated.",
					"* Race conditions between clients can cause surprising bugs.",
					"In order to be reliable, a system has to deal with these faults and ensure that they don’t cause catastrophic failure of the entire system. However, implementing fault-tolerance mechanisms is a lot of work. It requires a lot of careful thinking about all the things that can go wrong, and a lot of testing to ensure that the solution actually works.",
					"For decades, *transactions* have been the mechanism of choice for simplifying these issues. A transaction is a way for an application to group several reads and writes together into a logical unit. Conceptually, all the reads and writes in a transaction are executed as one operation: either the entire transaction succeeds (*commit*) or it fails (*abort*, *rollback*). If it fails, the application can safely retry. With transactions, error handling becomes much simpler for an application, because it doesn’t need to worry about partial failure—i.e., the case where some operations succeed and some fail (for whatever reason).",
					"If you have spent years working with transactions, they may seem obvious, but we shouldn’t take them for granted. Transactions are not a law of nature; they were created with a purpose, namely to *simplify the programming model* for applications accessing a database. By using transactions, the application is free to ignore certain potential error scenarios and concurrency issues, because the database takes care of them instead (we call these *safety guarantees*).",
					"Not every application needs transactions, and sometimes there are advantages to weakening transactional guarantees or abandoning them entirely (for example, to achieve higher performance or higher availability). Some safety properties can be achieved without transactions.",
					"How do you figure out whether you need transactions? In order to answer that question, we first need to understand exactly what safety guarantees transactions can provide, and what costs are associated with them. Although transactions seem straightforward at first glance, there are actually many subtle but important details that come into play.",
					"In this chapter, we will examine many examples of things that can go wrong, and explore the algorithms that databases use to guard against those issues. We will go especially deep in the area of concurrency control, discussing various kinds of race conditions that can occur and how databases implement isolation levels such as *read committed*, *snapshot isolation*, and *serializability*.",
					"This chapter applies to both single-node and distributed databases; in [Chapter 8]() we will focus the discussion on the particular challenges that arise only in distributed systems.",
					[
						{
							heading: [
								"# **The Slippery Concept of a Transaction**",
							],
							children: [
								"Almost all relational databases today, and some nonrelational databases, support transactions. Most of them follow the style that was introduced in 1975 by IBM System R, the first SQL database \\[[1](), [2](), [3]()\\]. Although some implementation details have changed, the general idea has remained virtually the same for 40 years: the transaction support in MySQL, PostgreSQL, Oracle, SQL Server, etc., is uncannily similar to that of System R.",
								"In the late 2000s, nonrelational (NoSQL) databases started gaining popularity. They aimed to improve upon the relational status quo by offering a choice of new data models (see [Chapter 2]()), and by including replication ([Chapter 5]()) and partitioning ([Chapter 6]()) by default. Transactions were the main casualty of this movement: many of this new generation of databases abandoned transactions entirely, or redefined the word to describe a much weaker set of guarantees than had previously been understood \\[[4]()\\].",
								"With the hype around this new crop of distributed databases, there emerged a popular belief that transactions were the antithesis of scalability, and that any large-scale system would have to abandon transactions in order to maintain good performance and high availability \\[[5](), [6]()\\]. On the other hand, transactional guarantees are sometimes presented by database vendors as an essential requirement for “serious applications” with “valuable data.” Both viewpoints are pure hyperbole.",
								"The truth is not that simple: like every other technical design choice, transactions have advantages and limitations. In order to understand those trade-offs, let’s go into the details of the guarantees that transactions can provide—both in normal operation and in various extreme (but realistic) circumstances.",
								[
									{
										heading: ["## **The Meaning of ACID**"],
										children: [
											"The safety guarantees provided by transactions are often described by the well-known acronym *ACID*, which stands for *Atomicity*, *Consistency*, *Isolation*, and *Durability*. It was coined in 1983 by Theo Härder and Andreas Reuter \\[[7]()\\] in an effort to establish precise terminology for fault-tolerance mechanisms in databases.",
											"However, in practice, one database’s implementation of ACID does not equal another’s implementation. For example, as we shall see, there is a lot of ambiguity around the meaning of *isolation* \\[[8]()\\]. The high-level idea is sound, but the devil is in the details. Today, when a system claims to be “ACID compliant,” it’s unclear what guarantees you can actually expect. ACID has unfortunately become mostly a marketing term.",
											"(Systems that do not meet the ACID criteria are sometimes called *BASE*, which stands for *Basically Available*, *Soft state*, and *Eventual consistency* \\[[9]()\\]. This is even more vague than the definition of ACID. It seems that the only sensible definition of BASE is “not ACID”; i.e., it can mean almost anything you want.)",
											"Let’s dig into the definitions of atomicity, consistency, isolation, and durability, as this will let us refine our idea of transactions.",
											[
												{
													heading: [
														"### **Atomicity**",
													],
													children: [
														"In general, *atomic* refers to something that cannot be broken down into smaller parts. The word means similar but subtly different things in different branches of computing. For example, in multi-threaded programming, if one thread executes an atomic operation, that means there is no way that another thread could see the half-finished result of the operation. The system can only be in the state it was before the operation or after the operation, not something in between.",
														"By contrast, in the context of ACID, atomicity is *not* about concurrency. It does not describe what happens if several processes try to access the same data at the same time, because that is covered under the letter *I*, for *isolation* (see [“Isolation”](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#sec_transactions_acid_isolation)).",
														"Rather, ACID atomicity describes what happens if a client wants to make several writes, but a fault occurs after some of the writes have been processed—for example, a process crashes, a network connection is interrupted, a disk becomes full, or some integrity constraint is violated. If the writes are grouped together into an atomic transaction, and the transaction cannot be completed (*committed*) due to a fault, then the transaction is *aborted* and the database must discard or undo any writes it has made so far in that transaction.",
														"Without atomicity, if an error occurs partway through making multiple changes, it’s difficult to know which changes have taken effect and which haven’t. The application could try again, but that risks making the same change twice, leading to duplicate or incorrect data. Atomicity simplifies this problem: if a transaction was aborted, the application can be sure that it didn’t change anything, so it can safely be retried.",
														"The ability to abort a transaction on error and have all writes from that transaction discarded is the defining feature of ACID atomicity. Perhaps *abortability* would have been a better term than *atomicity*, but we will stick with *atomicity* since that’s the usual word.",
													],
													summary: [
														"Atomicity ensures complete transactions or none, preventing partial changes and data errors.",
													],
													longSummary: [
														"In computing, 'atomic' refers to something indivisible, with nuances across different contexts. In multi-threaded programming, atomic operations ensure that other threads do not see incomplete results. In the context of ACID, atomicity is not about concurrency but about handling faults during multiple writes. If a fault occurs after some writes in an atomic transaction, the transaction is aborted, and the database discards any partial writes, preventing errors and ensuring data integrity. This ability to abort and discard incomplete transactions is the essence of ACID atomicity, though 'abortability' might be a more fitting term.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289663/blog-cover-images/qaixqme1kmlcuqp2mhtq.webp",
												},
												{
													heading: [
														"### **Consistency**",
													],
													children: [
														"The word *consistency* is terribly overloaded:",
														"* In [Chapter 5]() we discussed *replica consistency* and the issue of *eventual consistency* that arises in asynchronously replicated systems (see [“Problems with Replication Lag”]()).",
														"* *Consistent hashing* is an approach to partitioning that some systems use for rebalancing (see [“Consistent Hashing”]()).",
														"* In the CAP theorem (see [Chapter 9]()), the word *consistency* is used to mean *linearizability* (see [“Linearizability”]()).",
														"* In the context of ACID, *consistency* refers to an application-specific notion of the database being in a “good state.”",
														"It’s unfortunate that the same word is used with at least four different meanings.",
														"The idea of ACID consistency is that you have certain statements about your data (*invariants*) that must always be true—for example, in an accounting system, credits and debits across all accounts must always be balanced. If a transaction starts with a database that is valid according to these invariants, and any writes during the transaction preserve the validity, then you can be sure that the invariants are always satisfied.",
														"However, this idea of consistency depends on the application’s notion of invariants, and it’s the application’s responsibility to define its transactions correctly so that they preserve consistency. This is not something that the database can guarantee: if you write bad data that violates your invariants, the database can’t stop you. (Some specific kinds of invariants can be checked by the database, for example using foreign key constraints or uniqueness constraints. However, in general, the application defines what data is valid or invalid—the database only stores it.)",
														"Atomicity, isolation, and durability are properties of the database, whereas consistency (in the ACID sense) is a property of the application. The application may rely on the database’s atomicity and isolation properties in order to achieve consistency, but it’s not up to the database alone. Thus, the letter C doesn’t really belong in ACID.[i]()",
													],
													summary: [
														"Consistency in ACID is application-defined, unlike atomicity, isolation, and durability.",
													],
													longSummary: [
														"The term *consistency* is overloaded with multiple meanings: replica and eventual consistency in asynchronous systems, consistent hashing for partitioning, linearizability in the CAP theorem, and ACID consistency related to a database's \"good state.\" In ACID, consistency means maintaining application-defined invariants, which the application—not the database—must ensure through transactions. While databases can enforce certain invariants like foreign key constraints, the application determines valid data. Atomicity, isolation, and durability are database properties, but consistency is an application property, suggesting the letter C doesn't truly belong in ACID.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289663/blog-cover-images/asaqlbpoqmn80xylxvqc.webp",
												},
												{
													heading: [
														"### **Isolation**",
													],
													children: [
														"Most databases are accessed by several clients at the same time. That is no problem if they are reading and writing different parts of the database, but if they are accessing the same database records, you can run into concurrency problems (race conditions).",
														"[Figure 7-1](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#fig_transactions_increment) is a simple example of this kind of problem. Say you have two clients simultaneously incrementing a counter that is stored in a database. Each client needs to read the current value, add 1, and write the new value back (assuming there is no increment operation built into the database). In [Figure 7-1](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#fig_transactions_increment) the counter should have increased from 42 to 44, because two increments happened, but it actually only went to 43 because of the race condition.",
														"*Isolation* in the sense of ACID means that concurrently executing transactions are isolated from each other: they cannot step on each other’s toes. The classic database textbooks formalize isolation as *serializability*, which means that each transaction can pretend that it is the only transaction running on the entire database. The database ensures that when the transactions have committed, the result is the same as if they had run *serially* (one after another), even though in reality they may have run concurrently \\[[10]()\\].",
														"![ddia 0701](blob:https://johnfactotum.github.io/61104c8c-41e6-491d-bc2c-358a31422d67)",
														"###### *Figure 7-1. A race condition between two clients concurrently incrementing a counter.*",
														"However, in practice, serializable isolation is rarely used, because it carries a performance penalty. Some popular databases, such as Oracle 11g, don’t even implement it. In Oracle there is an isolation level called “serializable,” but it actually implements something called *snapshot isolation*, which is a weaker guarantee than serializability \\[[8](), [11]()\\]. We will explore snapshot isolation and other forms of isolation in [“Weak Isolation Levels”](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#sec_transactions_isolation_levels).",
													],
													summary: [
														"Concurrency issues arise in databases; snapshot isolation offers a practical solution over serializability.",
													],
													longSummary: [
														"Databases often face concurrency issues when multiple clients access the same records simultaneously, such as a race condition where two clients increment a counter, resulting in an increase of only 1 instead of 2. ACID isolation ensures transactions are isolated, with serializability making them behave as if executed serially, despite running concurrently. However, due to performance penalties, serializable isolation is rarely used. Instead, databases like Oracle 11g employ snapshot isolation, offering weaker guarantees than serializability but improving performance. Figure 7-1 illustrates a race condition where concurrent increments only raise a counter from 42 to 43 instead of 44.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289669/blog-cover-images/q5rpd7kszgsut7oznjbz.webp",
												},
												{
													heading: [
														"### **Durability**",
													],
													children: [
														"The purpose of a database system is to provide a safe place where data can be stored without fear of losing it. *Durability* is the promise that once a transaction has committed successfully, any data it has written will not be forgotten, even if there is a hardware fault or the database crashes.",
														"In a single-node database, durability typically means that the data has been written to nonvolatile storage such as a hard drive or SSD. It usually also involves a write-ahead log or similar (see [“Making B-trees reliable”]()), which allows recovery in the event that the data structures on disk are corrupted. In a replicated database, durability may mean that the data has been successfully copied to some number of nodes. In order to provide a durability guarantee, a database must wait until these writes or replications are complete before reporting a transaction as successfully committed.",
														"As discussed in [“Reliability”](), perfect durability does not exist: if all your hard disks and all your backups are destroyed at the same time, there’s obviously nothing your database can do to save you.",
														[
															{
																heading: [
																	"##### **Replication and Durability**",
																],
																children: [
																	"Historically, durability meant writing to an archive tape. Then it was understood as writing to a disk or SSD. More recently, it has been adapted to mean replication. Which implementation is better?",
																	"The truth is, nothing is perfect:",
																	"* If you write to disk and the machine dies, even though your data isn’t lost, it is inaccessible until you either fix the machine or transfer the disk to another machine. Replicated systems can remain available.",
																	"* A correlated fault—a power outage or a bug that crashes every node on a particular input—can knock out all replicas at once (see [“Reliability”]()), losing any data that is only in memory. Writing to disk is therefore still relevant for in-memory databases.",
																	"* In an asynchronously replicated system, recent writes may be lost when the leader becomes unavailable (see [“Handling Node Outages”]()).",
																	"* When the power is suddenly cut, SSDs in particular have been shown to sometimes violate the guarantees they are supposed to provide: even `fsync` isn’t guaranteed to work correctly \\[[12]()\\]. Disk firmware can have bugs, just like any other kind of software \\[[13](), [14]()\\].",
																	"* Subtle interactions between the storage engine and the filesystem implementation can lead to bugs that are hard to track down, and may cause files on disk to be corrupted after a crash \\[[15](), [16]()\\].",
																	"* Data on disk can gradually become corrupted without this being detected \\[[17]()\\]. If data has been corrupted for some time, replicas and recent backups may also be corrupted. In this case, you will need to try to restore the data from a historical backup.",
																	"* One study of SSDs found that between 30% and 80% of drives develop at least one bad block during the first four years of operation \\[[18]()\\]. Magnetic hard drives have a lower rate of bad sectors, but a higher rate of complete failure than SSDs.",
																	"* If an SSD is disconnected from power, it can start losing data within a few weeks, depending on the temperature \\[[19]()\\].",
																	"In practice, there is no one technique that can provide absolute guarantees. There are only various risk-reduction techniques, including writing to disk, replicating to remote machines, and backups—and they can and should be used together. As always, it’s wise to take any theoretical “guarantees” with a healthy grain of salt.",
																],
																summary: [
																	"No storage method is foolproof; combine strategies to mitigate inevitable data loss risks.",
																],
																longSummary: [
																	'Durability has progressed from writing to archive tape, to disk/SSD, to replication, yet no method is flawless. Replicated systems can stay available despite machine failures, but correlated faults may disable all replicas at once. Asynchronous replication risks losing recent writes if leaders fail. SSDs and disks face vulnerabilities like power cuts, firmware bugs, and potential data corruption. Studies indicate 30-80% of SSDs develop bad blocks within four years, and disconnected SSDs can lose data within weeks based on temperature. Absolute guarantees are elusive; instead, combine risk-reduction methods like disk writing, remote replication, and backups, and approach theoretical "guarantees" skeptically.',
																],
																imageUrl:
																	"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289719/blog-cover-images/mkjeps6v74jhj3ub3wbg.webp",
															},
														],
													],
													summary: [
														"Database durability promises data safety, but no method offers absolute guarantees against loss.",
													],
													longSummary: [
														"A database system securely stores data, ensuring durability so that once a transaction is committed, the data remains intact despite failures. In single-node databases, this involves writing to nonvolatile storage like hard drives or SSDs, often using a write-ahead log. Replicated databases require data replication across nodes. Perfect durability is impossible; simultaneous destruction of all storage and backups leads to data loss. Despite advancements, risks like asynchronous replication data loss, SSD vulnerabilities, and data corruption persist. Combining methods like disk writing, remote replication, and backups is crucial, with theoretical guarantees approached skeptically.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289665/blog-cover-images/jhez0oc5gjl7ctjikiqc.webp",
												},
											],
										],
										summary: [
											"Unravel the myths of ACID and BASE in database transactions and their true guarantees.",
										],
										longSummary: [
											"The ACID model, coined in 1983, outlines database transaction safety through Atomicity, Consistency, Isolation, and Durability. However, its practical implementation varies, often serving as a marketing term rather than a guarantee. Atomicity ensures transactions are all-or-nothing, preventing partial writes during faults. Consistency, an application responsibility, maintains data invariants, while Isolation prevents concurrency issues, though serializable isolation is rarely used due to performance costs. Durability promises data persistence post-transaction, despite hardware failures, but no method offers absolute guarantees. Instead, risk-reduction strategies like disk writing, replication, and backups are essential, with theoretical assurances viewed skeptically.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289621/blog-cover-images/rmwvzcqh49kzzy4qdrid.webp",
									},
								],
							],
							summary: [
								"ACID vs. BASE: Unraveling database transaction myths and understanding their true guarantees.",
							],
							longSummary: [
								"Relational databases have long supported transactions with ACID properties—Atomicity, Consistency, Isolation, and Durability—since IBM System R in 1975. However, NoSQL databases emerged in the late 2000s, often sacrificing transaction guarantees for scalability. While transactions are crucial for data integrity, their implementation varies, and ACID compliance has become a marketing term. Atomicity ensures transactions are all-or-nothing, while consistency is application-defined. Isolation prevents concurrency issues, though serializable isolation is rare due to performance costs. Durability promises data persistence despite failures, but no system offers perfect durability. Instead, risk-reduction strategies like replication and backups are essential.",
							],
							imageUrl:
								"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289593/blog-cover-images/wjoa5t0kngt4562w6wbx.webp",
						},
						{
							heading: [
								"## **Single-Object and Multi-Object Operations**",
							],
							children: [
								"To recap, in ACID, atomicity and isolation describe what the database should do if a client makes several writes within the same transaction:",
								"Atomicity",
								"If an error occurs halfway through a sequence of writes, the transaction should be aborted, and the writes made up to that point should be discarded. In other words, the database saves you from having to worry about partial failure, by giving an all-or-nothing guarantee.",
								"Isolation",
								"Concurrently running transactions shouldn’t interfere with each other. For example, if one transaction makes several writes, then another transaction should see either all or none of those writes, but not some subset.",
								"These definitions assume that you want to modify several objects (rows, documents, records) at once. Such *multi-object transactions* are often needed if several pieces of data need to be kept in sync. [Figure 7-2](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#fig_transactions_read_uncommitted) shows an example from an email application. To display the number of unread messages for a user, you could query something like:",
								"```\nSELECT COUNT(*) FROM emails WHERE recipient_id = 2 AND unread_flag = true\n```",
								"However, you might find this query to be too slow if there are many emails, and decide to store the number of unread messages in a separate field (a kind of denormalization). Now, whenever a new message comes in, you have to increment the unread counter as well, and whenever a message is marked as read, you also have to decrement the unread counter.",
								"In [Figure 7-2](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#fig_transactions_read_uncommitted), user 2 experiences an anomaly: the mailbox listing shows an unread message, but the counter shows zero unread messages because the counter increment has not yet happened.[ii]() Isolation would have prevented this issue by ensuring that user 2 sees either both the inserted email and the updated counter, or neither, but not an inconsistent halfway point.",
								"![ddia 0702](blob:https://johnfactotum.github.io/c3a9501d-7306-4258-85b8-cb2f58b51efd)",
								"###### *Figure 7-2. Violating isolation: one transaction reads another transaction’s uncommitted writes (a “dirty read”).*",
								"[Figure 7-3](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#fig_transactions_atomicity) illustrates the need for atomicity: if an error occurs somewhere over the course of the transaction, the contents of the mailbox and the unread counter might become out of sync. In an atomic transaction, if the update to the counter fails, the transaction is aborted and the inserted email is rolled back.",
								"![ddia 0703](blob:https://johnfactotum.github.io/9f611b06-7112-4c24-9548-cc145f6d11ad)",
								"###### *Figure 7-3. Atomicity ensures that if an error occurs any prior writes from that transaction are undone, to avoid an inconsistent state.*",
								"Multi-object transactions require some way of determining which read and write operations belong to the same transaction. In relational databases, that is typically done based on the client’s TCP connection to the database server: on any particular connection, everything between a `BEGIN TRANSACTION` and a `COMMIT` statement is considered to be part of the same transaction.[iii]()",
								"On the other hand, many nonrelational databases don’t have such a way of grouping operations together. Even if there is a multi-object API (for example, a key-value store may have a *multi-put* operation that updates several keys in one operation), that doesn’t necessarily mean it has transaction semantics: the command may succeed for some keys and fail for others, leaving the database in a partially updated state.",
								[
									{
										heading: [
											"### **Single-object writes**",
										],
										children: [
											"Atomicity and isolation also apply when a single object is being changed. For example, imagine you are writing a 20 KB JSON document to a database:",
											"* If the network connection is interrupted after the first 10 KB have been sent, does the database store that unparseable 10 KB fragment of JSON?",
											"* If the power fails while the database is in the middle of overwriting the previous value on disk, do you end up with the old and new values spliced together?",
											"* If another client reads that document while the write is in progress, will it see a partially updated value?",
											"Those issues would be incredibly confusing, so storage engines almost universally aim to provide atomicity and isolation on the level of a single object (such as a key-value pair) on one node. Atomicity can be implemented using a log for crash recovery (see [“Making B-trees reliable”]()), and isolation can be implemented using a lock on each object (allowing only one thread to access an object at any one time).",
											"Some databases also provide more complex atomic operations,[iv]() such as an increment operation, which removes the need for a read-modify-write cycle like that in [Figure 7-1](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#fig_transactions_increment). Similarly popular is a compare-and-set operation, which allows a write to happen only if the value has not been concurrently changed by someone else (see [“Compare-and-set”](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#sec_transactions_compare_and_set)).",
											"These single-object operations are useful, as they can prevent lost updates when several clients try to write to the same object concurrently (see [“Preventing Lost Updates”](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#sec_transactions_lost_update)). However, they are not transactions in the usual sense of the word. Compare-and-set and other single-object operations have been dubbed “lightweight transactions” or even “ACID” for marketing purposes \\[[20](), [21](), [22]()\\], but that terminology is misleading. A transaction is usually understood as a mechanism for grouping multiple operations on multiple objects into one unit of execution.",
										],
										summary: [
											'Atomicity and isolation ensure data integrity, but "lightweight transactions" can be misleading.',
										],
										longSummary: [
											'Atomicity and isolation ensure that single object changes are handled safely, preventing issues like unparseable fragments, spliced values after power failures, or exposing partially updated values to other clients. Storage engines achieve this by using crash recovery logs for atomicity and object locks for isolation. Some databases offer advanced atomic operations, such as increments and compare-and-set, to prevent lost updates during concurrent writes by multiple clients. However, labeling these single-object operations as "lightweight transactions" or "ACID" is misleading, as true transactions involve grouping multiple operations on multiple objects into a single execution unit.',
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289623/blog-cover-images/nnxr3svfzkocknzc7vbq.webp",
									},
									{
										heading: [
											"### **The need for multi-object transactions**",
										],
										children: [
											"Many distributed datastores have abandoned multi-object transactions because they are difficult to implement across partitions, and they can get in the way in some scenarios where very high availability or performance is required. However, there is nothing that fundamentally prevents transactions in a distributed database, and we will discuss implementations of distributed transactions in [Chapter 9]().",
											"But do we need multi-object transactions at all? Would it be possible to implement any application with only a key-value data model and single-object operations?",
											"There are some use cases in which single-object inserts, updates, and deletes are sufficient. However, in many other cases writes to several different objects need to be coordinated:",
											"* In a relational data model, a row in one table often has a foreign key reference to a row in another table. (Similarly, in a graph-like data model, a vertex has edges to other vertices.) Multi-object transactions allow you to ensure that these references remain valid: when inserting several records that refer to one another, the foreign keys have to be correct and up to date, or the data becomes nonsensical.",
											"* In a document data model, the fields that need to be updated together are often within the same document, which is treated as a single object—no multi-object transactions are needed when updating a single document. However, document databases lacking join functionality also encourage denormalization (see [“Relational Versus Document Databases Today”]()). When denormalized information needs to be updated, like in the example of [Figure 7-2](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#fig_transactions_read_uncommitted), you need to update several documents in one go. Transactions are very useful in this situation to prevent denormalized data from going out of sync.",
											"* In databases with secondary indexes (almost everything except pure key-value stores), the indexes also need to be updated every time you change a value. These indexes are different database objects from a transaction point of view: for example, without transaction isolation, it’s possible for a record to appear in one index but not another, because the update to the second index hasn’t happened yet.",
											"Such applications can still be implemented without transactions. However, error handling becomes much more complicated without atomicity, and the lack of isolation can cause concurrency problems. We will discuss those in [“Weak Isolation Levels”](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#sec_transactions_isolation_levels), and explore alternative approaches in [Chapter 12]().",
										],
										summary: [
											"Distributed databases struggle with multi-object transactions, yet they're crucial for data consistency and integrity.",
										],
										longSummary: [
											"Many distributed datastores have moved away from multi-object transactions due to the challenges of implementing them across partitions, though they are not inherently impossible. While single-object operations suffice for some scenarios, many require coordinated writes across multiple objects, such as maintaining foreign key references, updating denormalized data, and ensuring consistent secondary indexes. Applications can operate without transactions, but this complicates error handling due to the lack of atomicity and introduces concurrency issues without isolation. Even in document databases, where a document is treated as a single object, multi-object transactions are necessary to keep denormalized data in sync.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289626/blog-cover-images/epdcvw6vohitjgj69aql.webp",
									},
									{
										heading: [
											"### **Handling errors and aborts**",
										],
										children: [
											"A key feature of a transaction is that it can be aborted and safely retried if an error occurred. ACID databases are based on this philosophy: if the database is in danger of violating its guarantee of atomicity, isolation, or durability, it would rather abandon the transaction entirely than allow it to remain half-finished.",
											"Not all systems follow that philosophy, though. In particular, datastores with leaderless replication (see [“Leaderless Replication”]()) work much more on a “best effort” basis, which could be summarized as “the database will do as much as it can, and if it runs into an error, it won’t undo something it has already done”—so it’s the application’s responsibility to recover from errors.",
											"Errors will inevitably happen, but many software developers prefer to think only about the happy path rather than the intricacies of error handling. For example, popular object-relational mapping (ORM) frameworks such as Rails’s ActiveRecord and Django don’t retry aborted transactions—the error usually results in an exception bubbling up the stack, so any user input is thrown away and the user gets an error message. This is a shame, because the whole point of aborts is to enable safe retries.",
											"Although retrying an aborted transaction is a simple and effective error handling mechanism, it isn’t perfect:",
											"* If the transaction actually succeeded, but the network failed while the server tried to acknowledge the successful commit to the client (so the client thinks it failed), then retrying the transaction causes it to be performed twice—unless you have an additional application-level deduplication mechanism in place.",
											"* If the error is due to overload, retrying the transaction will make the problem worse, not better. To avoid such feedback cycles, you can limit the number of retries, use exponential backoff, and handle overload-related errors differently from other errors (if possible).",
											"* It is only worth retrying after transient errors (for example due to deadlock, isolation violation, temporary network interruptions, and failover); after a permanent error (e.g., constraint violation) a retry would be pointless.",
											"* If the transaction also has side effects outside of the database, those side effects may happen even if the transaction is aborted. For example, if you’re sending an email, you wouldn’t want to send the email again every time you retry the transaction. If you want to make sure that several different systems either commit or abort together, two-phase commit can help (we will discuss this in [“Atomic Commit and Two-Phase Commit (2PC)”]()).",
											"* If the client process fails while retrying, any data it was trying to write to the database is lost.",
										],
										summary: [
											"Transactions can be retried after errors, but retries have limitations and potential pitfalls.",
										],
										longSummary: [
											'Transactions are designed to be aborted and safely retried upon error, a principle upheld by ACID databases to prevent incomplete transactions. However, leaderless replication datastores leave error recovery to applications, operating on a "best effort" basis. Despite the inevitability of errors, many developers focus on the happy path, with ORM frameworks like ActiveRecord and Django not retrying aborted transactions. Retrying transactions is effective but has limitations: potential duplication if acknowledgment fails, exacerbation of overload issues, irrelevance for permanent errors, possible side effects outside the database, and data loss if client processes fail during retries.',
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289626/blog-cover-images/vztcuvsq8iwx9rmd0hsd.webp",
									},
								],
							],
							summary: [
								"ACID ensures reliable multi-object transactions, preventing errors and inconsistencies in databases.",
							],
							longSummary: [
								'In ACID databases, atomicity ensures transactions are all-or-nothing, discarding partial writes if errors occur, while isolation prevents concurrent transaction interference. These principles maintain data consistency, crucial for applications like email, where multiple updates must occur together. Relational databases use transactions to group operations, but many nonrelational databases lack this capability. Single-object operations, often called "lightweight transactions," aren\'t sufficient for multi-object scenarios. ACID databases prioritize safe transaction aborting and retrying, though not all systems do, leaving error recovery to applications. Retrying can lead to duplicate execution and overload issues.',
							],
							imageUrl:
								"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289593/blog-cover-images/vswovgdt5lbvi4vujnif.webp",
						},
						{
							heading: ["# **Weak Isolation Levels**"],
							children: [
								"If two transactions don’t touch the same data, they can safely be run in parallel, because neither depends on the other. Concurrency issues (race conditions) only come into play when one transaction reads data that is concurrently modified by another transaction, or when two transactions try to simultaneously modify the same data.",
								"Concurrency bugs are hard to find by testing, because such bugs are only triggered when you get unlucky with the timing. Such timing issues might occur very rarely, and are usually difficult to reproduce. Concurrency is also very difficult to reason about, especially in a large application where you don’t necessarily know which other pieces of code are accessing the database. Application development is difficult enough if you just have one user at a time; having many concurrent users makes it much harder still, because any piece of data could unexpectedly change at any time.",
								"For that reason, databases have long tried to hide concurrency issues from application developers by providing *transaction isolation*. In theory, isolation should make your life easier by letting you pretend that no concurrency is happening: *serializable* isolation means that the database guarantees that transactions have the same effect as if they ran *serially* (i.e., one at a time, without any concurrency).",
								"In practice, isolation is unfortunately not that simple. Serializable isolation has a performance cost, and many databases don’t want to pay that price \\[[8]()\\]. It’s therefore common for systems to use weaker levels of isolation, which protect against *some* concurrency issues, but not all. Those levels of isolation are much harder to understand, and they can lead to subtle bugs, but they are nevertheless used in practice \\[[23]()\\].",
								"Concurrency bugs caused by weak transaction isolation are not just a theoretical problem. They have caused substantial loss of money \\[[24](), [25]()\\], led to investigation by financial auditors \\[[26]()\\], and caused customer data to be corrupted \\[[27]()\\]. A popular comment on revelations of such problems is “Use an ACID database if you’re handling financial data!”—but that misses the point. Even many popular relational database systems (which are usually considered “ACID”) use weak isolation, so they wouldn’t necessarily have prevented these bugs from occurring.",
								"Rather than blindly relying on tools, we need to develop a good understanding of the kinds of concurrency problems that exist, and how to prevent them. Then we can build applications that are reliable and correct, using the tools at our disposal.",
								"In this section we will look at several weak (nonserializable) isolation levels that are used in practice, and discuss in detail what kinds of race conditions can and cannot occur, so that you can decide what level is appropriate to your application. Once we’ve done that, we will discuss serializability in detail (see [“Serializability”](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#sec_transactions_serializability)). Our discussion of isolation levels will be informal, using examples. If you want rigorous definitions and analyses of their properties, you can find them in the academic literature \\[[28](), [29](), [30]()\\].",
								[
									{
										heading: ["## **Read Committed**"],
										children: [
											"The most basic level of transaction isolation is *read committed*.[v]() It makes two guarantees:",
											"1. When reading from the database, you will only see data that has been committed (no *dirty reads*).",
											"2. When writing to the database, you will only overwrite data that has been committed (no *dirty writes*).",
											"Let’s discuss these two guarantees in more detail.",
											[
												{
													heading: [
														"### **No dirty reads**",
													],
													children: [
														"Imagine a transaction has written some data to the database, but the transaction has not yet committed or aborted. Can another transaction see that uncommitted data? If yes, that is called a *dirty read* \\[[2]()\\].",
														"Transactions running at the read committed isolation level must prevent dirty reads. This means that any writes by a transaction only become visible to others when that transaction commits (and then all of its writes become visible at once). This is illustrated in [Figure 7-4](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#fig_transactions_read_committed), where user 1 has set *x* = 3, but user 2’s *get x* still returns the old value, 2, while user 1 has not yet committed.",
														"![ddia 0704](blob:https://johnfactotum.github.io/8ad39a97-978a-4a11-9962-a41b167eb067)",
														"###### *Figure 7-4. No dirty reads: user 2 sees the new value for x only after user 1’s transaction has committed.*",
														"There are a few reasons why it’s useful to prevent dirty reads:",
														"* If a transaction needs to update several objects, a dirty read means that another transaction may see some of the updates but not others. For example, in [Figure 7-2](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#fig_transactions_read_uncommitted), the user sees the new unread email but not the updated counter. This is a dirty read of the email. Seeing the database in a partially updated state is confusing to users and may cause other transactions to take incorrect decisions.",
														"* If a transaction aborts, any writes it has made need to be rolled back (like in [Figure 7-3](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#fig_transactions_atomicity)). If the database allows dirty reads, that means a transaction may see data that is later rolled back—i.e., which is never actually committed to the database. Reasoning about the consequences quickly becomes mind-bending.",
														"![ddia 0704](blob:https://johnfactotum.github.io/8ad39a97-978a-4a11-9962-a41b167eb067)",
														"###### *Figure 7-4. No dirty reads: user 2 sees the new value for x only after user 1’s transaction has committed.*",
													],
													summary: [
														"Prevent dirty reads: ensure data visibility only after transaction commits to avoid confusion.",
													],
													longSummary: [
														"In database transactions, a 'dirty read' occurs when a transaction reads uncommitted data from another transaction. To prevent this, the read committed isolation level ensures that writes become visible only after a transaction commits. This prevents confusion and incorrect decisions that could arise from partially updated states if a transaction updates multiple objects. Additionally, if a transaction aborts, any uncommitted writes must be rolled back, and allowing dirty reads could lead to transactions seeing data that is later undone, complicating reasoning about the data's integrity.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289670/blog-cover-images/xsyxmpzqditb6cqk7tmb.webp",
												},
												{
													heading: [
														"### **No dirty writes**",
													],
													children: [
														"What happens if two transactions concurrently try to update the same object in a database? We don’t know in which order the writes will happen, but we normally assume that the later write overwrites the earlier write.",
														"However, what happens if the earlier write is part of a transaction that has not yet committed, so the later write overwrites an uncommitted value? This is called a *dirty write* \\[[28]()\\]. Transactions running at the read committed isolation level must prevent dirty writes, usually by delaying the second write until the first write’s transaction has committed or aborted.",
														"By preventing dirty writes, this isolation level avoids some kinds of concurrency problems:",
														"* If transactions update multiple objects, dirty writes can lead to a bad outcome. For example, consider [Figure 7-5](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#fig_transactions_dirty_writes), which illustrates a used car sales website on which two people, Alice and Bob, are simultaneously trying to buy the same car. Buying a car requires two database writes: the listing on the website needs to be updated to reflect the buyer, and the sales invoice needs to be sent to the buyer. In the case of [Figure 7-5](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#fig_transactions_dirty_writes), the sale is awarded to Bob (because he performs the winning update to the `listings` table), but the invoice is sent to Alice (because she performs the winning update to the `invoices` table). Read committed prevents such mishaps.",
														"* However, read committed does *not* prevent the race condition between two counter increments in [Figure 7-1](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#fig_transactions_increment). In this case, the second write happens after the first transaction has committed, so it’s not a dirty write. It’s still incorrect, but for a different reason—in [“Preventing Lost Updates”](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#sec_transactions_lost_update) we will discuss how to make such counter increments safe.",
														"![ddia 0705](blob:https://johnfactotum.github.io/8009d72b-99cb-4dca-adb4-c5e77026c4c5)",
														"###### *Figure 7-5. With dirty writes, conflicting writes from different transactions can be mixed up.*",
													],
													summary: [
														"Read committed isolation prevents dirty writes but not race conditions in concurrent transactions.",
													],
													longSummary: [
														"When two transactions concurrently update the same database object, the later write typically overwrites the earlier one. A dirty write occurs when this later write overwrites an uncommitted value. Read committed isolation prevents dirty writes by delaying the second write until the first transaction completes, avoiding issues like Bob winning a car listing update while Alice receives the invoice. However, it doesn't prevent race conditions with counter increments, where the second write occurs after the first transaction has committed. Dirty writes can result in mixed-up conflicting writes from different transactions.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289668/blog-cover-images/tmofne4vfsfhaazyk7cu.webp",
												},
												{
													heading: [
														"### **Implementing read committed**",
													],
													children: [
														"Read committed is a very popular isolation level. It is the default setting in Oracle 11g, PostgreSQL, SQL Server 2012, MemSQL, and many other databases \\[[8]()\\].",
														"Most commonly, databases prevent dirty writes by using row-level locks: when a transaction wants to modify a particular object (row or document), it must first acquire a lock on that object. It must then hold that lock until the transaction is committed or aborted. Only one transaction can hold the lock for any given object; if another transaction wants to write to the same object, it must wait until the first transaction is committed or aborted before it can acquire the lock and continue. This locking is done automatically by databases in read committed mode (or stronger isolation levels).",
														"How do we prevent dirty reads? One option would be to use the same lock, and to require any transaction that wants to read an object to briefly acquire the lock and then release it again immediately after reading. This would ensure that a read couldn’t happen while an object has a dirty, uncommitted value (because during that time the lock would be held by the transaction that has made the write).",
														"However, the approach of requiring read locks does not work well in practice, because one long-running write transaction can force many read-only transactions to wait until the long-running transaction has completed. This harms the response time of read-only transactions and is bad for operability: a slowdown in one part of an application can have a knock-on effect in a completely different part of the application, due to waiting for locks.",
														"For that reason, most databases[vi]() prevent dirty reads using the approach illustrated in [Figure 7-4](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#fig_transactions_read_committed): for every object that is written, the database remembers both the old committed value and the new value set by the transaction that currently holds the write lock. While the transaction is ongoing, any other transactions that read the object are simply given the old value. Only when the new value is committed do transactions switch over to reading the new value.",
													],
													summary: [
														"Discover how databases use row-level locks to prevent dirty writes and reads efficiently.",
													],
													longSummary: [
														"Read committed is a widely used isolation level, often set as the default in many databases. It prevents dirty writes by requiring transactions to acquire and hold row-level locks on objects until they are committed or aborted. To avoid dirty reads without impacting response time, databases typically store both the old committed value and the new uncommitted value of an object. Other transactions continue to access the old value until the new value is committed, at which point they switch to reading the updated value.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289672/blog-cover-images/upudadqutv97vj5grmp7.webp",
												},
											],
										],
										summary: [
											"Read committed isolation prevents dirty reads and writes, ensuring data consistency in transactions.",
										],
										longSummary: [
											"Read committed is a fundamental transaction isolation level that prevents dirty reads and writes by ensuring only committed data is visible. It avoids confusion from partially updated states and maintains data integrity if a transaction aborts. By delaying subsequent writes until the first transaction completes, it prevents conflicting updates. Although popular and often the default in databases, it doesn't prevent race conditions with counter increments. Databases use row-level locks and manage both old and new values to handle these transactions efficiently.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289629/blog-cover-images/lo3htu2uzr4efgmbe25e.webp",
									},
									{
										heading: [
											"## **Snapshot Isolation and Repeatable Read**",
										],
										children: [
											"If you look superficially at read committed isolation, you could be forgiven for thinking that it does everything that a transaction needs to do: it allows aborts (required for atomicity), it prevents reading the incomplete results of transactions, and it prevents concurrent writes from getting intermingled. Indeed, those are useful features, and much stronger guarantees than you can get from a system that has no transactions.",
											"However, there are still plenty of ways in which you can have concurrency bugs when using this isolation level. For example, [Figure 7-6](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#fig_transactions_item_many_preceders) illustrates a problem that can occur with read committed.",
											"![ddia 0706](blob:https://johnfactotum.github.io/b5e00c30-f2ce-45d9-87d8-fa36bd1bb2ac)",
											"###### *Figure 7-6. Read skew: Alice observes the database in an inconsistent state.*",
											"Say Alice has $1,000 of savings at a bank, split across two accounts with $500 each. Now a transaction transfers $100 from one of her accounts to the other. If she is unlucky enough to look at her list of account balances in the same moment as that transaction is being processed, she may see one account balance at a time before the incoming payment has arrived (with a balance of $500), and the other account after the outgoing transfer has been made (the new balance being $400). To Alice it now appears as though she only has a total of $900 in her accounts—it seems that $100 has vanished into thin air.",
											"This anomaly is called a *nonrepeatable read* or *read skew*: if Alice were to read the balance of account 1 again at the end of the transaction, she would see a different value ($600) than she saw in her previous query. Read skew is considered acceptable under read committed isolation: the account balances that Alice saw were indeed committed at the time when she read them.",
											"###### **Note**",
											"The term *skew* is unfortunately overloaded: we previously used it in the sense of an *unbalanced workload with hot spots* (see [“Skewed Workloads and Relieving Hot Spots”]()), whereas here it means *timing anomaly*.",
											"In Alice’s case, this is not a lasting problem, because she will most likely see consistent account balances if she reloads the online banking website a few seconds later. However, some situations cannot tolerate such temporary inconsistency:",
											"Backups",
											"Taking a backup requires making a copy of the entire database, which may take hours on a large database. During the time that the backup process is running, writes will continue to be made to the database. Thus, you could end up with some parts of the backup containing an older version of the data, and other parts containing a newer version. If you need to restore from such a backup, the inconsistencies (such as disappearing money) become permanent.",
											"Analytic queries and integrity checks",
											"Sometimes, you may want to run a query that scans over large parts of the database. Such queries are common in analytics (see [“Transaction Processing or Analytics?”]()), or may be part of a periodic integrity check that everything is in order (monitoring for data corruption). These queries are likely to return nonsensical results if they observe parts of the database at different points in time.",
											[
												{
													heading: [
														"*Snapshot isolation* \\[[28]()\\] is the most common solution to this problem. The idea is that each transaction reads from a *consistent snapshot* of the database—that is, the transaction sees all the data that was committed in the database at the start of the transaction. Even if the data is subsequently changed by another transaction, each transaction sees only the old data from that particular point in time.",
														"### **Visibility rules for observing a consistent snapshot**",
													],
													children: [
														"When a transaction reads from the database, transaction IDs are used to decide which objects it can see and which are invisible. By carefully defining visibility rules, the database can present a consistent snapshot of the database to the application. This works as follows:",
														"1. At the start of each transaction, the database makes a list of all the other transactions that are in progress (not yet committed or aborted) at that time. Any writes that those transactions have made are ignored, even if the transactions subsequently commit.",
														"2. Any writes made by aborted transactions are ignored.",
														"3. Any writes made by transactions with a later transaction ID (i.e., which started after the current transaction started) are ignored, regardless of whether those transactions have committed.",
														"4. All other writes are visible to the application’s queries.",
														"These rules apply to both creation and deletion of objects. In [Figure 7-7](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#fig_transactions_mvcc), when transaction 12 reads from account 2, it sees a balance of $500 because the deletion of the $500 balance was made by transaction 13 (according to rule 3, transaction 12 cannot see a deletion made by transaction 13), and the creation of the $400 balance is not yet visible (by the same rule).",
														"Put another way, an object is visible if both of the following conditions are true:",
														"* At the time when the reader’s transaction started, the transaction that created the object had already committed.",
														"* The object is not marked for deletion, or if it is, the transaction that requested deletion had not yet committed at the time when the reader’s transaction started.",
														"A long-running transaction may continue using a snapshot for a long time, continuing to read values that (from other transactions’ point of view) have long been overwritten or deleted. By never updating values in place but instead creating a new version every time a value is changed, the database can provide a consistent snapshot while incurring only a small overhead.",
													],
													summary: [
														"Transaction IDs ensure consistent database snapshots by applying specific visibility rules.",
													],
													longSummary: [
														"When reading from the database, transaction IDs ensure a consistent snapshot by: 1) Ignoring writes from ongoing transactions at the start; 2) Ignoring writes from aborted transactions; 3) Ignoring writes from transactions with later IDs; 4) Making all other writes visible. An object is visible if its creation transaction committed before the reader's transaction started and isn't marked for deletion, or if the deletion transaction hadn't committed by then. This method offers consistent snapshots with minimal overhead.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289681/blog-cover-images/sjpxqaoxax78xrlt1apn.webp",
												},
												{
													heading: [
														"### **Indexes and snapshot isolation**",
													],
													children: [
														"How do indexes work in a multi-version database? One option is to have the index simply point to all versions of an object and require an index query to filter out any object versions that are not visible to the current transaction. When garbage collection removes old object versions that are no longer visible to any transaction, the corresponding index entries can also be removed.",
														"In practice, many implementation details determine the performance of multi-version concurrency control. For example, PostgreSQL has optimizations for avoiding index updates if different versions of the same object can fit on the same page \\[[31]()\\].",
														"Another approach is used in CouchDB, Datomic, and LMDB. Although they also use B-trees (see [“B-Trees”]()), they use an *append-only/copy-on-write* variant that does not overwrite pages of the tree when they are updated, but instead creates a new copy of each modified page. Parent pages, up to the root of the tree, are copied and updated to point to the new versions of their child pages. Any pages that are not affected by a write do not need to be copied, and remain immutable \\[[33](), [34](), [35]()\\].",
														"With append-only B-trees, every write transaction (or batch of transactions) creates a new B-tree root, and a particular root is a consistent snapshot of the database at the point in time when it was created. There is no need to filter out objects based on transaction IDs because subsequent writes cannot modify an existing B-tree; they can only create new tree roots. However, this approach also requires a background process for compaction and garbage collection.",
													],
													summary: [
														"Discover how databases optimize with append-only B-trees and transaction visibility techniques.",
													],
													longSummary: [
														"In multi-version databases, indexes can either point to all object versions, necessitating transaction visibility filtering, or employ append-only/copy-on-write B-trees, which create new page copies instead of overwriting them. PostgreSQL optimizes by avoiding index updates when versions fit on the same page. Conversely, CouchDB, Datomic, and LMDB use the append-only method, where each write transaction generates a new B-tree root, capturing a consistent database snapshot and eliminating the need for transaction ID filtering. Both methods require background processes for garbage collection or compaction to remove obsolete versions.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289682/blog-cover-images/ih1ownfcnzttar6yhf4j.webp",
												},
												{
													heading: [
														"### **Repeatable read and naming confusion**",
													],
													children: [
														"Snapshot isolation is a useful isolation level, especially for read-only transactions. However, many databases that implement it call it by different names. In Oracle it is called *serializable*, and in PostgreSQL and MySQL it is called *repeatable read* \\[[23]()\\].",
														"The reason for this naming confusion is that the SQL standard doesn’t have the concept of snapshot isolation, because the standard is based on System R’s 1975 definition of isolation levels \\[[2]()\\] and snapshot isolation hadn’t yet been invented then. Instead, it defines repeatable read, which looks superficially similar to snapshot isolation. PostgreSQL and MySQL call their snapshot isolation level repeatable read because it meets the requirements of the standard, and so they can claim standards compliance.",
														"Unfortunately, the SQL standard’s definition of isolation levels is flawed—it is ambiguous, imprecise, and not as implementation-independent as a standard should be \\[[28]()\\]. Even though several databases implement repeatable read, there are big differences in the guarantees they actually provide, despite being ostensibly standardized \\[[23]()\\]. There has been a formal definition of repeatable read in the research literature \\[[29](), [30]()\\], but most implementations don’t satisfy that formal definition. And to top it off, IBM DB2 uses “repeatable read” to refer to serializability \\[[8]()\\].",
														"As a result, nobody really knows what repeatable read means.",
													],
													summary: [
														'Snapshot isolation\'s varied names cause confusion; what does "repeatable read" truly mean?',
													],
													longSummary: [
														"Snapshot isolation is a valuable isolation level, particularly for read-only transactions, but its implementation varies across databases. Oracle refers to it as serializable, while PostgreSQL and MySQL call it repeatable read. This inconsistency arises because the SQL standard, based on System R's 1975 definition, lacks the concept of snapshot isolation. The standard's definitions are flawed—ambiguous, imprecise, and not implementation-independent. Although many databases claim to implement repeatable read, they offer different guarantees, complicating standards compliance. IBM DB2 adds to the confusion by using repeatable read to mean serializability, leaving the true meaning of repeatable read unclear.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289683/blog-cover-images/uomq2ve2htflsjpngfhm.webp",
												},
											],
										],
										summary: [
											"Read committed isolation prevents incomplete reads but allows inconsistencies like read skew during transactions.",
										],
										longSummary: [
											"Read committed isolation prevents incomplete reads and concurrent write intermingling but allows read skew, where users might see inconsistent data during transactions. For example, Alice might see different bank account balances before and after a transfer, creating an illusion of missing funds. While acceptable under read committed isolation, such inconsistencies can affect database backups or analytic queries. Snapshot isolation offers consistent snapshots using transaction IDs, minimizing overhead even for long transactions. Multi-version databases manage object versions with methods like append-only B-trees. However, SQL standard naming confusion leads to varying guarantees across databases like Oracle, PostgreSQL, and MySQL.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289630/blog-cover-images/buqhvzc5pqklxmowwb0c.webp",
									},
									{
										heading: [
											"## **Preventing Lost Updates**",
										],
										children: [
											"The read committed and snapshot isolation levels we’ve discussed so far have been primarily about the guarantees of what a read-only transaction can see in the presence of concurrent writes. We have mostly ignored the issue of two transactions writing concurrently—we have only discussed dirty writes (see [“No dirty writes”](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#sec_transactions_dirty_write)), one particular type of write-write conflict that can occur.",
											"There are several other interesting kinds of conflicts that can occur between concurrently writing transactions. The best known of these is the *lost update* problem, illustrated in [Figure 7-1](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#fig_transactions_increment) with the example of two concurrent counter increments.",
											"The lost update problem can occur if an application reads some value from the database, modifies it, and writes back the modified value (a *read-modify-write cycle*). If two transactions do this concurrently, one of the modifications can be lost, because the second write does not include the first modification. (We sometimes say that the later write *clobbers* the earlier write.) This pattern occurs in various different scenarios:",
											"* Incrementing a counter or updating an account balance (requires reading the current value, calculating the new value, and writing back the updated value)",
											"* Making a local change to a complex value, e.g., adding an element to a list within a JSON document (requires parsing the document, making the change, and writing back the modified document)",
											"* Two users editing a wiki page at the same time, where each user saves their changes by sending the entire page contents to the server, overwriting whatever is currently in the database",
											"Because this is such a common problem, a variety of solutions have been developed.",
											[
												{
													heading: [
														"### **Atomic write operations**",
													],
													children: [
														"Many databases provide atomic update operations, which remove the need to implement read-modify-write cycles in application code. They are usually the best solution if your code can be expressed in terms of those operations. For example, the following instruction is concurrency-safe in most relational databases:",
														"```\nUPDATE counters SET value = value + 1 WHERE key = 'foo';\n```",
														"Similarly, document databases such as MongoDB provide atomic operations for making local modifications to a part of a JSON document, and Redis provides atomic operations for modifying data structures such as priority queues. Not all writes can easily be expressed in terms of atomic operations—for example, updates to a wiki page involve arbitrary text editing[viii]()—but in situations where atomic operations can be used, they are usually the best choice.",
														"Atomic operations are usually implemented by taking an exclusive lock on the object when it is read so that no other transaction can read it until the update has been applied. This technique is sometimes known as *cursor stability* \\[[36](), [37]()\\]. Another option is to simply force all atomic operations to be executed on a single thread.",
														"Unfortunately, object-relational mapping frameworks make it easy to accidentally write code that performs unsafe read-modify-write cycles instead of using atomic operations provided by the database \\[[38]()\\]. That’s not a problem if you know what you are doing, but it is potentially a source of subtle bugs that are difficult to find by testing.",
													],
													summary: [
														"Atomic updates prevent read-modify-write cycles, ensuring safe, efficient database operations.",
													],
													longSummary: [
														"Many databases offer atomic update operations, eliminating the need for read-modify-write cycles in application code and providing a reliable solution for concurrency. Relational databases, for instance, support concurrency-safe instructions like \"UPDATE counters SET value = value + 1 WHERE key = 'foo'\". Similarly, MongoDB and Redis offer atomic operations for JSON documents and data structures, respectively. Although not all writes can be atomic, such as wiki page edits, atomic operations are often implemented through exclusive locks or single-thread execution, known as cursor stability. However, object-relational mapping frameworks can inadvertently bypass these operations, leading to subtle, hard-to-detect bugs.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289672/blog-cover-images/hworliy0iiw4ulwijhui.webp",
												},
												{
													heading: [
														"### **Explicit locking**",
													],
													children: [
														"Another option for preventing lost updates, if the database’s built-in atomic operations don’t provide the necessary functionality, is for the application to explicitly lock objects that are going to be updated. Then the application can perform a read-modify-write cycle, and if any other transaction tries to concurrently read the same object, it is forced to wait until the first read-modify-write cycle has completed.",
														"For example, consider a multiplayer game in which several players can move the same figure concurrently. In this case, an atomic operation may not be sufficient, because the application also needs to ensure that a player’s move abides by the rules of the game, which involves some logic that you cannot sensibly implement as a database query. Instead, you may use a lock to prevent two players from concurrently moving the same piece, as illustrated in [Example 7-1](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#fig_transactions_select_for_update).",
														"##### *Example 7-1. Explicitly locking rows to prevent lost updates*",
														"```\nBEGIN TRANSACTION;\n\nSELECT * FROM figures\n  WHERE name = 'robot' AND game_id = 222\n  FOR UPDATE; \n```",
														"[![1](blob:https://johnfactotum.github.io/ddae0498-9fdb-431e-aa43-2a7d68f46db7)](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#callout_transactions_CO1-1)",
														"*`-- Check whether move is valid, then update the position -- of the piece that was returned by the previous SELECT.`* **`UPDATE`**`figures`**`SET`** **`position`**`= 'c4'`**`WHERE`**`id = 1234;`**`COMMIT`**`;`",
														"[![1](blob:https://johnfactotum.github.io/ddae0498-9fdb-431e-aa43-2a7d68f46db7)](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#co_transactions_CO1-1)",
														"The `FOR UPDATE` clause indicates that the database should take a lock on all rows returned by this query.",
														"This works, but to get it right, you need to carefully think about your application logic. It’s easy to forget to add a necessary lock somewhere in the code, and thus introduce a race condition.",
													],
													summary: [
														"Use explicit locks to prevent race conditions in concurrent transactions when atomic operations fail.",
													],
													longSummary: [
														"To prevent lost updates when atomic operations fall short, applications can lock objects before read-modify-write cycles, making concurrent transactions wait. In multiplayer games, for instance, atomic operations may not enforce game rules effectively, necessitating locks to prevent simultaneous moves of the same piece. Using the FOR UPDATE clause locks all rows returned by a query, ensuring data integrity. However, this method demands careful attention to application logic, as missing a necessary lock can lead to race conditions.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289674/blog-cover-images/jwhfzosfcxk6doddjruc.webp",
												},
												{
													heading: [
														"### **Automatically detecting lost updates**",
													],
													children: [
														"Atomic operations and locks are ways of preventing lost updates by forcing the read-modify-write cycles to happen sequentially. An alternative is to allow them to execute in parallel and, if the transaction manager detects a lost update, abort the transaction and force it to retry its read-modify-write cycle.",
														"An advantage of this approach is that databases can perform this check efficiently in conjunction with snapshot isolation. Indeed, PostgreSQL’s repeatable read, Oracle’s serializable, and SQL Server’s snapshot isolation levels automatically detect when a lost update has occurred and abort the offending transaction. However, MySQL/InnoDB’s repeatable read does not detect lost updates \\[[23]()\\]. Some authors \\[[28](), [30]()\\] argue that a database must prevent lost updates in order to qualify as providing snapshot isolation, so MySQL does not provide snapshot isolation under this definition.",
														"Lost update detection is a great feature, because it doesn’t require application code to use any special database features—you may forget to use a lock or an atomic operation and thus introduce a bug, but lost update detection happens automatically and is thus less error-prone.",
													],
													summary: [
														"Detecting lost updates in databases enables parallel execution, reducing errors without special features.",
													],
													longSummary: [
														"Atomic operations and locks prevent lost updates by sequencing read-modify-write cycles, but an alternative approach allows parallel execution while detecting and aborting transactions with lost updates. This method works efficiently with snapshot isolation in databases like PostgreSQL's repeatable read, Oracle's serializable, and SQL Server's snapshot isolation levels. However, MySQL/InnoDB's repeatable read doesn't detect lost updates, leading some to argue it lacks true snapshot isolation. Lost update detection is advantageous because it occurs automatically without needing special database features in application code, making it less error-prone than locks or atomic operations.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289676/blog-cover-images/sqlqpbafxnbrabcvwlvp.webp",
												},
												{
													heading: [
														"### **Compare-and-set**",
													],
													children: [
														"In databases that don’t provide transactions, you sometimes find an atomic compare-and-set operation (previously mentioned in [“Single-object writes”](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#sec_transactions_single_object)). The purpose of this operation is to avoid lost updates by allowing an update to happen only if the value has not changed since you last read it. If the current value does not match what you previously read, the update has no effect, and the read-modify-write cycle must be retried.",
														"For example, to prevent two users concurrently updating the same wiki page, you might try something like this, expecting the update to occur only if the content of the page hasn’t changed since the user started editing it:",
														"```\n-- This may or may not be safe, depending on the database implementation\nUPDATE wiki_pages SET content = 'new content'\n  WHERE id = 1234 AND content = 'old content';\n```",
														"If the content has changed and no longer matches `'old content'`, this update will have no effect, so you need to check whether the update took effect and retry if necessary. However, if the database allows the `WHERE` clause to read from an old snapshot, this statement may not prevent lost updates, because the condition may be true even though another concurrent write is occurring. Check whether your database’s compare-and-set operation is safe before relying on it.",
													],
													summary: [
														"Atomic compare-and-set operations prevent lost updates by ensuring data consistency in databases.",
													],
													longSummary: [
														"In databases without transactions, atomic compare-and-set operations help prevent lost updates by ensuring updates occur only if the value hasn't changed since it was last read. If the current value differs, the update fails and must be retried. For instance, to avoid concurrent wiki page updates, you might use a statement like \"UPDATE wiki_pages SET content = 'new content' WHERE id = 1234 AND content = 'old content'\". If the content has changed, the update won't proceed, necessitating a retry. However, ensure your database's compare-and-set operation is safe, as some may read from outdated snapshots, risking lost updates.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289679/blog-cover-images/s08fimq51km2abchkxwo.webp",
												},
												{
													heading: [
														"### **Conflict resolution and replication**",
													],
													children: [
														"In replicated databases (see [Chapter 5]()), preventing lost updates takes on another dimension: since they have copies of the data on multiple nodes, and the data can potentially be modified concurrently on different nodes, some additional steps need to be taken to prevent lost updates.",
														"Locks and compare-and-set operations assume that there is a single up-to-date copy of the data. However, databases with multi-leader or leaderless replication usually allow several writes to happen concurrently and replicate them asynchronously, so they cannot guarantee that there is a single up-to-date copy of the data. Thus, techniques based on locks or compare-and-set do not apply in this context. (We will revisit this issue in more detail in [“Linearizability”]().)",
														"Instead, as discussed in [“Detecting Concurrent Writes”](), a common approach in such replicated databases is to allow concurrent writes to create several conflicting versions of a value (also known as *siblings*), and to use application code or special data structures to resolve and merge these versions after the fact.",
														"Atomic operations can work well in a replicated context, especially if they are commutative (i.e., you can apply them in a different order on different replicas, and still get the same result). For example, incrementing a counter or adding an element to a set are commutative operations. That is the idea behind Riak 2.0 datatypes, which prevent lost updates across replicas. When a value is concurrently updated by different clients, Riak automatically merges together the updates in such a way that no updates are lost \\[[39]()\\].",
														"On the other hand, the *last write wins* (LWW) conflict resolution method is prone to lost updates, as discussed in [“Last write wins (discarding concurrent writes)”](). Unfortunately, LWW is the default in many replicated databases.",
													],
													summary: [
														"Prevent lost updates in replicated databases with commutative operations; avoid last write wins.",
													],
													longSummary: [
														"In replicated databases, preventing lost updates is challenging due to concurrent modifications on different nodes. Traditional methods like locks and compare-and-set operations are ineffective in multi-leader or leaderless systems with asynchronous replication. Instead, these databases allow concurrent writes to create conflicting versions, resolved later by application code or special data structures. Atomic operations, especially commutative ones like incrementing counters or adding to sets, are effective, as seen in Riak 2.0 datatypes that merge updates automatically. However, the last write wins (LWW) method, common in many databases, often leads to lost updates.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289682/blog-cover-images/d9xkiyikwuan8fhs4hxw.webp",
												},
											],
										],
										summary: [
											"Prevent lost updates in databases with atomic operations, locks, or conflict detection strategies.",
										],
										longSummary: [
											"Read committed and snapshot isolation levels focus on read-only transactions during concurrent writes but often miss concurrent writing issues like the lost update problem. This occurs when two transactions read, modify, and write a value simultaneously, causing one update to be lost. Common in scenarios like incrementing counters, solutions include atomic update operations and explicit locks to prevent concurrent transactions. Atomic operations, implemented with exclusive locks or single-thread execution, can be bypassed by object-relational mapping frameworks. In databases without transactions, atomic compare-and-set operations help avoid lost updates. In replicated databases, concurrent writes create conflicting versions resolved by application code or special data structures.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289629/blog-cover-images/khjuudt6exrx70fw9g0z.webp",
									},
									{
										heading: [
											"## **Write Skew and Phantoms**",
										],
										children: [
											"In the previous sections we saw *dirty writes* and *lost updates*, two kinds of race conditions that can occur when different transactions concurrently try to write to the same objects. In order to avoid data corruption, those race conditions need to be prevented—either automatically by the database, or by manual safeguards such as using locks or atomic write operations.",
											"However, that is not the end of the list of potential race conditions that can occur between concurrent writes. In this section we will see some subtler examples of conflicts.",
											"To begin, imagine this example: you are writing an application for doctors to manage their on-call shifts at a hospital. The hospital usually tries to have several doctors on call at any one time, but it absolutely must have at least one doctor on call. Doctors can give up their shifts (e.g., if they are sick themselves), provided that at least one colleague remains on call in that shift \\[[40](), [41]()\\].",
											"Now imagine that Alice and Bob are the two on-call doctors for a particular shift. Both are feeling unwell, so they both decide to request leave. Unfortunately, they happen to click the button to go off call at approximately the same time. What happens next is illustrated in [Figure 7-8](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#fig_transactions_write_skew).",
											"![ddia 0708](blob:https://johnfactotum.github.io/a63ce840-ff32-4060-9010-d663d5781846)",
											"###### *Figure 7-8. Example of write skew causing an application bug.*",
											"In each transaction, your application first checks that two or more doctors are currently on call; if yes, it assumes it’s safe for one doctor to go off call. Since the database is using snapshot isolation, both checks return `2`, so both transactions proceed to the next stage. Alice updates her own record to take herself off call, and Bob updates his own record likewise. Both transactions commit, and now no doctor is on call. Your requirement of having at least one doctor on call has been violated.",
											[
												{
													heading: [
														"### **Characterizing write skew**",
													],
													children: [
														"This anomaly is called *write skew* \\[[28]()\\]. It is neither a dirty write nor a lost update, because the two transactions are updating two different objects (Alice’s and Bob’s on-call records, respectively). It is less obvious that a conflict occurred here, but it’s definitely a race condition: if the two transactions had run one after another, the second doctor would have been prevented from going off call. The anomalous behavior was only possible because the transactions ran concurrently.",
														"You can think of write skew as a generalization of the lost update problem. Write skew can occur if two transactions read the same objects, and then update some of those objects (different transactions may update different objects). In the special case where different transactions update the same object, you get a dirty write or lost update anomaly (depending on the timing).",
														"We saw that there are various different ways of preventing lost updates. With write skew, our options are more restricted:",
														"* Atomic single-object operations don’t help, as multiple objects are involved.",
														"* The automatic detection of lost updates that you find in some implementations of snapshot isolation unfortunately doesn’t help either: write skew is not automatically detected in PostgreSQL’s repeatable read, MySQL/InnoDB’s repeatable read, Oracle’s serializable, or SQL Server’s snapshot isolation level \\[[23]()\\]. Automatically preventing write skew requires true serializable isolation (see [“Serializability”](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#sec_transactions_serializability)).",
														"* Some databases allow you to configure constraints, which are then enforced by the database (e.g., uniqueness, foreign key constraints, or restrictions on a particular value). However, in order to specify that at least one doctor must be on call, you would need a constraint that involves multiple objects. Most databases do not have built-in support for such constraints, but you may be able to implement them with triggers or materialized views, depending on the database \\[[42]()\\].",
														"* If you can’t use a serializable isolation level, the second-best option in this case is probably to explicitly lock the rows that the transaction depends on. In the doctors example, you could write something like the following:",
														"  ```\n  BEGIN TRANSACTION;\n\n  SELECT * FROM doctors\n    WHERE on_call = true\n    AND shift_id = 1234 FOR UPDATE; \n  ```",
														"  [![1](blob:https://johnfactotum.github.io/ddae0498-9fdb-431e-aa43-2a7d68f46db7)](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#callout_transactions_CO2-1)**`UPDATE`**`doctors`**`SET`**`on_call =`**`false`** **`WHERE`**`name = 'Alice'`**`AND`**`shift_id = 1234;`**`COMMIT`**`;`",
														"  [![1](blob:https://johnfactotum.github.io/ddae0498-9fdb-431e-aa43-2a7d68f46db7)](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#co_transactions_CO2-1)",
														"  As before, `FOR UPDATE` tells the database to lock all rows returned by this query.",
													],
													summary: [
														"Write skew: a complex race condition in databases, challenging to prevent without serializable isolation.",
													],
													longSummary: [
														"Write skew is a race condition anomaly where two transactions read the same objects but update different ones, unlike dirty writes or lost updates. For instance, if two doctors simultaneously go off call without seeing each other's actions, it could leave no doctors on call. This issue generalizes the lost update problem and is difficult to prevent. Atomic single-object operations are ineffective, automatic detection under snapshot isolation often fails, and multi-object constraints lack support. The best solutions are using serializable isolation or explicitly locking relevant rows with commands like SELECT FOR UPDATE to ensure all returned rows are locked.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289684/blog-cover-images/w7rumkpp7r9izlh2h0zd.webp",
												},
												{
													heading: [
														"### **More examples of write skew**",
													],
													children: [
														"Write skew may seem like an esoteric issue at first, but once you’re aware of it, you may notice more situations in which it can occur. Here are some more examples:",
														"Meeting room booking system",
														"Say you want to enforce that there cannot be two bookings for the same meeting room at the same time \\[[43]()\\]. When someone wants to make a booking, you first check for any conflicting bookings (i.e., bookings for the same room with an overlapping time range), and if none are found, you create the meeting (see [Example 7-2](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#fig_transactions_meeting_rooms)).[ix]()",
														"##### *Example 7-2. A meeting room booking system tries to avoid double-booking (not safe under snapshot isolation)*",
														"```\nBEGIN TRANSACTION;\n\n-- Check for any existing bookings that overlap with the period of noon-1pm\nSELECT COUNT(*) FROM bookings\n  WHERE room_id = 123 AND\n    end_time > '2015-01-01 12:00' AND start_time < '2015-01-01 13:00';\n\n-- If the previous query returned zero:\nINSERT INTO bookings\n  (room_id, start_time, end_time, user_id)\n  VALUES (123, '2015-01-01 12:00', '2015-01-01 13:00', 666);\n\nCOMMIT;\n```",
														"Unfortunately, snapshot isolation does not prevent another user from concurrently inserting a conflicting meeting. In order to guarantee you won’t get scheduling conflicts, you once again need serializable isolation.",
														"Multiplayer game",
														"In [Example 7-1](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#fig_transactions_select_for_update), we used a lock to prevent lost updates (that is, making sure that two players can’t move the same figure at the same time). However, the lock doesn’t prevent players from moving two different figures to the same position on the board or potentially making some other move that violates the rules of the game. Depending on the kind of rule you are enforcing, you might be able to use a unique constraint, but otherwise you’re vulnerable to write skew.",
														"Claiming a username",
														"On a website where each user has a unique username, two users may try to create accounts with the same username at the same time. You may use a transaction to check whether a name is taken and, if not, create an account with that name. However, like in the previous examples, that is not safe under snapshot isolation. Fortunately, a unique constraint is a simple solution here (the second transaction that tries to register the username will be aborted due to violating the constraint).",
														"Preventing double-spending",
														"A service that allows users to spend money or points needs to check that a user doesn’t spend more than they have. You might implement this by inserting a tentative spending item into a user’s account, listing all the items in the account, and checking that the sum is positive \\[[44]()\\]. With write skew, it could happen that two spending items are inserted concurrently that together cause the balance to go negative, but that neither transaction notices the other.",
													],
													summary: [
														"Write skew impacts real-world systems, from booking conflicts to financial overspending, requiring careful management.",
													],
													longSummary: [
														"Write skew, though seemingly esoteric, frequently appears in practical scenarios where transactions check conditions before making changes. In meeting room booking systems, snapshot isolation fails to prevent double-booking, necessitating serializable isolation. Multiplayer games use locks to avoid lost updates but can't prevent rule violations like overlapping moves. For username registration, a unique constraint ensures concurrent users don't claim the same name. In financial applications, write skew can allow concurrent transactions to exceed available funds without detection. These examples highlight the importance of addressing write skew in systems to maintain data integrity and consistency.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289687/blog-cover-images/ritj84flv6xlplw526sr.webp",
												},
												{
													heading: [
														"### **Phantoms causing write skew**",
													],
													children: [
														"All of these examples follow a similar pattern:",
														"1. A `SELECT` query checks whether some requirement is satisfied by searching for rows that match some search condition (there are at least two doctors on call, there are no existing bookings for that room at that time, the position on the board doesn’t already have another figure on it, the username isn’t already taken, there is still money in the account).",
														"2. Depending on the result of the first query, the application code decides how to continue (perhaps to go ahead with the operation, or perhaps to report an error to the user and abort).",
														"3. If the application decides to go ahead, it makes a write (`INSERT`, `UPDATE`, or `DELETE`) to the database and commits the transaction.",
														"   The effect of this write changes the precondition of the decision of step 2. In other words, if you were to repeat the `SELECT` query from step 1 after commiting the write, you would get a different result, because the write changed the set of rows matching the search condition (there is now one fewer doctor on call, the meeting room is now booked for that time, the position on the board is now taken by the figure that was moved, the username is now taken, there is now less money in the account).",
														"The steps may occur in a different order. For example, you could first make the write, then the `SELECT` query, and finally decide whether to abort or commit based on the result of the query.",
														"In the case of the doctor on call example, the row being modified in step 3 was one of the rows returned in step 1, so we could make the transaction safe and avoid write skew by locking the rows in step 1 (`SELECT FOR UPDATE`). However, the other four examples are different: they check for the *absence* of rows matching some search condition, and the write *adds* a row matching the same condition. If the query in step 1 doesn’t return any rows, `SELECT FOR UPDATE` can’t attach locks to anything.",
														"This effect, where a write in one transaction changes the result of a search query in another transaction, is called a *phantom* \\[[3]()\\]. Snapshot isolation avoids phantoms in read-only queries, but in read-write transactions like the examples we discussed, phantoms can lead to particularly tricky cases of write skew.",
													],
													summary: [
														"Phantom writes alter query results, challenging transaction consistency and causing tricky write skew issues.",
													],
													longSummary: [
														"In database operations, a common pattern involves using a SELECT query to decide whether to proceed with a write operation (INSERT, UPDATE, or DELETE). After writing, the initial query results change. SELECT FOR UPDATE can prevent write skew but fails with absent rows due to no lockable data. This issue, where a write alters another transaction's query result, is called a phantom. Snapshot isolation can prevent phantoms in read-only queries, but in read-write transactions, phantoms complicate write skew scenarios.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289692/blog-cover-images/jqyro5rhpscvebhqc49g.webp",
												},
												{
													heading: [
														"### **Materializing conflicts**",
													],
													children: [
														"If the problem of phantoms is that there is no object to which we can attach the locks, perhaps we can artificially introduce a lock object into the database?",
														"For example, in the meeting room booking case you could imagine creating a table of time slots and rooms. Each row in this table corresponds to a particular room for a particular time period (say, 15 minutes). You create rows for all possible combinations of rooms and time periods ahead of time, e.g. for the next six months.",
														"Now a transaction that wants to create a booking can lock (`SELECT FOR UPDATE`) the rows in the table that correspond to the desired room and time period. After it has acquired the locks, it can check for overlapping bookings and insert a new booking as before. Note that the additional table isn’t used to store information about the booking—it’s purely a collection of locks which is used to prevent bookings on the same room and time range from being modified concurrently.",
														"This approach is called *materializing conflicts*, because it takes a phantom and turns it into a lock conflict on a concrete set of rows that exist in the database \\[[11]()\\]. Unfortunately, it can be hard and error-prone to figure out how to materialize conflicts, and it’s ugly to let a concurrency control mechanism leak into the application data model. For those reasons, materializing conflicts should be considered a last resort if no alternative is possible. A serializable isolation level is much preferable in most cases.",
													],
													summary: [
														"Transform phantoms into lock conflicts by materializing conflicts, but it's complex and error-prone.",
													],
													longSummary: [
														'To address the issue of phantoms in databases, one can introduce a lock object by creating a table of all possible combinations, such as time slots and rooms for meeting bookings. Transactions can lock these rows using SELECT FOR UPDATE to check for overlaps and insert bookings, a method known as "materializing conflicts." This approach transforms phantoms into lock conflicts on tangible rows. However, it is complex, error-prone, and can clutter the application data model with concurrency control. Therefore, materializing conflicts should be a last resort, with serializable isolation generally being a better option.',
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289690/blog-cover-images/qfspkzh2pwasvlknrdhk.webp",
												},
											],
										],
										summary: [
											"Write skew: a subtle race condition in databases, challenging to prevent without serializable isolation.",
										],
										longSummary: [
											"Race conditions, such as dirty writes and lost updates, occur when transactions write concurrently to the same objects, requiring database mechanisms or manual safeguards. Write skew, a subtler issue, happens when transactions read the same objects but update different ones, potentially causing conflicts. For example, if two doctors request leave simultaneously, both may proceed, leaving no doctors on call. Preventing write skew is difficult, as atomic operations and snapshot isolation often fail. Serializable isolation or explicit row locking with SELECT FOR UPDATE are recommended. In booking systems or financial applications, careful transaction management is crucial to avoid issues.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289632/blog-cover-images/gou6asfdkeno9nmsg5dt.webp",
									},
								],
							],
							summary: [
								"Concurrency issues in databases can cause data corruption; understanding isolation levels is crucial.",
							],
							longSummary: [
								"Concurrency issues in databases occur when transactions interact with the same data, leading to hard-to-detect bugs. Databases use transaction isolation to manage this, with serializable isolation being the most robust but performance-intensive. Many databases default to weaker levels like read committed, which prevent dirty reads but allow anomalies like read skew. Snapshot isolation provides a consistent view for reads but doesn't prevent write skew. Developers should understand these issues, choose suitable isolation levels, and use locks or atomic operations to prevent lost updates. In replicated databases, atomic operations and conflict resolution are vital for managing concurrent writes.",
							],
							imageUrl:
								"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289595/blog-cover-images/ce71zmp89o8xl5lwohly.webp",
						},
						{
							heading: ["# **Serializability**"],
							children: [
								"In this chapter we have seen several examples of transactions that are prone to race conditions. Some race conditions are prevented by the read committed and snapshot isolation levels, but others are not. We encountered some particularly tricky examples with write skew and phantoms. It’s a sad situation:",
								"* Isolation levels are hard to understand, and inconsistently implemented in different databases (e.g., the meaning of “repeatable read” varies significantly).",
								"* If you look at your application code, it’s difficult to tell whether it is safe to run at a particular isolation level—especially in a large application, where you might not be aware of all the things that may be happening concurrently.",
								"* There are no good tools to help us detect race conditions. In principle, static analysis may help \\[[26]()\\], but research techniques have not yet found their way into practical use. Testing for concurrency issues is hard, because they are usually nondeterministic—problems only occur if you get unlucky with the timing.",
								"This is not a new problem—it has been like this since the 1970s, when weak isolation levels were first introduced \\[[2]()\\]. All along, the answer from researchers has been simple: use *serializable* isolation!",
								"Serializable isolation is usually regarded as the strongest isolation level. It guarantees that even though transactions may execute in parallel, the end result is the same as if they had executed one at a time, *serially*, without any concurrency. Thus, the database guarantees that if the transactions behave correctly when run individually, they continue to be correct when run concurrently—in other words, the database prevents *all* possible race conditions.",
								"But if serializable isolation is so much better than the mess of weak isolation levels, then why isn’t everyone using it? To answer this question, we need to look at the options for implementing serializability, and how they perform. Most databases that provide serializability today use one of three techniques, which we will explore in the rest of this chapter:",
								"* Literally executing transactions in a serial order (see [“Actual Serial Execution”](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#sec_transactions_serial))",
								"* Two-phase locking (see [“Two-Phase Locking (2PL)”](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#sec_transactions_2pl)), which for several decades was the only viable option",
								"* Optimistic concurrency control techniques such as serializable snapshot isolation (see [“Serializable Snapshot Isolation (SSI)”](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#sec_transactions_ssi))",
								"For now, we will discuss these techniques primarily in the context of single-node databases; in [Chapter 9]() we will examine how they can be generalized to transactions that involve multiple nodes in a distributed system.",
								[
									{
										heading: [
											"## **Actual Serial Execution**",
										],
										children: [
											"The simplest way of avoiding concurrency problems is to remove the concurrency entirely: to execute only one transaction at a time, in serial order, on a single thread. By doing so, we completely sidestep the problem of detecting and preventing conflicts between transactions: the resulting isolation is by definition serializable.",
											"Even though this seems like an obvious idea, database designers only fairly recently—around 2007—decided that a single-threaded loop for executing transactions was feasible \\[[45]()\\]. If multi-threaded concurrency was considered essential for getting good performance during the previous 30 years, what changed to make single-threaded execution possible?",
											"Two developments caused this rethink:",
											"* RAM became cheap enough that for many use cases is now feasible to keep the entire active dataset in memory (see [“Keeping everything in memory”]()). When all data that a transaction needs to access is in memory, transactions can execute much faster than if they have to wait for data to be loaded from disk.",
											"* Database designers realized that OLTP transactions are usually short and only make a small number of reads and writes (see [“Transaction Processing or Analytics?”]()). By contrast, long-running analytic queries are typically read-only, so they can be run on a consistent snapshot (using snapshot isolation) outside of the serial execution loop.",
											"The approach of executing transactions serially is implemented in VoltDB/H-Store, Redis, and Datomic \\[[46](), [47](), [48]()\\]. A system designed for single-threaded execution can sometimes perform better than a system that supports concurrency, because it can avoid the coordination overhead of locking. However, its throughput is limited to that of a single CPU core. In order to make the most of that single thread, transactions need to be structured differently from their traditional form.",
											[
												{
													heading: [
														"### **Encapsulating transactions in stored procedures**",
													],
													children: [
														"In the early days of databases, the intention was that a database transaction could encompass an entire flow of user activity. For example, booking an airline ticket is a multi-stage process (searching for routes, fares, and available seats; deciding on an itinerary; booking seats on each of the flights of the itinerary; entering passenger details; making payment). Database designers thought that it would be neat if that entire process was one transaction so that it could be committed atomically.",
														"Unfortunately, humans are very slow to make up their minds and respond. If a database transaction needs to wait for input from a user, the database needs to support a potentially huge number of concurrent transactions, most of them idle. Most databases cannot do that efficiently, and so almost all OLTP applications keep transactions short by avoiding interactively waiting for a user within a transaction. On the web, this means that a transaction is committed within the same HTTP request—a transaction does not span multiple requests. A new HTTP request starts a new transaction.",
														"Even though the human has been taken out of the critical path, transactions have continued to be executed in an interactive client/server style, one statement at a time. An application makes a query, reads the result, perhaps makes another query depending on the result of the first query, and so on. The queries and results are sent back and forth between the application code (running on one machine) and the database server (on another machine).",
														"In this interactive style of transaction, a lot of time is spent in network communication between the application and the database. If you were to disallow concurrency in the database and only process one transaction at a time, the throughput would be dreadful because the database would spend most of its time waiting for the application to issue the next query for the current transaction. In this kind of database, it’s necessary to process multiple transactions concurrently in order to get reasonable performance.",
														"For this reason, systems with single-threaded serial transaction processing don’t allow interactive multi-statement transactions. Instead, the application must submit the entire transaction code to the database ahead of time, as a *stored procedure*. The differences between these approaches is illustrated in [Figure 7-9](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#fig_transactions_stored_proc). Provided that all data required by a transaction is in memory, the stored procedure can execute very fast, without waiting for any network or disk I/O.",
														"![ddia 0709](blob:https://johnfactotum.github.io/4291cb46-8082-4c8d-b436-05e92a59fd41)",
														"###### *Figure 7-9. The difference between an interactive transaction and a stored procedure (using the example transaction of [Figure 7-8](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#fig_transactions_write_skew)).*",
													],
													summary: [
														"Stored procedures boost transaction speed by eliminating network delays and interactive waits.",
													],
													longSummary: [
														"In the early days of databases, transactions aimed to cover entire user activities, but human response times made this inefficient. Modern OLTP applications keep transactions short by avoiding user interaction, committing within a single HTTP request. Despite removing humans from the critical path, transactions still involve interactive exchanges between application and database server, wasting time on network communication and necessitating concurrent processing for efficiency. In contrast, single-threaded serial transaction systems require submitting the entire transaction code as a stored procedure, enabling rapid execution without network or disk I/O delays when data is in memory.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289692/blog-cover-images/fcjvos6yljphjjdqcv9y.webp",
												},
												{
													heading: [
														"### **Pros and cons of stored procedures**",
													],
													children: [
														"Stored procedures have existed for some time in relational databases, and they have been part of the SQL standard (SQL/PSM) since 1999. They have gained a somewhat bad reputation, for various reasons:",
														"* Each database vendor has its own language for stored procedures (Oracle has PL/SQL, SQL Server has T-SQL, PostgreSQL has PL/pgSQL, etc.). These languages haven’t kept up with developments in general-purpose programming languages, so they look quite ugly and archaic from today’s point of view, and they lack the ecosystem of libraries that you find with most programming languages.",
														"* Code running in a database is difficult to manage: compared to an application server, it’s harder to debug, more awkward to keep in version control and deploy, trickier to test, and difficult to integrate with a metrics collection system for monitoring.",
														"* A database is often much more performance-sensitive than an application server, because a single database instance is often shared by many application servers. A badly written stored procedure (e.g., using a lot of memory or CPU time) in a database can cause much more trouble than equivalent badly written code in an application server.",
														"However, those issues can be overcome. Modern implementations of stored procedures have abandoned PL/SQL and use existing general-purpose programming languages instead: VoltDB uses Java or Groovy, Datomic uses Java or Clojure, and Redis uses Lua.",
														"With stored procedures and in-memory data, executing all transactions on a single thread becomes feasible. As they don’t need to wait for I/O and they avoid the overhead of other concurrency control mechanisms, they can achieve quite good throughput on a single thread.",
														"VoltDB also uses stored procedures for replication: instead of copying a transaction’s writes from one node to another, it executes the same stored procedure on each replica. VoltDB therefore requires that stored procedures are *deterministic* (when run on different nodes, they must produce the same result). If a transaction needs to use the current date and time, for example, it must do so through special deterministic APIs.",
													],
													summary: [
														"Modern stored procedures overcome past issues with general-purpose languages, boosting performance and efficiency.",
													],
													longSummary: [
														"Stored procedures in relational databases have faced criticism due to vendor-specific languages that seem outdated and challenges in management, such as debugging and version control, as well as potential performance issues. However, these problems can be addressed by using modern general-purpose programming languages like Java, Groovy, Clojure, or Lua instead of PL/SQL. This approach allows for executing all transactions on a single thread with in-memory data, reducing I/O wait and concurrency control overhead for better throughput. VoltDB leverages stored procedures for replication by executing deterministic procedures on each replica to ensure consistent results across nodes.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289693/blog-cover-images/dphjchzyaa9uq8sfxewa.webp",
												},
												{
													heading: [
														"### **Partitioning**",
													],
													children: [
														"Executing all transactions serially makes concurrency control much simpler, but limits the transaction throughput of the database to the speed of a single CPU core on a single machine. Read-only transactions may execute elsewhere, using snapshot isolation, but for applications with high write throughput, the single-threaded transaction processor can become a serious bottleneck.",
														"In order to scale to multiple CPU cores, and multiple nodes, you can potentially partition your data (see [Chapter 6]()), which is supported in VoltDB. If you can find a way of partitioning your dataset so that each transaction only needs to read and write data within a single partition, then each partition can have its own transaction processing thread running independently from the others. In this case, you can give each CPU core its own partition, which allows your transaction throughput to scale linearly with the number of CPU cores \\[[47]()\\].",
														"However, for any transaction that needs to access multiple partitions, the database must coordinate the transaction across all the partitions that it touches. The stored procedure needs to be performed in lock-step across all partitions to ensure serializability across the whole system.",
														"Since cross-partition transactions have additional coordination overhead, they are vastly slower than single-partition transactions. VoltDB reports a throughput of about 1,000 cross-partition writes per second, which is orders of magnitude below its single-partition throughput and cannot be increased by adding more machines \\[[49]()\\].",
														"Whether transactions can be single-partition depends very much on the structure of the data used by the application. Simple key-value data can often be partitioned very easily, but data with multiple secondary indexes is likely to require a lot of cross-partition coordination (see [“Partitioning and Secondary Indexes”]()).",
													],
													summary: [
														"Partition data for linear scalability, but beware: cross-partition transactions drastically reduce throughput.",
													],
													longSummary: [
														"To scale transactions across multiple CPU cores and nodes, partition your data. VoltDB supports this, allowing single-partition transactions to scale linearly with CPU cores, as each partition can have its own processing thread. However, multi-partition transactions are slower due to required coordination, with cross-partition writes at about 1,000 per second, unaffected by adding machines. Single-partition throughput depends on data structure; simple key-value data partitions easily, while data with multiple secondary indexes needs more coordination.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289694/blog-cover-images/opszovy1lpabwh4stcyk.webp",
												},
												{
													heading: [
														"### **Summary of serial execution**",
													],
													children: [
														"Serial execution of transactions has become a viable way of achieving serializable isolation within certain constraints:",
														"* Every transaction must be small and fast, because it takes only one slow transaction to stall all transaction processing.",
														"* It is limited to use cases where the active dataset can fit in memory. Rarely accessed data could potentially be moved to disk, but if it needed to be accessed in a single-threaded transaction, the system would get very slow.[x]()",
														"* Write throughput must be low enough to be handled on a single CPU core, or else transactions need to be partitioned without requiring cross-partition coordination.",
														"* Cross-partition transactions are possible, but there is a hard limit to the extent to which they can be used.",
													],
													summary: [
														"Serial execution ensures isolation but demands speed, memory fit, and low write throughput.",
													],
													longSummary: [
														"Serial execution of transactions can achieve serializable isolation under specific conditions: transactions must be small and fast, as a single slow transaction can stall processing. This approach is suitable when the active dataset fits in memory, though infrequently accessed data might be stored on disk, risking slowdowns if accessed in single-threaded transactions. Write throughput should be manageable by a single CPU core, necessitating partitioning for higher throughput without cross-partition coordination. While cross-partition transactions are feasible, their use is limited.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289696/blog-cover-images/xpfwgp1gcx3z4fekvckb.webp",
												},
											],
										],
										summary: [
											"Serial transaction execution can outperform concurrent systems by avoiding locking and I/O overhead.",
										],
										longSummary: [
											"To avoid concurrency issues, execute transactions serially on a single thread for serializable isolation, a method revisited around 2007 due to cheaper RAM and OLTP transaction characteristics. Used by VoltDB/H-Store, Redis, and Datomic, this approach outperforms concurrent systems by eliminating locking overhead but is limited to one CPU core. Transactions must be pre-submitted as stored procedures, avoiding network I/O delays. While stored procedures were criticized, modern implementations in Java or Clojure address these concerns. Single-threaded execution simplifies concurrency control but limits throughput, requiring data partitioning for scalability. Cross-partition transactions are slower and limited.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289634/blog-cover-images/lzrjmfw61jw9ndfbfol4.webp",
									},
									{
										heading: [
											"## **Two-Phase Locking (2PL)**",
										],
										children: [
											"For around 30 years, there was only one widely used algorithm for serializability in databases: *two-phase locking* (2PL).[xi]()",
											[
												{
													heading: [
														"# **2PL is not 2PC**",
													],
													children: [
														"Note that while two-phase *locking* (2PL) sounds very similar to two-phase *commit* (2PC), they are completely different things. We will discuss 2PC in [Chapter 9]().",
														"We saw previously that locks are often used to prevent dirty writes (see [“No dirty writes”](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#sec_transactions_dirty_write)): if two transactions concurrently try to write to the same object, the lock ensures that the second writer must wait until the first one has finished its transaction (aborted or committed) before it may continue.",
														"Two-phase locking is similar, but makes the lock requirements much stronger. Several transactions are allowed to concurrently read the same object as long as nobody is writing to it. But as soon as anyone wants to write (modify or delete) an object, exclusive access is required:",
														"* If transaction A has read an object and transaction B wants to write to that object, B must wait until A commits or aborts before it can continue. (This ensures that B can’t change the object unexpectedly behind A’s back.)",
														"* If transaction A has written an object and transaction B wants to read that object, B must wait until A commits or aborts before it can continue. (Reading an old version of the object, like in [Figure 7-1](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#fig_transactions_increment), is not acceptable under 2PL.)",
														"In 2PL, writers don’t just block other writers; they also block readers and vice versa. Snapshot isolation has the mantra *readers never block writers, and writers never block readers* (see [“Implementing snapshot isolation”](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#sec_transactions_snapshot_impl)), which captures this key difference between snapshot isolation and two-phase locking. On the other hand, because 2PL provides serializability, it protects against all the race conditions discussed earlier, including lost updates and write skew.",
													],
													summary: [
														"Two-phase locking ensures serializability by enforcing strict read-write access, unlike snapshot isolation.",
													],
													longSummary: [
														"Two-phase locking (2PL) enforces strict access controls for serializability, unlike two-phase commit (2PC). In 2PL, multiple transactions can read an object simultaneously, but writing requires exclusive access. If transaction A reads an object and transaction B wants to write to it, B must wait for A to commit or abort. Similarly, if A writes and B wants to read, B must wait for A to finish. Unlike snapshot isolation, where readers and writers don't block each other, 2PL ensures writers block readers and vice versa, preventing race conditions like lost updates and write skew.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289699/blog-cover-images/zqvewznp1mp9zpsbbfoz.webp",
												},
												{
													heading: [
														"### **Implementation of two-phase locking**",
													],
													children: [
														"2PL is used by the serializable isolation level in MySQL (InnoDB) and SQL Server, and the repeatable read isolation level in DB2 \\[[23](), [36]()\\].",
														"The blocking of readers and writers is implemented by a having a lock on each object in the database. The lock can either be in *shared mode* or in *exclusive mode*. The lock is used as follows:",
														"* If a transaction wants to read an object, it must first acquire the lock in shared mode. Several transactions are allowed to hold the lock in shared mode simultaneously, but if another transaction already has an exclusive lock on the object, these transactions must wait.",
														"* If a transaction wants to write to an object, it must first acquire the lock in exclusive mode. No other transaction may hold the lock at the same time (either in shared or in exclusive mode), so if there is any existing lock on the object, the transaction must wait.",
														"* If a transaction first reads and then writes an object, it may upgrade its shared lock to an exclusive lock. The upgrade works the same as getting an exclusive lock directly.",
														"* After a transaction has acquired the lock, it must continue to hold the lock until the end of the transaction (commit or abort). This is where the name “two-phase” comes from: the first phase (while the transaction is executing) is when the locks are acquired, and the second phase (at the end of the transaction) is when all the locks are released.",
														"Since so many locks are in use, it can happen quite easily that transaction A is stuck waiting for transaction B to release its lock, and vice versa. This situation is called *deadlock*. The database automatically detects deadlocks between transactions and aborts one of them so that the others can make progress. The aborted transaction needs to be retried by the application.",
													],
													summary: [
														"Discover how two-phase locking ensures data integrity but risks deadlocks in databases.",
													],
													longSummary: [
														"2PL, or two-phase locking, is used by MySQL (InnoDB) and SQL Server for serializable isolation and by DB2 for repeatable read isolation. It involves locking database objects in shared or exclusive modes to manage reader and writer access. Transactions acquire shared locks for reading, allowing multiple holders, and exclusive locks for writing, preventing others from holding the lock. Locks are acquired during execution and released at the transaction's end, potentially causing deadlocks. The database detects deadlocks and aborts one transaction, requiring the application to retry it. Transactions can upgrade from shared to exclusive locks when needed.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289702/blog-cover-images/l8mpmrwcximjcibyukux.webp",
												},
												{
													heading: [
														"### **Performance of two-phase locking**",
													],
													children: [
														"The big downside of two-phase locking, and the reason why it hasn’t been used by everybody since the 1970s, is performance: transaction throughput and response times of queries are significantly worse under two-phase locking than under weak isolation.",
														"This is partly due to the overhead of acquiring and releasing all those locks, but more importantly due to reduced concurrency. By design, if two concurrent transactions try to do anything that may in any way result in a race condition, one has to wait for the other to complete.",
														"Traditional relational databases don’t limit the duration of a transaction, because they are designed for interactive applications that wait for human input. Consequently, when one transaction has to wait on another, there is no limit on how long it may have to wait. Even if you make sure that you keep all your transactions short, a queue may form if several transactions want to access the same object, so a transaction may have to wait for several others to complete before it can do anything.",
														"For this reason, databases running 2PL can have quite unstable latencies, and they can be very slow at high percentiles (see [“Describing Performance”]()) if there is contention in the workload. It may take just one slow transaction, or one transaction that accesses a lot of data and acquires many locks, to cause the rest of the system to grind to a halt. This instability is problematic when robust operation is required.",
														"Although deadlocks can happen with the lock-based read committed isolation level, they occur much more frequently under 2PL serializable isolation (depending on the access patterns of your transaction). This can be an additional performance problem: when a transaction is aborted due to deadlock and is retried, it needs to do its work all over again. If deadlocks are frequent, this can mean significant wasted effort.",
													],
													summary: [
														"Two-phase locking cripples performance: increased latency, reduced concurrency, frequent deadlocks, and unbounded waits.",
													],
													longSummary: [
														"Two-phase locking (2PL) significantly impacts performance, leading to worse transaction throughput and response times compared to weak isolation. This is due to lock overhead and reduced concurrency, as transactions must wait for others to complete to avoid race conditions. Traditional relational databases don't limit transaction duration, resulting in potentially unbounded waiting times. Even short transactions can form queues when accessing the same object, causing unstable latencies and slow performance under contention. A single slow transaction can halt the system, and deadlocks occur more frequently under 2PL serializable isolation, causing aborted and retried transactions, leading to wasted effort.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289700/blog-cover-images/zxgggf2eu8t3i0uu7ivw.webp",
												},
												{
													heading: [
														"### **Predicate locks**",
													],
													children: [
														"In the preceding description of locks, we glossed over a subtle but important detail. In [“Phantoms causing write skew”](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#sec_transactions_phantom) we discussed the problem of *phantoms*—that is, one transaction changing the results of another transaction’s search query. A database with serializable isolation must prevent phantoms.",
														"In the meeting room booking example this means that if one transaction has searched for existing bookings for a room within a certain time window (see [Example 7-2](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#fig_transactions_meeting_rooms)), another transaction is not allowed to concurrently insert or update another booking for the same room and time range. (It’s okay to concurrently insert bookings for other rooms, or for the same room at a different time that doesn’t affect the proposed booking.)",
														"How do we implement this? Conceptually, we need a *predicate lock* \\[[3]()\\]. It works similarly to the shared/exclusive lock described earlier, but rather than belonging to a particular object (e.g., one row in a table), it belongs to all objects that match some search condition, such as:",
														"```\nSELECT * FROM bookings\n  WHERE room_id = 123 AND\n    end_time   > '2018-01-01 12:00' AND\n    start_time < '2018-01-01 13:00';\n```",
														"A predicate lock restricts access as follows:",
														"* If transaction A wants to read objects matching some condition, like in that `SELECT` query, it must acquire a shared-mode predicate lock on the conditions of the query. If another transaction B currently has an exclusive lock on any object matching those conditions, A must wait until B releases its lock before it is allowed to make its query.",
														"* If transaction A wants to insert, update, or delete any object, it must first check whether either the old or the new value matches any existing predicate lock. If there is a matching predicate lock held by transaction B, then A must wait until B has committed or aborted before it can continue.",
														"The key idea here is that a predicate lock applies even to objects that do not yet exist in the database, but which might be added in the future (phantoms). If two-phase locking includes predicate locks, the database prevents all forms of write skew and other race conditions, and so its isolation becomes serializable.",
													],
													summary: [
														"Prevent phantoms with predicate locks: ensure serializable isolation in concurrent database transactions.",
													],
													longSummary: [
														"In databases with serializable isolation, preventing phantoms is crucial. Phantoms occur when one transaction alters the results of another's search query. For instance, if a transaction searches for room bookings within a specific time, another transaction shouldn't concurrently modify bookings for the same room and time. This is managed through predicate locks, which function like shared/exclusive locks but apply to all objects matching a search condition, even those not yet in the database. Predicate locks ensure transactions acquire shared-mode locks for reads and check for conflicts before modifications, preventing write skew and race conditions, thus achieving serializable isolation.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289706/blog-cover-images/nudzom6lmtwqmptexlvq.webp",
												},
												{
													heading: [
														"### **Index-range locks**",
													],
													children: [
														"Unfortunately, predicate locks do not perform well: if there are many locks by active transactions, checking for matching locks becomes time-consuming. For that reason, most databases with 2PL actually implement *index-range locking* (also known as *next-key locking*), which is a simplified approximation of predicate locking \\[[41](), [50]()\\].",
														"It’s safe to simplify a predicate by making it match a greater set of objects. For example, if you have a predicate lock for bookings of room 123 between noon and 1 p.m., you can approximate it by locking bookings for room 123 at any time, or you can approximate it by locking all rooms (not just room 123) between noon and 1 p.m. This is safe, because any write that matches the original predicate will definitely also match the approximations.",
														"In the room bookings database you would probably have an index on the `room_id` column, and/or indexes on `start_time` and `end_time` (otherwise the preceding query would be very slow on a large database):",
														"* Say your index is on `room_id`, and the database uses this index to find existing bookings for room 123. Now the database can simply attach a shared lock to this index entry, indicating that a transaction has searched for bookings of room 123.",
														"* Alternatively, if the database uses a time-based index to find existing bookings, it can attach a shared lock to a range of values in that index, indicating that a transaction has searched for bookings that overlap with the time period of noon to 1 p.m. on January 1, 2018.",
														"Either way, an approximation of the search condition is attached to one of the indexes. Now, if another transaction wants to insert, update, or delete a booking for the same room and/or an overlapping time period, it will have to update the same part of the index. In the process of doing so, it will encounter the shared lock, and it will be forced to wait until the lock is released.",
														"This provides effective protection against phantoms and write skew. Index-range locks are not as precise as predicate locks would be (they may lock a bigger range of objects than is strictly necessary to maintain serializability), but since they have much lower overheads, they are a good compromise.",
														"If there is no suitable index where a range lock can be attached, the database can fall back to a shared lock on the entire table. This will not be good for performance, since it will stop all other transactions writing to the table, but it’s a safe fallback position.",
													],
													summary: [
														"Index-range locking balances precision and performance, preventing phantoms and write skew efficiently.",
													],
													longSummary: [
														"Predicate locks can be inefficient with many transactions, so databases using 2PL often use index-range locking (next-key locking) instead. This method locks more objects than necessary, like index entries or ranges matching search conditions, to prevent phantoms and write skew. It makes other transactions wait if they try to modify bookings in the same range. While less precise than predicate locks, index-range locks have lower overhead and offer a good balance. If no suitable index exists, the database might lock the entire table, which is safe but impacts performance.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289704/blog-cover-images/rnx1l4cku0docfievvuw.webp",
												},
											],
										],
										summary: [
											"Two-phase locking ensures serializability but can cause deadlocks and performance issues in databases.",
										],
										longSummary: [
											"For about 30 years, two-phase locking (2PL) was the main algorithm for ensuring serializability in databases. It involves acquiring shared locks for reading and exclusive locks for writing, which can lead to deadlocks and reduced concurrency. While 2PL prevents race conditions like lost updates and write skew, it impacts performance as transactions wait for others to finish. To prevent phantoms, 2PL uses predicate locks or index-range locking, balancing precision and overhead. However, it can cause unstable latencies and frequent deadlocks, especially under high contention.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289636/blog-cover-images/m037pjttgzonjpayjyib.webp",
									},
									{
										heading: [
											"## **Serializable Snapshot Isolation (SSI)**",
										],
										children: [
											"This chapter has painted a bleak picture of concurrency control in databases. On the one hand, we have implementations of serializability that don’t perform well (two-phase locking) or don’t scale well (serial execution). On the other hand, we have weak isolation levels that have good performance, but are prone to various race conditions (lost updates, write skew, phantoms, etc.). Are serializable isolation and good performance fundamentally at odds with each other?",
											"Perhaps not: an algorithm called *serializable snapshot isolation* (SSI) is very promising. It provides full serializability, but has only a small performance penalty compared to snapshot isolation. SSI is fairly new: it was first described in 2008 \\[[40]()\\] and is the subject of Michael Cahill’s PhD thesis \\[[51]()\\].",
											"Today SSI is used both in single-node databases (the serializable isolation level in PostgreSQL since version 9.1 \\[[41]()\\]) and distributed databases (FoundationDB uses a similar algorithm). As SSI is so young compared to other concurrency control mechanisms, it is still proving its performance in practice, but it has the possibility of being fast enough to become the new default in the future.",
											[
												{
													heading: [
														"### **Pessimistic versus optimistic concurrency control**",
													],
													children: [
														"Two-phase locking is a so-called *pessimistic* concurrency control mechanism: it is based on the principle that if anything might possibly go wrong (as indicated by a lock held by another transaction), it’s better to wait until the situation is safe again before doing anything. It is like *mutual exclusion*, which is used to protect data structures in multi-threaded programming.",
														"Serial execution is, in a sense, pessimistic to the extreme: it is essentially equivalent to each transaction having an exclusive lock on the entire database (or one partition of the database) for the duration of the transaction. We compensate for the pessimism by making each transaction very fast to execute, so it only needs to hold the “lock” for a short time.",
														"By contrast, serializable snapshot isolation is an *optimistic* concurrency control technique. Optimistic in this context means that instead of blocking if something potentially dangerous happens, transactions continue anyway, in the hope that everything will turn out all right. When a transaction wants to commit, the database checks whether anything bad happened (i.e., whether isolation was violated); if so, the transaction is aborted and has to be retried. Only transactions that executed serializably are allowed to commit.",
														"Optimistic concurrency control is an old idea \\[[52]()\\], and its advantages and disadvantages have been debated for a long time \\[[53]()\\]. It performs badly if there is high contention (many transactions trying to access the same objects), as this leads to a high proportion of transactions needing to abort. If the system is already close to its maximum throughput, the additional transaction load from retried transactions can make performance worse.",
														"However, if there is enough spare capacity, and if contention between transactions is not too high, optimistic concurrency control techniques tend to perform better than pessimistic ones. Contention can be reduced with commutative atomic operations: for example, if several transactions concurrently want to increment a counter, it doesn’t matter in which order the increments are applied (as long as the counter isn’t read in the same transaction), so the concurrent increments can all be applied without conflicting.",
														"As the name suggests, SSI is based on snapshot isolation—that is, all reads within a transaction are made from a consistent snapshot of the database (see [“Snapshot Isolation and Repeatable Read”](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#sec_transactions_snapshot_isolation)). This is the main difference compared to earlier optimistic concurrency control techniques. On top of snapshot isolation, SSI adds an algorithm for detecting serialization conflicts among writes and determining which transactions to abort.",
													],
													summary: [
														"Discover how optimistic and pessimistic concurrency control strategies impact database performance.",
													],
													longSummary: [
														"Two-phase locking is a pessimistic concurrency control mechanism that waits for safe conditions before proceeding, while serial execution takes this to the extreme by granting each transaction an exclusive lock on the entire database, allowing for quick execution. In contrast, serializable snapshot isolation (SSI) is an optimistic approach where transactions proceed despite potential risks, with the database checking for isolation violations at commit time. Optimistic control excels with spare capacity and low contention but struggles under high contention. SSI uses snapshot isolation for consistent reads and includes an algorithm to detect serialization conflicts among writes, determining which transactions to abort.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289708/blog-cover-images/dolrnefd3pzz38w1w28x.webp",
												},
												{
													heading: [
														"### **Decisions based on an outdated premise**",
													],
													children: [
														"When we previously discussed write skew in snapshot isolation (see [“Write Skew and Phantoms”](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#sec_transactions_write_skew)), we observed a recurring pattern: a transaction reads some data from the database, examines the result of the query, and decides to take some action (write to the database) based on the result that it saw. However, under snapshot isolation, the result from the original query may no longer be up-to-date by the time the transaction commits, because the data may have been modified in the meantime.",
														"Put another way, the transaction is taking an action based on a *premise* (a fact that was true at the beginning of the transaction, e.g., “There are currently two doctors on call”). Later, when the transaction wants to commit, the original data may have changed—the premise may no longer be true.",
														"When the application makes a query (e.g., “How many doctors are currently on call?”), the database doesn’t know how the application logic uses the result of that query. To be safe, the database needs to assume that any change in the query result (the premise) means that writes in that transaction may be invalid. In other words, there may be a causal dependency between the queries and the writes in the transaction. In order to provide serializable isolation, the database must detect situations in which a transaction may have acted on an outdated premise and abort the transaction in that case.",
														"How does the database know if a query result might have changed? There are two cases to consider:",
														"* Detecting reads of a stale MVCC object version (uncommitted write occurred before the read)",
														"* Detecting writes that affect prior reads (the write occurs after the read)",
													],
													summary: [
														"Snapshot isolation risks outdated actions; databases must detect and abort transactions on stale data.",
													],
													longSummary: [
														"When discussing write skew in snapshot isolation, we observed that a transaction might read data, make decisions based on that data, and take action, but by the time it commits, the data may have changed. This means the transaction could be acting on outdated information. Since the database cannot know how the application uses query results, it assumes any change in the query result could invalidate the transaction's writes due to causal dependency. To ensure serializable isolation, the database must detect and abort transactions that acted on outdated premises by identifying stale MVCC object versions and writes affecting prior reads.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289709/blog-cover-images/nlincvxvxxwh9msxytjc.webp",
												},
												{
													heading: [
														"### **Detecting stale MVCC reads**",
													],
													children: [
														"Recall that snapshot isolation is usually implemented by multi-version concurrency control (MVCC; see [Figure 7-10](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#fig_transactions_detect_mvcc)). When a transaction reads from a consistent snapshot in an MVCC database, it ignores writes that were made by any other transactions that hadn’t yet committed at the time when the snapshot was taken. In [Figure 7-10](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#fig_transactions_detect_mvcc), transaction 43 sees Alice as having `on_call = true`, because transaction 42 (which modified Alice’s on-call status) is uncommitted. However, by the time transaction 43 wants to commit, transaction 42 has already committed. This means that the write that was ignored when reading from the consistent snapshot has now taken effect, and transaction 43’s premise is no longer true.",
														"![ddia 0710](blob:https://johnfactotum.github.io/92243162-4d33-4789-9adc-ddf9799f7d88)",
														"###### *Figure 7-10. Detecting when a transaction reads outdated values from an MVCC snapshot.*",
														"In order to prevent this anomaly, the database needs to track when a transaction ignores another transaction’s writes due to MVCC visibility rules. When the transaction wants to commit, the database checks whether any of the ignored writes have now been committed. If so, the transaction must be aborted.",
														"Why wait until committing? Why not abort transaction 43 immediately when the stale read is detected? Well, if transaction 43 was a read-only transaction, it wouldn’t need to be aborted, because there is no risk of write skew. At the time when transaction 43 makes its read, the database doesn’t yet know whether that transaction is going to later perform a write. Moreover, transaction 42 may yet abort or may still be uncommitted at the time when transaction 43 is committed, and so the read may turn out not to have been stale after all. By avoiding unnecessary aborts, SSI preserves snapshot isolation’s support for long-running reads from a consistent snapshot.",
													],
													summary: [
														"Snapshot isolation can cause anomalies; databases track ignored writes to prevent invalid transactions.",
													],
													longSummary: [
														"Snapshot isolation, implemented via multi-version concurrency control (MVCC), allows transactions to read from consistent snapshots, ignoring uncommitted writes from others. This can cause anomalies if a transaction's premise becomes invalid before committing, as seen when transaction 43 reads Alice's status based on transaction 42's uncommitted changes. By the time transaction 43 commits, transaction 42 has committed, invalidating transaction 43's premise. To prevent this, databases track ignored writes and check at commit time if any have since committed, aborting if necessary. This preserves snapshot isolation's support for long-running reads from consistent snapshots.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289711/blog-cover-images/jjbbz9lswbtgfys7b8qz.webp",
												},
												{
													heading: [
														"### **Detecting writes that affect prior reads**",
													],
													children: [
														"The second case to consider is when another transaction modifies data after it has been read. This case is illustrated in [Figure 7-11](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#fig_transactions_detect_index_range).",
														"![ddia 0711](blob:https://johnfactotum.github.io/cd33e6bd-dc0c-4867-bf04-ec48bc4a6dea)",
														"###### *Figure 7-11. In serializable snapshot isolation, detecting when one transaction modifies another transaction’s reads.*",
														"In the context of two-phase locking we discussed index-range locks (see [“Index-range locks”](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#sec_transactions_2pl_range)), which allow the database to lock access to all rows matching some search query, such as `WHERE shift_id = 1234`. We can use a similar technique here, except that SSI locks don’t block other transactions.",
														"In [Figure 7-11](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#fig_transactions_detect_index_range), transactions 42 and 43 both search for on-call doctors during shift `1234`. If there is an index on `shift_id`, the database can use the index entry 1234 to record the fact that transactions 42 and 43 read this data. (If there is no index, this information can be tracked at the table level.) This information only needs to be kept for a while: after a transaction has finished (committed or aborted), and all concurrent transactions have finished, the database can forget what data it read.",
														"When a transaction writes to the database, it must look in the indexes for any other transactions that have recently read the affected data. This process is similar to acquiring a write lock on the affected key range, but rather than blocking until the readers have committed, the lock acts as a tripwire: it simply notifies the transactions that the data they read may no longer be up to date.",
														"In [Figure 7-11](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#fig_transactions_detect_index_range), transaction 43 notifies transaction 42 that its prior read is outdated, and vice versa. Transaction 42 is first to commit, and it is successful: although transaction 43’s write affected 42, 43 hasn’t yet committed, so the write has not yet taken effect. However, when transaction 43 wants to commit, the conflicting write from 42 has already been committed, so 43 must abort.",
													],
													summary: [
														"Serializable snapshot isolation detects outdated reads, ensuring transaction consistency without blocking.",
													],
													longSummary: [
														"In serializable snapshot isolation, transactions are monitored to detect when one modifies data read by another. For instance, when searching for on-call doctors, the database uses indexes to track which transactions read specific data. This tracking is temporary, ending once all concurrent transactions finish. If a transaction writes to the database, it checks for recent readers, alerting them to potential data staleness. In Figure 7-11, transaction 43 alerts transaction 42 of outdated reads. Transaction 42 commits successfully, but transaction 43 must abort due to a conflicting write by transaction 42.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289711/blog-cover-images/vt4xgjuncjnxit5evfhb.webp",
												},
												{
													heading: [
														"### **Performance of serializable snapshot isolation**",
													],
													children: [
														"As always, many engineering details affect how well an algorithm works in practice. For example, one trade-off is the granularity at which transactions’ reads and writes are tracked. If the database keeps track of each transaction’s activity in great detail, it can be precise about which transactions need to abort, but the bookkeeping overhead can become significant. Less detailed tracking is faster, but may lead to more transactions being aborted than strictly necessary.",
														"In some cases, it’s okay for a transaction to read information that was overwritten by another transaction: depending on what else happened, it’s sometimes possible to prove that the result of the execution is nevertheless serializable. PostgreSQL uses this theory to reduce the number of unnecessary aborts \\[[11](), [41]()\\].",
														"Compared to two-phase locking, the big advantage of serializable snapshot isolation is that one transaction doesn’t need to block waiting for locks held by another transaction. Like under snapshot isolation, writers don’t block readers, and vice versa. This design principle makes query latency much more predictable and less variable. In particular, read-only queries can run on a consistent snapshot without requiring any locks, which is very appealing for read-heavy workloads.",
														"Compared to serial execution, serializable snapshot isolation is not limited to the throughput of a single CPU core: FoundationDB distributes the detection of serialization conflicts across multiple machines, allowing it to scale to very high throughput. Even though data may be partitioned across multiple machines, transactions can read and write data in multiple partitions while ensuring serializable isolation \\[[54]()\\].",
														"The rate of aborts significantly affects the overall performance of SSI. For example, a transaction that reads and writes data over a long period of time is likely to run into conflicts and abort, so SSI requires that read-write transactions be fairly short (long-running read-only transactions may be okay). However, SSI is probably less sensitive to slow transactions than two-phase locking or serial execution.",
													],
													summary: [
														"Serializable snapshot isolation enhances concurrency control, offering predictable latency and high throughput across partitions.",
													],
													longSummary: [
														"Serializable snapshot isolation (SSI) offers distinct advantages over other concurrency control methods, such as reduced query latency and predictable performance, especially for read-heavy workloads. Unlike two-phase locking, SSI doesn't require transactions to block for locks, and it allows transactions to read overwritten data when serializability is assured, minimizing unnecessary aborts. SSI also surpasses serial execution by not being limited to a single CPU core, as seen in FoundationDB, which distributes conflict detection across machines for high throughput. However, high abort rates can hinder SSI performance, making it less ideal for long-running read-write transactions.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289713/blog-cover-images/ufivhqpwyxlkj55gvaou.webp",
												},
											],
										],
										summary: [
											"Serializable Snapshot Isolation (SSI) promises efficient, scalable concurrency control with minimal performance penalties.",
										],
										longSummary: [
											"This chapter explores concurrency control in databases, comparing pessimistic methods like two-phase locking and serial execution with optimistic approaches such as serializable snapshot isolation (SSI). While two-phase locking and serial execution ensure safety by locking resources, they face performance issues. SSI, used in databases like PostgreSQL, offers full serializability with minimal performance impact by allowing transactions to proceed and checking for conflicts at commit time. It excels in low-contention, read-heavy environments and distributed systems by avoiding blocking, though high abort rates can impact long-running transactions.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289637/blog-cover-images/xxbiuv4jqfnilyk4ngyp.webp",
									},
								],
							],
							summary: [
								"Explore the complexities of database isolation levels and the promise of serializable snapshot isolation.",
							],
							longSummary: [
								"This chapter explores database transactions and race conditions, focusing on the limitations of read committed and snapshot isolation levels, especially with write skew and phantoms. Although serializable isolation is recommended to prevent race conditions, its adoption is limited due to performance issues. Serializable isolation can be achieved through serial execution, two-phase locking (2PL), or serializable snapshot isolation (SSI). While 2PL ensures serializability, it faces performance and deadlock issues. SSI offers serializability with minimal performance penalties by detecting conflicts at commit time. Single-threaded serial execution, despite throughput limits, can outperform concurrent systems by avoiding locking overhead.",
							],
							imageUrl:
								"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289596/blog-cover-images/l2lrp3arrlg6xfgwxzpq.webp",
						},
						{
							heading: ["# **Summary**"],
							children: [
								"Transactions are an abstraction layer that allows an application to pretend that certain concurrency problems and certain kinds of hardware and software faults don’t exist. A large class of errors is reduced down to a simple *transaction abort*, and the application just needs to try again.",
								"In this chapter we saw many examples of problems that transactions help prevent. Not all applications are susceptible to all those problems: an application with very simple access patterns, such as reading and writing only a single record, can probably manage without transactions. However, for more complex access patterns, transactions can hugely reduce the number of potential error cases you need to think about.",
								"Without transactions, various error scenarios (processes crashing, network interruptions, power outages, disk full, unexpected concurrency, etc.) mean that data can become inconsistent in various ways. For example, denormalized data can easily go out of sync with the source data. Without transactions, it becomes very difficult to reason about the effects that complex interacting accesses can have on the database.",
								"In this chapter, we went particularly deep into the topic of concurrency control. We discussed several widely used isolation levels, in particular *read committed*, *snapshot isolation* (sometimes called *repeatable read*), and *serializable*. We characterized those isolation levels by discussing various examples of race conditions:",
								"Dirty reads",
								"One client reads another client’s writes before they have been committed. The read committed isolation level and stronger levels prevent dirty reads.",
								"Dirty writes",
								"One client overwrites data that another client has written, but not yet committed. Almost all transaction implementations prevent dirty writes.",
								"Read skew (nonrepeatable reads)",
								"A client sees different parts of the database at different points in time. This issue is most commonly prevented with snapshot isolation, which allows a transaction to read from a consistent snapshot at one point in time. It is usually implemented with *multi-version concurrency control* (MVCC).",
								"Lost updates",
								"Two clients concurrently perform a read-modify-write cycle. One overwrites the other’s write without incorporating its changes, so data is lost. Some implementations of snapshot isolation prevent this anomaly automatically, while others require a manual lock (`SELECT FOR UPDATE`).",
								"Write skew",
								"A transaction reads something, makes a decision based on the value it saw, and writes the decision to the database. However, by the time the write is made, the premise of the decision is no longer true. Only serializable isolation prevents this anomaly.",
								"Phantom reads",
								"A transaction reads objects that match some search condition. Another client makes a write that affects the results of that search. Snapshot isolation prevents straightforward phantom reads, but phantoms in the context of write skew require special treatment, such as index-range locks.",
								"Weak isolation levels protect against some of those anomalies but leave you, the application developer, to handle others manually (e.g., using explicit locking). Only serializable isolation protects against all of these issues. We discussed three different approaches to implementing serializable transactions:",
								"Literally executing transactions in a serial order",
								"If you can make each transaction very fast to execute, and the transaction throughput is low enough to process on a single CPU core, this is a simple and effective option.",
								"Two-phase locking",
								"For decades this has been the standard way of implementing serializability, but many applications avoid using it because of its performance characteristics.",
								"Serializable snapshot isolation (SSI)",
								"A fairly new algorithm that avoids most of the downsides of the previous approaches. It uses an optimistic approach, allowing transactions to proceed without blocking. When a transaction wants to commit, it is checked, and it is aborted if the execution was not serializable.",
								"The examples in this chapter used a relational data model. However, as discussed in [“The need for multi-object transactions”](blob:https://johnfactotum.github.io/ad690d4c-6920-4b27-9616-c4fbf6236001#sec_transactions_need), transactions are a valuable database feature, no matter which data model is used.",
								"In this chapter, we explored ideas and algorithms mostly in the context of a database running on a single machine. Transactions in distributed databases open a new set of difficult challenges, which we’ll discuss in the next two chapters.",
								"##### **Footnotes**",
								"[i]() Joe Hellerstein has remarked that the C in ACID was “tossed in to make the acronym work” in Härder and Reuter’s paper \\[[7]()\\], and that it wasn’t considered important at the time.",
								"[ii]() Arguably, an incorrect counter in an email application is not a particularly critical problem. Alternatively, think of a customer account balance instead of an unread counter, and a payment transaction instead of an email.",
								"[iii]() This is not ideal. If the TCP connection is interrupted, the transaction must be aborted. If the interruption happens after the client has requested a commit but before the server acknowledges that the commit happened, the client doesn’t know whether the transaction was committed or not. To solve this issue, a transaction manager can group operations by a unique transaction identifier that is not bound to a particular TCP connection. We will return to this topic in [“The End-to-End Argument for Databases”]().",
								"[iv]() Strictly speaking, the term *atomic increment* uses the word *atomic* in the sense of multi-threaded programming. In the context of ACID, it should actually be called *isolated* or *serializable* increment. But that’s getting nitpicky.",
								"[v]() Some databases support an even weaker isolation level called *read uncommitted*. It prevents dirty writes, but does not prevent dirty reads.",
								"[vi]() At the time of writing, the only mainstream databases that use locks for read committed isolation are IBM DB2 and Microsoft SQL Server in the `read_committed_snapshot=off` configuration \\[[23](), [36]()\\].",
								"[vii]() To be precise, transaction IDs are 32-bit integers, so they overflow after approximately 4 billion transactions. PostgreSQL’s vacuum process performs cleanup which ensures that overflow does not affect the data.",
								"[viii]() It is possible, albeit fairly complicated, to express the editing of a text document as a stream of atomic mutations. See [“Automatic Conflict Resolution”]() for some pointers.",
								"[ix]() In PostgreSQL you can do this more elegantly using range types, but they are not widely supported in other databases.",
								"[x]() If a transaction needs to access data that’s not in memory, the best solution may be to abort the transaction, asynchronously fetch the data into memory while continuing to process other transactions, and then restart the transaction when the data has been loaded. This approach is known as *anti-caching*, as previously mentioned in [“Keeping everything in memory”]().",
								"[xi]() Sometimes called *strong strict two-phase locking* (SS2PL) to distinguish it from other variants of 2PL.",
								"##### **References**",
								"\\[[1]()\\] Donald D. Chamberlin, Morton M. Astrahan, Michael W. Blasgen, et al.: “[A History and Evaluation of System R](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.84.348&rep=rep1&type=pdf),” *Communications of the ACM*, volume 24, number 10, pages 632–646, October 1981. [doi:10.1145/358769.358784](http://dx.doi.org/10.1145/358769.358784)",
								"\\[[2]()\\] Jim N. Gray, Raymond A. Lorie, Gianfranco R. Putzolu, and Irving L. Traiger: “[Granularity of Locks and Degrees of Consistency in a Shared Data Base](http://citeseer.ist.psu.edu/viewdoc/download?doi=10.1.1.92.8248&rep=rep1&type=pdf),” in *Modelling in Data Base Management Systems: Proceedings of the IFIP Working Conference on Modelling in Data Base Management Systems*, edited by G. M. Nijssen, pages 364–394, Elsevier/North Holland Publishing, 1976. Also in *Readings in Database Systems*, 4th edition, edited by Joseph M. Hellerstein and Michael Stonebraker, MIT Press, 2005. ISBN: 978-0-262-69314-1",
								"\\[[3]()\\] Kapali P. Eswaran, Jim N. Gray, Raymond A. Lorie, and Irving L. Traiger: “[The Notions of Consistency and Predicate Locks in a Database System](http://research.microsoft.com/en-us/um/people/gray/papers/On%20the%20Notions%20of%20Consistency%20and%20Predicate%20Locks%20in%20a%20Database%20System%20CACM.pdf),” *Communications of the ACM*, volume 19, number 11, pages 624–633, November 1976.",
								"\\[[4]()\\] “[ACID Transactions Are Incredibly Helpful](http://web.archive.org/web/20150320053809/https://foundationdb.com/acid-claims),” FoundationDB, LLC, 2013.",
								"\\[[5]()\\] John D. Cook: “[ACID Versus BASE for Database Transactions](http://www.johndcook.com/blog/2009/07/06/brewer-cap-theorem-base/),” *johndcook.com*, July 6, 2009.",
								"\\[[6]()\\] Gavin Clarke: “[NoSQL’s CAP Theorem Busters: We Don’t Drop ACID](http://www.theregister.co.uk/2012/11/22/foundationdb_fear_of_cap_theorem/),” *theregister.co.uk*, November 22, 2012.",
								"\\[[7]()\\] Theo Härder and Andreas Reuter: “[Principles of Transaction-Oriented Database Recovery](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.87.2812&rep=rep1&type=pdf),” *ACM Computing Surveys*, volume 15, number 4, pages 287–317, December 1983. [doi:10.1145/289.291](http://dx.doi.org/10.1145/289.291)",
								"\\[[8]()\\] Peter Bailis, Alan Fekete, Ali Ghodsi, et al.: “[HAT, not CAP: Towards Highly Available Transactions](http://www.bailis.org/papers/hat-hotos2013.pdf),” at *14th USENIX Workshop on Hot Topics in Operating Systems* (HotOS), May 2013.",
								"\\[[9]()\\] Armando Fox, Steven D. Gribble, Yatin Chawathe, et al.: “[Cluster-Based Scalable Network Services](http://www.cs.berkeley.edu/~brewer/cs262b/TACC.pdf),” at *16th ACM Symposium on Operating Systems Principles* (SOSP), October 1997.",
								"\\[[10]()\\] Philip A. Bernstein, Vassos Hadzilacos, and Nathan Goodman: *[Concurrency Control and Recovery in Database Systems](http://research.microsoft.com/en-us/people/philbe/ccontrol.aspx)*. Addison-Wesley, 1987. ISBN: 978-0-201-10715-9, available online at *research.microsoft.com*.",
								"\\[[11]()\\] Alan Fekete, Dimitrios Liarokapis, Elizabeth O’Neil, et al.: “[Making Snapshot Isolation Serializable](https://www.cse.iitb.ac.in/infolab/Data/Courses/CS632/2009/Papers/p492-fekete.pdf),” *ACM Transactions on Database Systems*, volume 30, number 2, pages 492–528, June 2005. [doi:10.1145/1071610.1071615](http://dx.doi.org/10.1145/1071610.1071615)",
								"\\[[12]()\\] Mai Zheng, Joseph Tucek, Feng Qin, and Mark Lillibridge: “[Understanding the Robustness of SSDs Under Power Fault](https://www.usenix.org/system/files/conference/fast13/fast13-final80.pdf),” at *11th USENIX Conference on File and Storage Technologies* (FAST), February 2013.",
								"\\[[13]()\\] Laurie Denness: “[SSDs: A Gift and a Curse](https://laur.ie/blog/2015/06/ssds-a-gift-and-a-curse/),” *laur.ie*, June 2, 2015.",
								"\\[[14]()\\] Adam Surak: “[When Solid State Drives Are Not That Solid](https://blog.algolia.com/when-solid-state-drives-are-not-that-solid/),” *blog.algolia.com*, June 15, 2015.",
								"\\[[15]()\\] Thanumalayan Sankaranarayana Pillai, Vijay Chidambaram, Ramnatthan Alagappan, et al.: “[All File Systems Are Not Created Equal: On the Complexity of Crafting Crash-Consistent Applications](http://research.cs.wisc.edu/wind/Publications/alice-osdi14.pdf),” at *11th USENIX Symposium on Operating Systems Design and Implementation* (OSDI), October 2014.",
								"\\[[16]()\\] Chris Siebenmann: “[Unix’s File Durability Problem](https://utcc.utoronto.ca/~cks/space/blog/unix/FileSyncProblem),” *utcc.utoronto.ca*, April 14, 2016.",
								"\\[[17]()\\] Lakshmi N. Bairavasundaram, Garth R. Goodson, Bianca Schroeder, et al.: “[An Analysis of Data Corruption in the Storage Stack](http://research.cs.wisc.edu/adsl/Publications/corruption-fast08.pdf),” at *6th USENIX Conference on File and Storage Technologies* (FAST), February 2008.",
								"\\[[18]()\\] Bianca Schroeder, Raghav Lagisetty, and Arif Merchant: “[Flash Reliability in Production: The Expected and the Unexpected](https://www.usenix.org/conference/fast16/technical-sessions/presentation/schroeder),” at *14th USENIX Conference on File and Storage Technologies* (FAST), February 2016.",
								"\\[[19]()\\] Don Allison: “[SSD Storage – Ignorance of Technology Is No Excuse](https://blog.korelogic.com/blog/2015/03/24),” *blog.korelogic.com*, March 24, 2015.",
								"\\[[20]()\\] Dave Scherer: “[Those Are Not Transactions (Cassandra 2.0)](http://web.archive.org/web/20150526065247/http://blog.foundationdb.com/those-are-not-transactions-cassandra-2-0),” *blog.foundationdb.com*, September 6, 2013.",
								"\\[[21]()\\] Kyle Kingsbury: “[Call Me Maybe: Cassandra](http://aphyr.com/posts/294-call-me-maybe-cassandra/),” *aphyr.com*, September 24, 2013.",
								"\\[[22]()\\] “[ACID Support in Aerospike](http://www.aerospike.com/docs/architecture/assets/AerospikeACIDSupport.pdf),” Aerospike, Inc., June 2014.",
								"\\[[23]()\\] Martin Kleppmann: “[Hermitage: Testing the ‘I’ in ACID](http://martin.kleppmann.com/2014/11/25/hermitage-testing-the-i-in-acid.html),” *martin.kleppmann.com*, November 25, 2014.",
								"\\[[24]()\\] Tristan D’Agosta: “[BTC Stolen from Poloniex](https://bitcointalk.org/index.php?topic=499580),” *bitcointalk.org*, March 4, 2014.",
								"\\[[25]()\\] bitcointhief2: “[How I Stole Roughly 100 BTC from an Exchange and How I Could Have Stolen More!](http://www.reddit.com/r/Bitcoin/comments/1wtbiu/how_i_stole_roughly_100_btc_from_an_exchange_and/),” *reddit.com*, February 2, 2014.",
								"\\[[26]()\\] Sudhir Jorwekar, Alan Fekete, Krithi Ramamritham, and S. Sudarshan: “[Automating the Detection of Snapshot Isolation Anomalies](http://www.vldb.org/conf/2007/papers/industrial/p1263-jorwekar.pdf),” at *33rd International Conference on Very Large Data Bases* (VLDB), September 2007.",
								"\\[[27]()\\] Michael Melanson: “[Transactions: The Limits of Isolation](http://www.michaelmelanson.net/2014/03/20/transactions/),” *michaelmelanson.net*, March 20, 2014.",
								"\\[[28]()\\] Hal Berenson, Philip A. Bernstein, Jim N. Gray, et al.: “[A Critique of ANSI SQL Isolation Levels](http://research.microsoft.com/pubs/69541/tr-95-51.pdf),” at *ACM International Conference on Management of Data* (SIGMOD), May 1995.",
								"\\[[29]()\\] Atul Adya: “[Weak Consistency: A Generalized Theory and Optimistic Implementations for Distributed Transactions](http://pmg.csail.mit.edu/papers/adya-phd.pdf),” PhD Thesis, Massachusetts Institute of Technology, March 1999.",
								"\\[[30]()\\] Peter Bailis, Aaron Davidson, Alan Fekete, et al.: “[Highly Available Transactions: Virtues and Limitations (Extended Version)](http://arxiv.org/pdf/1302.0309.pdf),” at *40th International Conference on Very Large Data Bases* (VLDB), September 2014.",
								"\\[[31]()\\] Bruce Momjian: “[MVCC Unmasked](http://momjian.us/main/presentations/internals.html#mvcc),” *momjian.us*, July 2014.",
								"\\[[32]()\\] Annamalai Gurusami: “[Repeatable Read Isolation Level in InnoDB – How Consistent Read View Works](https://blogs.oracle.com/mysqlinnodb/entry/repeatable_read_isolation_level_in),” *blogs.oracle.com*, January 15, 2013.",
								"\\[[33]()\\] Nikita Prokopov: “[Unofficial Guide to Datomic Internals](http://tonsky.me/blog/unofficial-guide-to-datomic-internals/),” *tonsky.me*, May 6, 2014.",
								"\\[[34]()\\] Baron Schwartz: “[Immutability, MVCC, and Garbage Collection](http://www.xaprb.com/blog/2013/12/28/immutability-mvcc-and-garbage-collection/),” *xaprb.com*, December 28, 2013.",
								"\\[[35]()\\] J. Chris Anderson, Jan Lehnardt, and Noah Slater: *CouchDB: The Definitive Guide*. O’Reilly Media, 2010. ISBN: 978-0-596-15589-6",
								"\\[[36]()\\] Rikdeb Mukherjee: “[Isolation in DB2 (Repeatable Read, Read Stability, Cursor Stability, Uncommitted Read) with Examples](http://mframes.blogspot.co.uk/2013/07/isolation-in-cursor.html),” *mframes.blogspot.co.uk*, July 4, 2013.",
								"\\[[37]()\\] Steve Hilker: “[Cursor Stability (CS) – IBM DB2 Community](http://www.toadworld.com/platforms/ibmdb2/w/wiki/6661.cursor-stability-cs.aspx),” *toadworld.com*, March 14, 2013.",
								"\\[[38]()\\] Nate Wiger: “[An Atomic Rant](http://www.nateware.com/an-atomic-rant.html),” *nateware.com*, February 18, 2010.",
								"\\[[39]()\\] Joel Jacobson: “[Riak 2.0: Data Types](http://blog.joeljacobson.com/riak-2-0-data-types/),” *blog.joeljacobson.com*, March 23, 2014.",
								"\\[[40]()\\] Michael J. Cahill, Uwe Röhm, and Alan Fekete: “[Serializable Isolation for Snapshot Databases](http://www.cs.nyu.edu/courses/fall12/CSCI-GA.2434-001/p729-cahill.pdf),” at *ACM International Conference on Management of Data* (SIGMOD), June 2008. [doi:10.1145/1376616.1376690](http://dx.doi.org/10.1145/1376616.1376690)",
								"\\[[41]()\\] Dan R. K. Ports and Kevin Grittner: “[Serializable Snapshot Isolation in PostgreSQL](http://drkp.net/papers/ssi-vldb12.pdf),” at *38th International Conference on Very Large Databases* (VLDB), August 2012.",
								"\\[[42]()\\] Tony Andrews: “[Enforcing Complex Constraints in Oracle](http://tonyandrews.blogspot.co.uk/2004/10/enforcing-complex-constraints-in.html),” *tonyandrews.blogspot.co.uk*, October 15, 2004.",
								"\\[[43]()\\] Douglas B. Terry, Marvin M. Theimer, Karin Petersen, et al.: “[Managing Update Conflicts in Bayou, a Weakly Connected Replicated Storage System](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.141.7889&rep=rep1&type=pdf),” at *15th ACM Symposium on Operating Systems Principles* (SOSP), December 1995. [doi:10.1145/224056.224070](http://dx.doi.org/10.1145/224056.224070)",
								"\\[[44]()\\] Gary Fredericks: “[Postgres Serializability Bug](https://github.com/gfredericks/pg-serializability-bug),” *github.com*, September 2015.",
								"\\[[45]()\\] Michael Stonebraker, Samuel Madden, Daniel J. Abadi, et al.: “[The End of an Architectural Era (It’s Time for a Complete Rewrite)](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.137.3697&rep=rep1&type=pdf),” at *33rd International Conference on Very Large Data Bases* (VLDB), September 2007.",
								"\\[[46]()\\] John Hugg: “[H-Store/VoltDB Architecture vs. CEP Systems and Newer Streaming Architectures](https://www.youtube.com/watch?v=hD5M4a1UVz8),” at *Data @Scale Boston*, November 2014.",
								"\\[[47]()\\] Robert Kallman, Hideaki Kimura, Jonathan Natkins, et al.: “[H-Store: A High-Performance, Distributed Main Memory Transaction Processing System](http://www.vldb.org/pvldb/1/1454211.pdf),” *Proceedings of the VLDB Endowment*, volume 1, number 2, pages 1496–1499, August 2008.",
								"\\[[48]()\\] Rich Hickey: “[The Architecture of Datomic](http://www.infoq.com/articles/Architecture-Datomic),” *infoq.com*, November 2, 2012.",
								"\\[[49]()\\] John Hugg: “[Debunking Myths About the VoltDB In-Memory Database](http://voltdb.com/blog/debunking-myths-about-voltdb-memory-database),” *voltdb.com*, May 12, 2014.",
								"\\[[50]()\\] Joseph M. Hellerstein, Michael Stonebraker, and James Hamilton: “[Architecture of a Database System](http://db.cs.berkeley.edu/papers/fntdb07-architecture.pdf),” *Foundations and Trends in Databases*, volume 1, number 2, pages 141–259, November 2007. [doi:10.1561/1900000002](http://dx.doi.org/10.1561/1900000002)",
								"\\[[51]()\\] Michael J. Cahill: “[Serializable Isolation for Snapshot Databases](http://cahill.net.au/wp-content/uploads/2010/02/cahill-thesis.pdf),” PhD Thesis, University of Sydney, July 2009.",
								"\\[[52]()\\] D. Z. Badal: “[Correctness of Concurrency Control and Implications in Distributed Databases](http://ieeexplore.ieee.org/abstract/document/762563/),” at *3rd International IEEE Computer Software and Applications Conference* (COMPSAC), November 1979.",
								"\\[[53]()\\] Rakesh Agrawal, Michael J. Carey, and Miron Livny: “[Concurrency Control Performance Modeling: Alternatives and Implications](http://www.eecs.berkeley.edu/~brewer/cs262/ConcControl.pdf),” *ACM Transactions on Database Systems* (TODS), volume 12, number 4, pages 609–654, December 1987. [doi:10.1145/32204.32220](http://dx.doi.org/10.1145/32204.32220)",
								"\\[[54]()\\] Dave Rosenthal: “[Databases at 14.4MHz](http://web.archive.org/web/20150427041746/http://blog.foundationdb.com/databases-at-14.4mhz),” *blog.foundationdb.com*, December 10, 2014.",
							],
							summary: [
								"Transactions simplify concurrency and fault handling, ensuring data consistency across complex applications.",
							],
							longSummary: [
								"Transactions simplify handling concurrency issues and hardware/software faults by reducing errors to transaction aborts, crucial for complex applications. They prevent data inconsistency from crashes, network interruptions, and power outages. This chapter examined concurrency control through isolation levels like read committed, snapshot isolation, and serializable, addressing race conditions such as dirty reads/writes and phantom reads. Weak isolation levels require manual anomaly handling, while serializable isolation covers all issues. Three serializable transaction methods were discussed: serial execution, two-phase locking, and serializable snapshot isolation. Transactions are vital across data models, with upcoming chapters focusing on distributed databases' challenges.",
							],
							imageUrl:
								"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289597/blog-cover-images/x8pxghkauyfxl0nwh6zk.webp",
						},
					],
				],
				summary: [
					"Explore the complexities of database transactions, ACID guarantees, and concurrency control challenges.",
				],
				longSummary: [
					"In data systems, issues like software failures and network interruptions are common. Transactions help manage these by grouping operations to either fully succeed or fail, simplifying error handling. Understanding ACID properties—Atomicity, Consistency, Isolation, and Durability—is crucial for assessing transaction needs. NoSQL databases offer new models but may sacrifice transactional guarantees, raising scalability versus reliability debates. Concurrency control and isolation levels, such as read committed and serializability, manage concurrent transactions with trade-offs. Serializable isolation offers strong guarantees but is costly, leading to weaker levels and potential issues. Transactions simplify management but depend on application needs.",
				],
				imageUrl:
					"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289543/blog-cover-images/eehc0njzkx9yxrlmcc6h.webp",
			},
			{
				heading: [
					"# **Chapter 8. The Trouble with Distributed Systems**",
				],
				children: [
					"> *Hey I just met you  \n> The network’s laggy  \n> But here’s my data  \n> So store it maybe*",
					"> Kyle Kingsbury, *Carly Rae Jepsen and the Perils of Network Partitions* (2013)",
					"![](blob:https://johnfactotum.github.io/36a9635a-3314-4c26-8562-6fdc71616247)",
					"A recurring theme in the last few chapters has been how systems handle things going wrong. For example, we discussed replica failover ([“Handling Node Outages”]()), replication lag ([“Problems with Replication Lag”]()), and concurrency control for transactions ([“Weak Isolation Levels”]()). As we come to understand various edge cases that can occur in real systems, we get better at handling them.",
					"However, even though we have talked a lot about faults, the last few chapters have still been too optimistic. The reality is even darker. We will now turn our pessimism to the maximum and assume that anything that *can* go wrong *will* go wrong.[i]() (Experienced systems operators will tell you that is a reasonable assumption. If you ask nicely, they might tell you some frightening stories while nursing their scars of past battles.)",
					"Working with distributed systems is fundamentally different from writing software on a single computer—and the main difference is that there are lots of new and exciting ways for things to go wrong \\[[1](), [2]()\\]. In this chapter, we will get a taste of the problems that arise in practice, and an understanding of the things we can and cannot rely on.",
					"In the end, our task as engineers is to build systems that do their job (i.e., meet the guarantees that users are expecting), in spite of everything going wrong. In [Chapter 9](), we will look at some examples of algorithms that can provide such guarantees in a distributed system. But first, in this chapter, we must understand what challenges we are up against.",
					"This chapter is a thoroughly pessimistic and depressing overview of things that may go wrong in a distributed system. We will look into problems with networks ([“Unreliable Networks”](blob:https://johnfactotum.github.io/a501b827-14dc-4eda-a557-5a2ef326751d#sec_distributed_networks)); clocks and timing issues ([“Unreliable Clocks”](blob:https://johnfactotum.github.io/a501b827-14dc-4eda-a557-5a2ef326751d#sec_distributed_clocks)); and we’ll discuss to what degree they are avoidable. The consequences of all these issues are disorienting, so we’ll explore how to think about the state of a distributed system and how to reason about things that have happened ([“Knowledge, Truth, and Lies”](blob:https://johnfactotum.github.io/a501b827-14dc-4eda-a557-5a2ef326751d#sec_distributed_truth)).",
					[
						{
							heading: ["# **Faults and Partial Failures**"],
							children: [
								"When you are writing a program on a single computer, it normally behaves in a fairly predictable way: either it works or it doesn’t. Buggy software may give the appearance that the computer is sometimes “having a bad day” (a problem that is often fixed by a reboot), but that is mostly just a consequence of badly written software.",
								"There is no fundamental reason why software on a single computer should be flaky: when the hardware is working correctly, the same operation always produces the same result (it is *deterministic*). If there is a hardware problem (e.g., memory corruption or a loose connector), the consequence is usually a total system failure (e.g., kernel panic, “blue screen of death,” failure to start up). An individual computer with good software is usually either fully functional or entirely broken, but not something in between.",
								"This is a deliberate choice in the design of computers: if an internal fault occurs, we prefer a computer to crash completely rather than returning a wrong result, because wrong results are difficult and confusing to deal with. Thus, computers hide the fuzzy physical reality on which they are implemented and present an idealized system model that operates with mathematical perfection. A CPU instruction always does the same thing; if you write some data to memory or disk, that data remains intact and doesn’t get randomly corrupted. This design goal of always-correct computation goes all the way back to the very first digital computer \\[[3]()\\].",
								"When you are writing software that runs on several computers, connected by a network, the situation is fundamentally different. In distributed systems, we are no longer operating in an idealized system model—we have no choice but to confront the messy reality of the physical world. And in the physical world, a remarkably wide range of things can go wrong, as illustrated by this anecdote \\[[4]()\\]:",
								"> *In my limited experience I’ve dealt with long-lived network partitions in a single data center (DC), PDU \\[power distribution unit\\] failures, switch failures, accidental power cycles of whole racks, whole-DC backbone failures, whole-DC power failures, and a hypoglycemic driver smashing his Ford pickup truck into a DC’s HVAC \\[heating, ventilation, and air conditioning\\] system. And I’m not even an ops guy.*",
								"> Coda Hale",
								"In a distributed system, there may well be some parts of the system that are broken in some unpredictable way, even though other parts of the system are working fine. This is known as a *partial failure*. The difficulty is that partial failures are *nondeterministic*: if you try to do anything involving multiple nodes and the network, it may sometimes work and sometimes unpredictably fail. As we shall see, you may not even *know* whether something succeeded or not, as the time it takes for a message to travel across a network is also nondeterministic!",
								"This nondeterminism and possibility of partial failures is what makes distributed systems hard to work with \\[[5]()\\].",
								[
									{
										heading: [
											"## **Cloud Computing and Supercomputing**",
										],
										children: [
											"There is a spectrum of philosophies on how to build large-scale computing systems:",
											"* At one end of the scale is the field of *high-performance computing* (HPC). Supercomputers with thousands of CPUs are typically used for computationally intensive scientific computing tasks, such as weather forecasting or molecular dynamics (simulating the movement of atoms and molecules).",
											"* At the other extreme is *cloud computing*, which is not very well defined \\[[6]()\\] but is often associated with multi-tenant datacenters, commodity computers connected with an IP network (often Ethernet), elastic/on-demand resource allocation, and metered billing.",
											"* Traditional enterprise datacenters lie somewhere between these extremes.",
											"With these philosophies come very different approaches to handling faults. In a supercomputer, a job typically checkpoints the state of its computation to durable storage from time to time. If one node fails, a common solution is to simply stop the entire cluster workload. After the faulty node is repaired, the computation is restarted from the last checkpoint \\[[7](), [8]()\\]. Thus, a supercomputer is more like a single-node computer than a distributed system: it deals with partial failure by letting it escalate into total failure—if any part of the system fails, just let everything crash (like a kernel panic on a single machine).",
											"In this book we focus on systems for implementing internet services, which usually look very different from supercomputers:",
											"* Many internet-related applications are *online*, in the sense that they need to be able to serve users with low latency at any time. Making the service unavailable—for example, stopping the cluster for repair—is not acceptable. In contrast, offline (batch) jobs like weather simulations can be stopped and restarted with fairly low impact.",
											"* Supercomputers are typically built from specialized hardware, where each node is quite reliable, and nodes communicate through shared memory and remote direct memory access (RDMA). On the other hand, nodes in cloud services are built from commodity machines, which can provide equivalent performance at lower cost due to economies of scale, but also have higher failure rates.",
											"* Large datacenter networks are often based on IP and Ethernet, arranged in Clos topologies to provide high bisection bandwidth \\[[9]()\\]. Supercomputers often use specialized network topologies, such as multi-dimensional meshes and toruses \\[[10]()\\], which yield better performance for HPC workloads with known communication patterns.",
											"* The bigger a system gets, the more likely it is that one of its components is broken. Over time, broken things get fixed and new things break, but in a system with thousands of nodes, it is reasonable to assume that *something* is always broken \\[[7]()\\]. When the error handling strategy consists of simply giving up, a large system can end up spending a lot of its time recovering from faults rather than doing useful work \\[[8]()\\].",
											"* If the system can tolerate failed nodes and still keep working as a whole, that is a very useful feature for operations and maintenance: for example, you can perform a rolling upgrade (see [Chapter 4]()), restarting one node at a time, while the service continues serving users without interruption. In cloud environments, if one virtual machine is not performing well, you can just kill it and request a new one (hoping that the new one will be faster).",
											"* In a geographically distributed deployment (keeping data geographically close to your users to reduce access latency), communication most likely goes over the internet, which is slow and unreliable compared to local networks. Supercomputers generally assume that all of their nodes are close together.",
											"If we want to make distributed systems work, we must accept the possibility of partial failure and build fault-tolerance mechanisms into the software. In other words, we need to build a reliable system from unreliable components. (As discussed in [“Reliability”](), there is no such thing as perfect reliability, so we’ll need to understand the limits of what we can realistically promise.)",
											"Even in smaller systems consisting of only a few nodes, it’s important to think about partial failure. In a small system, it’s quite likely that most of the components are working correctly most of the time. However, sooner or later, some part of the system *will* become faulty, and the software will have to somehow handle it. The fault handling must be part of the software design, and you (as operator of the software) need to know what behavior to expect from the software in the case of a fault.",
											"It would be unwise to assume that faults are rare and simply hope for the best. It is important to consider a wide range of possible faults—even fairly unlikely ones—and to artificially create such situations in your testing environment to see what happens. In distributed systems, suspicion, pessimism, and paranoia pay off.",
											"##### **Building a Reliable System from Unreliable Components**",
											"You may wonder whether this makes any sense—intuitively it may seem like a system can only be as reliable as its least reliable component (its *weakest link*). This is not the case: in fact, it is an old idea in computing to construct a more reliable system from a less reliable underlying base \\[[11]()\\]. For example:",
											"* Error-correcting codes allow digital data to be transmitted accurately across a communication channel that occasionally gets some bits wrong, for example due to radio interference on a wireless network \\[[12]()\\].",
											"* IP (the Internet Protocol) is unreliable: it may drop, delay, duplicate, or reorder packets. TCP (the Transmission Control Protocol) provides a more reliable transport layer on top of IP: it ensures that missing packets are retransmitted, duplicates are eliminated, and packets are reassembled into the order in which they were sent.",
											"Although the system can be more reliable than its underlying parts, there is always a limit to how much more reliable it can be. For example, error-correcting codes can deal with a small number of single-bit errors, but if your signal is swamped by interference, there is a fundamental limit to how much data you can get through your communication channel \\[[13]()\\]. TCP can hide packet loss, duplication, and reordering from you, but it cannot magically remove delays in the network.",
											"Although the more reliable higher-level system is not perfect, it’s still useful because it takes care of some of the tricky low-level faults, and so the remaining faults are usually easier to reason about and deal with. We will explore this matter further in [“The end-to-end argument”]().",
										],
										summary: [
											"Crafting reliable systems from unreliable parts: embrace faults, enhance resilience, and ensure continuity.",
										],
										longSummary: [
											"Building large-scale computing systems involves philosophies ranging from high-performance computing (HPC) with supercomputers to cloud computing with commodity hardware. Supercomputers handle faults by checkpointing data and restarting workloads, while internet services must remain continuously available, using commodity hardware with higher failure rates and IP/Ethernet networks in Clos topologies. These services tolerate component failures, support rolling upgrades, and are often geographically distributed. Reliable distributed systems require accepting partial failures and implementing fault-tolerance in software. Surprisingly, more reliable systems can be built from unreliable components, as shown by error-correcting codes and TCP/IP, though there are limits to reliability improvements.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289600/blog-cover-images/ysqiy6ugmm4mqmkhoi1h.webp",
									},
								],
							],
							summary: [
								"Building reliable systems from unreliable parts: embrace partial failures and implement fault-tolerance.",
							],
							longSummary: [
								"When writing a program on a single computer, it behaves predictably, but distributed systems on networked computers face challenges like partial failures and nondeterminism. These systems, from supercomputers to cloud computing, handle faults differently. Supercomputers restart workloads after failures, while internet services must remain available, tolerate failures, and support upgrades. Building reliable distributed systems involves accepting partial failures and implementing fault-tolerance in software. Surprisingly, more reliable systems can be built from unreliable components, as demonstrated by error-correcting codes and TCP/IP, though there are limits to this reliability improvement.",
							],
							imageUrl:
								"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289544/blog-cover-images/kucitltuwhltjh8kr0q8.webp",
						},
						{
							heading: ["# **Unreliable Networks**"],
							children: [
								"As discussed in the introduction to [Part II](), the distributed systems we focus on in this book are *shared-nothing systems*: i.e., a bunch of machines connected by a network. The network is the only way those machines can communicate—we assume that each machine has its own memory and disk, and one machine cannot access another machine’s memory or disk (except by making requests to a service over the network).",
								"Shared-nothing is not the only way of building systems, but it has become the dominant approach for building internet services, for several reasons: it’s comparatively cheap because it requires no special hardware, it can make use of commoditized cloud computing services, and it can achieve high reliability through redundancy across multiple geographically distributed datacenters.",
								"The internet and most internal networks in datacenters (often Ethernet) are *asynchronous packet networks*. In this kind of network, one node can send a message (a packet) to another node, but the network gives no guarantees as to when it will arrive, or whether it will arrive at all. If you send a request and expect a response, many things could go wrong (some of which are illustrated in [Figure 8-1](blob:https://johnfactotum.github.io/a501b827-14dc-4eda-a557-5a2ef326751d#fig_distributed_network)):",
								"1. Your request may have been lost (perhaps someone unplugged a network cable).",
								"2. Your request may be waiting in a queue and will be delivered later (perhaps the network or the recipient is overloaded).",
								"3. The remote node may have failed (perhaps it crashed or it was powered down).",
								"4. The remote node may have temporarily stopped responding (perhaps it is experiencing a long garbage collection pause; see [“Process Pauses”](blob:https://johnfactotum.github.io/a501b827-14dc-4eda-a557-5a2ef326751d#sec_distributed_clocks_pauses)), but it will start responding again later.",
								"5. The remote node may have processed your request, but the response has been lost on the network (perhaps a network switch has been misconfigured).",
								"6. The remote node may have processed your request, but the response has been delayed and will be delivered later (perhaps the network or your own machine is overloaded).",
								"![ddia 0801](blob:https://johnfactotum.github.io/d999778a-d88c-4364-aafe-d6be7aa8de8c)",
								"###### *Figure 8-1. If you send a request and don’t get a response, it’s not possible to distinguish whether (a) the request was lost, (b) the remote node is down, or (c) the response was lost.*",
								"The sender can’t even tell whether the packet was delivered: the only option is for the recipient to send a response message, which may in turn be lost or delayed. These issues are indistinguishable in an asynchronous network: the only information you have is that you haven’t received a response yet. If you send a request to another node and don’t receive a response, it is *impossible* to tell why.",
								"The usual way of handling this issue is a *timeout*: after some time you give up waiting and assume that the response is not going to arrive. However, when a timeout occurs, you still don’t know whether the remote node got your request or not (and if the request is still queued somewhere, it may still be delivered to the recipient, even if the sender has given up on it).",
								[
									{
										heading: [
											"## **Network Faults in Practice**",
										],
										children: [
											"We have been building computer networks for decades—one might hope that by now we would have figured out how to make them reliable. However, it seems that we have not yet succeeded.",
											"There are some systematic studies, and plenty of anecdotal evidence, showing that network problems can be surprisingly common, even in controlled environments like a datacenter operated by one company \\[[14]()\\]. One study in a medium-sized datacenter found about 12 network faults per month, of which half disconnected a single machine, and half disconnected an entire rack \\[[15]()\\]. Another study measured the failure rates of components like top-of-rack switches, aggregation switches, and load balancers \\[[16]()\\]. It found that adding redundant networking gear doesn’t reduce faults as much as you might hope, since it doesn’t guard against human error (e.g., misconfigured switches), which is a major cause of outages.",
											"Public cloud services such as EC2 are notorious for having frequent transient network glitches \\[[14]()\\], and well-managed private datacenter networks can be stabler environments. Nevertheless, nobody is immune from network problems: for example, a problem during a software upgrade for a switch could trigger a network topology reconfiguration, during which network packets could be delayed for more than a minute \\[[17]()\\]. Sharks might bite undersea cables and damage them \\[[18]()\\]. Other surprising faults include a network interface that sometimes drops all inbound packets but sends outbound packets successfully \\[[19]()\\]: just because a network link works in one direction doesn’t guarantee it’s also working in the opposite direction.",
										],
										summary: [
											"Despite decades of progress, network reliability remains elusive, plagued by frequent and varied issues.",
										],
										longSummary: [
											"Despite decades of development, computer networks remain unreliable, with network issues common even in controlled datacenter environments. Studies reveal about 12 network faults monthly in medium-sized datacenters, and redundant gear fails to significantly reduce faults due to human error. Public cloud services like EC2 frequently experience transient network glitches, though private datacenters may be more stable. However, no network is immune to problems: switch upgrades can delay packets for over a minute, undersea cables can be damaged by sharks, and network interfaces may drop all inbound packets while still sending outbound packets successfully.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289600/blog-cover-images/x2m0cxfygz9230epx62w.webp",
									},
									{
										heading: ["# **Network partitions**"],
										children: [
											"When one part of the network is cut off from the rest due to a network fault, that is sometimes called a *network partition* or *netsplit*. In this book we’ll generally stick with the more general term *network fault*, to avoid confusion with partitions (shards) of a storage system, as discussed in [Chapter 6]().",
											"Even if network faults are rare in your environment, the fact that faults *can* occur means that your software needs to be able to handle them. Whenever any communication happens over a network, it may fail—there is no way around it.",
											"If the error handling of network faults is not defined and tested, arbitrarily bad things could happen: for example, the cluster could become deadlocked and permanently unable to serve requests, even when the network recovers \\[[20]()\\], or it could even delete all of your data \\[[21]()\\]. If software is put in an unanticipated situation, it may do arbitrary unexpected things.",
											"Handling network faults doesn’t necessarily mean *tolerating* them: if your network is normally fairly reliable, a valid approach may be to simply show an error message to users while your network is experiencing problems. However, you do need to know how your software reacts to network problems and ensure that the system can recover from them. It may make sense to deliberately trigger network problems and test the system’s response (this is the idea behind Chaos Monkey; see [“Reliability”]()).",
										],
										summary: [
											"Prepare your software for inevitable network faults to prevent catastrophic failures.",
										],
										longSummary: [
											"Network faults, sometimes called network partitions or netsplits, occur when a part of the network is cut off. Even if rare, your software must handle these faults because network communication can fail unexpectedly. Without defined and tested error handling, severe issues like deadlocks or data loss could occur. Handling network faults doesn't always mean tolerating them; it might be sufficient to display an error message to users during network issues. However, it's crucial to understand how your software reacts to these problems and ensure the system can recover effectively.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289602/blog-cover-images/olmhyke4tjmepah2urue.webp",
									},
									{
										heading: ["## **Detecting Faults**"],
										children: [
											"Many systems need to automatically detect faulty nodes. For example:",
											"* A load balancer needs to stop sending requests to a node that is dead (i.e., take it *out of rotation*).",
											"* In a distributed database with single-leader replication, if the leader fails, one of the followers needs to be promoted to be the new leader (see [“Handling Node Outages”]()).",
											"Unfortunately, the uncertainty about the network makes it difficult to tell whether a node is working or not. In some specific circumstances you might get some feedback to explicitly tell you that something is not working:",
											"* If you can reach the machine on which the node should be running, but no process is listening on the destination port (e.g., because the process crashed), the operating system will helpfully close or refuse TCP connections by sending a `RST` or `FIN` packet in reply. However, if the node crashed while it was handling your request, you have no way of knowing how much data was actually processed by the remote node \\[[22]()\\].",
											"* If a node process crashed (or was killed by an administrator) but the node’s operating system is still running, a script can notify other nodes about the crash so that another node can take over quickly without having to wait for a timeout to expire. For example, HBase does this \\[[23]()\\].",
											"* If you have access to the management interface of the network switches in your datacenter, you can query them to detect link failures at a hardware level (e.g., if the remote machine is powered down). This option is ruled out if you’re connecting via the internet, or if you’re in a shared datacenter with no access to the switches themselves, or if you can’t reach the management interface due to a network problem.",
											"* If a router is sure that the IP address you’re trying to connect to is unreachable, it may reply to you with an ICMP Destination Unreachable packet. However, the router doesn’t have a magic failure detection capability either—it is subject to the same limitations as other participants of the network.",
											"Rapid feedback about a remote node being down is useful, but you can’t count on it. Even if TCP acknowledges that a packet was delivered, the application may have crashed before handling it. If you want to be sure that a request was successful, you need a positive response from the application itself \\[[24]()\\].",
											"Conversely, if something has gone wrong, you may get an error response at some level of the stack, but in general you have to assume that you will get no response at all. You can retry a few times (TCP retries transparently, but you may also retry at the application level), wait for a timeout to elapse, and eventually declare the node dead if you don’t hear back within the timeout.",
										],
										summary: [
											"Detecting faulty nodes is challenging; rely on application responses, not network signals.",
										],
										longSummary: [
											"In systems requiring automatic detection of faulty nodes, such as load balancers and distributed databases, network uncertainty complicates the process. While explicit failure feedback can sometimes be obtained through operating systems, notification scripts, network management interfaces, or ICMP messages, these mechanisms are unreliable. Even TCP acknowledgments don't ensure application-level processing. To confirm success, a positive application response is necessary. When issues arise, you may receive an error response, but often there's no response. The standard method involves retrying multiple times, waiting for a timeout, and declaring the node dead if no response is received.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289603/blog-cover-images/t4s4fa2geojdgdchkwl6.webp",
									},
									{
										heading: [
											"## **Timeouts and Unbounded Delays**",
										],
										children: [
											"If a timeout is the only sure way of detecting a fault, then how long should the timeout be? There is unfortunately no simple answer.",
											"A long timeout means a long wait until a node is declared dead (and during this time, users may have to wait or see error messages). A short timeout detects faults faster, but carries a higher risk of incorrectly declaring a node dead when in fact it has only suffered a temporary slowdown (e.g., due to a load spike on the node or the network).",
											"Prematurely declaring a node dead is problematic: if the node is actually alive and in the middle of performing some action (for example, sending an email), and another node takes over, the action may end up being performed twice. We will discuss this issue in more detail in [“Knowledge, Truth, and Lies”](blob:https://johnfactotum.github.io/a501b827-14dc-4eda-a557-5a2ef326751d#sec_distributed_truth), and in Chapters [9]() and [11]().",
											"When a node is declared dead, its responsibilities need to be transferred to other nodes, which places additional load on other nodes and the network. If the system is already struggling with high load, declaring nodes dead prematurely can make the problem worse. In particular, it could happen that the node actually wasn’t dead but only slow to respond due to overload; transferring its load to other nodes can cause a cascading failure (in the extreme case, all nodes declare each other dead, and everything stops working).",
											"Imagine a fictitious system with a network that guaranteed a maximum delay for packets—every packet is either delivered within some time *d*, or it is lost, but delivery never takes longer than *d*. Furthermore, assume that you can guarantee that a non-failed node always handles a request within some time *r*. In this case, you could guarantee that every successful request receives a response within time 2*d* + *r*—and if you don’t receive a response within that time, you know that either the network or the remote node is not working. If this was true, 2*d* + *r* would be a reasonable timeout to use.",
											"Unfortunately, most systems we work with have neither of those guarantees: asynchronous networks have *unbounded delays* (that is, they try to deliver packets as quickly as possible, but there is no upper limit on the time it may take for a packet to arrive), and most server implementations cannot guarantee that they can handle requests within some maximum time (see [“Response time guarantees”](blob:https://johnfactotum.github.io/a501b827-14dc-4eda-a557-5a2ef326751d#sec_distributed_clocks_realtime)). For failure detection, it’s not sufficient for the system to be fast most of the time: if your timeout is low, it only takes a transient spike in round-trip times to throw the system off-balance.",
											[
												{
													heading: [
														"### **Network congestion and queueing**",
													],
													children: [
														"When driving a car, travel times on road networks often vary most due to traffic congestion. Similarly, the variability of packet delays on computer networks is most often due to queueing \\[[25]()\\]:",
														"* If several different nodes simultaneously try to send packets to the same destination, the network switch must queue them up and feed them into the destination network link one by one (as illustrated in [Figure 8-2](blob:https://johnfactotum.github.io/a501b827-14dc-4eda-a557-5a2ef326751d#fig_distributed_switch_queueing)). On a busy network link, a packet may have to wait a while until it can get a slot (this is called *network congestion*). If there is so much incoming data that the switch queue fills up, the packet is dropped, so it needs to be resent—even though the network is functioning fine.",
														"* When a packet reaches the destination machine, if all CPU cores are currently busy, the incoming request from the network is queued by the operating system until the application is ready to handle it. Depending on the load on the machine, this may take an arbitrary length of time.",
														"* In virtualized environments, a running operating system is often paused for tens of milliseconds while another virtual machine uses a CPU core. During this time, the VM cannot consume any data from the network, so the incoming data is queued (buffered) by the virtual machine monitor \\[[26]()\\], further increasing the variability of network delays.",
														"* TCP performs *flow control* (also known as *congestion avoidance* or *backpressure*), in which a node limits its own rate of sending in order to avoid overloading a network link or the receiving node \\[[27]()\\]. This means additional queueing at the sender before the data even enters the network.",
														"![ddia 0802](blob:https://johnfactotum.github.io/24e80ef7-54f0-4f9a-855d-cbba882fb301)",
														"###### *Figure 8-2. If several machines send network traffic to the same destination, its switch queue can fill up. Here, ports 1, 2, and 4 are all trying to send packets to port 3.*",
														"Moreover, TCP considers a packet to be lost if it is not acknowledged within some timeout (which is calculated from observed round-trip times), and lost packets are automatically retransmitted. Although the application does not see the packet loss and retransmission, it does see the resulting delay (waiting for the timeout to expire, and then waiting for the retransmitted packet to be acknowledged).",
														[
															{
																heading: [
																	"##### **TCP Versus UDP**",
																],
																children: [
																	"Some latency-sensitive applications, such as videoconferencing and Voice over IP (VoIP), use UDP rather than TCP. It’s a trade-off between reliability and variability of delays: as UDP does not perform flow control and does not retransmit lost packets, it avoids some of the reasons for variable network delays (although it is still susceptible to switch queues and scheduling delays).",
																	"UDP is a good choice in situations where delayed data is worthless. For example, in a VoIP phone call, there probably isn’t enough time to retransmit a lost packet before its data is due to be played over the loudspeakers. In this case, there’s no point in retransmitting the packet—the application must instead fill the missing packet’s time slot with silence (causing a brief interruption in the sound) and move on in the stream. The retry happens at the human layer instead. (“Could you repeat that please? The sound just cut out for a moment.”)",
																	"All of these factors contribute to the variability of network delays. Queueing delays have an especially wide range when a system is close to its maximum capacity: a system with plenty of spare capacity can easily drain queues, whereas in a highly utilized system, long queues can build up very quickly.",
																	"In public clouds and multi-tenant datacenters, resources are shared among many customers: the network links and switches, and even each machine’s network interface and CPUs (when running on virtual machines), are shared. Batch workloads such as MapReduce (see [Chapter 10]()) can easily saturate network links. As you have no control over or insight into other customers’ usage of the shared resources, network delays can be highly variable if someone near you (a *noisy neighbor*) is using a lot of resources \\[[28](), [29]()\\].",
																	"In such environments, you can only choose timeouts experimentally: measure the distribution of network round-trip times over an extended period, and over many machines, to determine the expected variability of delays. Then, taking into account your application’s characteristics, you can determine an appropriate trade-off between failure detection delay and risk of premature timeouts.",
																	"Even better, rather than using configured constant timeouts, systems can continually measure response times and their variability (*jitter*), and automatically adjust timeouts according to the observed response time distribution. This can be done with a Phi Accrual failure detector \\[[30]()\\], which is used for example in Akka and Cassandra \\[[31]()\\]. TCP retransmission timeouts also work similarly \\[[27]()\\].",
																],
																summary: [
																	"UDP excels in latency-sensitive apps, adapting timeouts to minimize delay variability and jitter.",
																],
																longSummary: [
																	'Latency-sensitive applications like videoconferencing and VoIP prefer UDP over TCP to minimize delay variability, as delayed data is useless in these contexts. UDP is advantageous because it doesn\'t retransmit lost packets, which is crucial for real-time communication. Network delay variability is often caused by queueing delays, especially in public clouds and multi-tenant datacenters where shared resources can lead to "noisy neighbor" issues. To manage this, timeouts should be set based on experimental measurements of round-trip time distributions. Advanced systems like Akka and Cassandra use Phi Accrual failure detectors to adjust timeouts dynamically, similar to TCP retransmission strategies.',
																],
																imageUrl:
																	"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289714/blog-cover-images/rlnixdcvsheb6xvi22xd.webp",
															},
														],
													],
													summary: [
														"Network delays vary due to congestion, queueing, and resource sharing, impacting application performance.",
													],
													longSummary: [
														"Traffic congestion in driving mirrors packet delay variability in computer networks, caused by multiple nodes sending packets to the same destination or a busy CPU. In virtualized environments, paused VMs can lead to buffering, while TCP flow control prevents overloads by retransmitting unacknowledged packets, adding delay. UDP is preferred for latency-sensitive applications like VoIP. Delay variability worsens near capacity, especially in shared environments like public clouds. Systems should adjust timeouts based on round-trip time distributions, as demonstrated by Phi Accrual failure detectors in Akka and Cassandra.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289638/blog-cover-images/nba7g8ura6g5ncnhxn8u.webp",
												},
											],
										],
										summary: [
											"Balancing timeout settings in distributed systems is crucial to avoid false node failure detections.",
										],
										longSummary: [
											"Balancing timeout settings in distributed systems is crucial: long timeouts delay dead node detection, while short ones risk misidentifying slow nodes as dead, causing unnecessary actions and potential cascading failures. Unpredictable network delays and request handling times complicate this balance. Variability in network delays, often due to congestion, busy CPUs, and TCP flow control, further challenges timeout settings. Systems should experimentally determine and dynamically adjust timeouts by measuring round-trip time distributions, as demonstrated by Phi Accrual failure detectors in Akka and Cassandra.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289603/blog-cover-images/pm7makbmsdv3zrkkeeke.webp",
									},
									{
										heading: [
											"## **Synchronous Versus Asynchronous Networks**",
										],
										children: [
											"Distributed systems would be a lot simpler if we could rely on the network to deliver packets with some fixed maximum delay, and not to drop packets. Why can’t we solve this at the hardware level and make the network reliable so that the software doesn’t need to worry about it?",
											"To answer this question, it’s interesting to compare datacenter networks to the traditional fixed-line telephone network (non-cellular, non-VoIP), which is extremely reliable: delayed audio frames and dropped calls are very rare. A phone call requires a constantly low end-to-end latency and enough bandwidth to transfer the audio samples of your voice. Wouldn’t it be nice to have similar reliability and predictability in computer networks?",
											"When you make a call over the telephone network, it establishes a *circuit*: a fixed, guaranteed amount of bandwidth is allocated for the call, along the entire route between the two callers. This circuit remains in place until the call ends \\[[32]()\\]. For example, an ISDN network runs at a fixed rate of 4,000 frames per second. When a call is established, it is allocated 16 bits of space within each frame (in each direction). Thus, for the duration of the call, each side is guaranteed to be able to send exactly 16 bits of audio data every 250 microseconds \\[[33](), [34]()\\].",
											"This kind of network is *synchronous*: even as data passes through several routers, it does not suffer from queueing, because the 16 bits of space for the call have already been reserved in the next hop of the network. And because there is no queueing, the maximum end-to-end latency of the network is fixed. We call this a *bounded delay*.",
											[
												{
													heading: [
														"### **Can we not simply make network delays predictable?**",
													],
													children: [
														"Note that a circuit in a telephone network is very different from a TCP connection: a circuit is a fixed amount of reserved bandwidth which nobody else can use while the circuit is established, whereas the packets of a TCP connection opportunistically use whatever network bandwidth is available. You can give TCP a variable-sized block of data (e.g., an email or a web page), and it will try to transfer it in the shortest time possible. While a TCP connection is idle, it doesn’t use any bandwidth.[ii]()",
														"If datacenter networks and the internet were circuit-switched networks, it would be possible to establish a guaranteed maximum round-trip time when a circuit was set up. However, they are not: Ethernet and IP are packet-switched protocols, which suffer from queueing and thus unbounded delays in the network. These protocols do not have the concept of a circuit.",
														"Why do datacenter networks and the internet use packet switching? The answer is that they are optimized for *bursty traffic*. A circuit is good for an audio or video call, which needs to transfer a fairly constant number of bits per second for the duration of the call. On the other hand, requesting a web page, sending an email, or transferring a file doesn’t have any particular bandwidth requirement—we just want it to complete as quickly as possible.",
														"If you wanted to transfer a file over a circuit, you would have to guess a bandwidth allocation. If you guess too low, the transfer is unnecessarily slow, leaving network capacity unused. If you guess too high, the circuit cannot be set up (because the network cannot allow a circuit to be created if its bandwidth allocation cannot be guaranteed). Thus, using circuits for bursty data transfers wastes network capacity and makes transfers unnecessarily slow. By contrast, TCP dynamically adapts the rate of data transfer to the available network capacity.",
														"There have been some attempts to build hybrid networks that support both circuit switching and packet switching, such as ATM.[iii]() InfiniBand has some similarities \\[[35]()\\]: it implements end-to-end flow control at the link layer, which reduces the need for queueing in the network, although it can still suffer from delays due to link congestion \\[[36]()\\]. With careful use of *quality of service* (QoS, prioritization and scheduling of packets) and *admission control* (rate-limiting senders), it is possible to emulate circuit switching on packet networks, or provide statistically bounded delay \\[[25](), [32]()\\].",
														[
															{
																heading: [
																	"##### **Latency and Resource Utilization**",
																],
																children: [
																	"More generally, you can think of variable delays as a consequence of dynamic resource partitioning.",
																	"Say you have a wire between two telephone switches that can carry up to 10,000 simultaneous calls. Each circuit that is switched over this wire occupies one of those call slots. Thus, you can think of the wire as a resource that can be shared by up to 10,000 simultaneous users. The resource is divided up in a *static* way: even if you’re the only call on the wire right now, and all other 9,999 slots are unused, your circuit is still allocated the same fixed amount of bandwidth as when the wire is fully utilized.",
																	"By contrast, the internet shares network bandwidth *dynamically*. Senders push and jostle with each other to get their packets over the wire as quickly as possible, and the network switches decide which packet to send (i.e., the bandwidth allocation) from one moment to the next. This approach has the downside of queueing, but the advantage is that it maximizes utilization of the wire. The wire has a fixed cost, so if you utilize it better, each byte you send over the wire is cheaper.",
																	"A similar situation arises with CPUs: if you share each CPU core dynamically between several threads, one thread sometimes has to wait in the operating system’s run queue while another thread is running, so a thread can be paused for varying lengths of time. However, this utilizes the hardware better than if you allocated a static number of CPU cycles to each thread (see [“Response time guarantees”](blob:https://johnfactotum.github.io/a501b827-14dc-4eda-a557-5a2ef326751d#sec_distributed_clocks_realtime)). Better hardware utilization is also a significant motivation for using virtual machines.",
																	"Latency guarantees are achievable in certain environments, if resources are statically partitioned (e.g., dedicated hardware and exclusive bandwidth allocations). However, it comes at the cost of reduced utilization—in other words, it is more expensive. On the other hand, multi-tenancy with dynamic resource partitioning provides better utilization, so it is cheaper, but it has the downside of variable delays.",
																	"Variable delays in networks are not a law of nature, but simply the result of a cost/benefit trade-off.",
																	"However, such quality of service is currently not enabled in multi-tenant datacenters and public clouds, or when communicating via the internet.[iv]() Currently deployed technology does not allow us to make any guarantees about delays or reliability of the network: we have to assume that network congestion, queueing, and unbounded delays will happen. Consequently, there’s no “correct” value for timeouts—they need to be determined experimentally.",
																],
																summary: [
																	"Dynamic resource partitioning maximizes utilization but introduces variable delays and requires experimental timeouts.",
																],
																longSummary: [
																	"Variable delays arise from dynamic resource partitioning, where resources like internet bandwidth and CPU time are shared among users, leading to competition and queueing. This method maximizes utilization and reduces costs per transmitted byte, unlike static partitioning in telephone networks, which offers latency guarantees but at a higher cost due to fixed allocations. Multi-tenancy in datacenters and public clouds is more economical but introduces variable delays, as these systems lack quality of service guarantees. Consequently, network congestion and unbounded delays are expected, necessitating experimental determination of timeouts. These delays are trade-offs between cost and performance.",
																],
																imageUrl:
																	"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289717/blog-cover-images/ilixtlswradt8whvvlfm.webp",
															},
														],
													],
													summary: [
														"TCP adapts to dynamic bandwidth, unlike fixed-bandwidth circuits, optimizing for bursty traffic.",
													],
													longSummary: [
														"Telephone circuits reserve fixed bandwidth, unlike TCP, which dynamically uses available bandwidth for variable data transfers. Datacenter networks and the internet use packet-switched protocols like Ethernet and IP, optimized for bursty traffic but causing unbounded delays. TCP adapts to network capacity, while hybrid approaches like ATM and InfiniBand provide end-to-end flow control. Internet bandwidth is shared dynamically, maximizing utilization but causing variable delays. Static resource partitioning guarantees latency but is costly. Multi-tenancy and dynamic partitioning are economical but introduce delays, requiring experimental timeout determination due to network congestion.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289639/blog-cover-images/a3agyfo66oebgtl7kdlq.webp",
												},
											],
										],
										summary: [
											"Distributed systems face challenges due to unreliable networks and variable delays, unlike telephone networks.",
										],
										longSummary: [
											"Distributed systems would be simpler with reliable networks and fixed delays, but datacenter and internet networks make this challenging. Unlike telephone networks that use circuit switching for fixed bandwidth and no queueing delays, datacenter networks use packet-switched protocols like Ethernet and IP. These protocols handle bursty traffic by dynamically sharing bandwidth, leading to variable delays. While telephone networks allocate resources statically, the internet's dynamic resource partitioning maximizes utilization but introduces variable delays. This trade-off allows cost-effective multi-tenancy but requires assuming network congestion and unbounded delays, making timeouts experimental.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289606/blog-cover-images/ifu4w1jz1nqc2od1ydjw.webp",
									},
								],
							],
							summary: [
								"Explore the challenges of unreliable networks and strategies for handling network faults effectively.",
							],
							longSummary: [
								"The book explores shared-nothing distributed systems, where machines with separate memory and disk are linked via an asynchronous packet network. This architecture is popular in internet services for its cost-effectiveness, cloud compatibility, and reliability through redundancy. However, network issues like lost requests, delayed responses, and node failures are common. Handling these faults is crucial to prevent severe consequences like data loss or system deadlock. Datacenter networks, unlike fixed-bandwidth telephone networks, face unbounded delays. Systems must dynamically adapt using techniques like Phi Accrual failure detectors to adjust timeouts based on network performance, ensuring robust distributed systems.",
							],
							imageUrl:
								"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289545/blog-cover-images/rosuskjtjeo14upe5z3i.webp",
						},
						{
							heading: ["# **Unreliable Clocks**"],
							children: [
								"Clocks and time are important. Applications depend on clocks in various ways to answer questions like the following:",
								"1. Has this request timed out yet?",
								"2. What’s the 99th percentile response time of this service?",
								"3. How many queries per second did this service handle on average in the last five minutes?",
								"4. How long did the user spend on our site?",
								"5. When was this article published?",
								"6. At what date and time should the reminder email be sent?",
								"7. When does this cache entry expire?",
								"8. What is the timestamp on this error message in the log file?",
								"Examples 1–4 measure *durations* (e.g., the time interval between a request being sent and a response being received), whereas examples 5–8 describe *points in time* (events that occur on a particular date, at a particular time).",
								"In a distributed system, time is a tricky business, because communication is not instantaneous: it takes time for a message to travel across the network from one machine to another. The time when a message is received is always later than the time when it is sent, but due to variable delays in the network, we don’t know how much later. This fact sometimes makes it difficult to determine the order in which things happened when multiple machines are involved.",
								"Moreover, each machine on the network has its own clock, which is an actual hardware device: usually a quartz crystal oscillator. These devices are not perfectly accurate, so each machine has its own notion of time, which may be slightly faster or slower than on other machines. It is possible to synchronize clocks to some degree: the most commonly used mechanism is the Network Time Protocol (NTP), which allows the computer clock to be adjusted according to the time reported by a group of servers \\[[37]()\\]. The servers in turn get their time from a more accurate time source, such as a GPS receiver.",
								[
									{
										heading: [
											"## **Monotonic Versus Time-of-Day Clocks**",
										],
										children: [
											"Modern computers have at least two different kinds of clocks: a *time-of-day clock* and a *monotonic clock*. Although they both measure time, it is important to distinguish the two, since they serve different purposes.",
											[
												{
													heading: [
														"### **Time-of-day clocks**",
													],
													children: [
														"A time-of-day clock does what you intuitively expect of a clock: it returns the current date and time according to some calendar (also known as *wall-clock time*). For example, `clock_gettime(CLOCK_REALTIME)` on Linux[v]() and `System.currentTimeMillis()` in Java return the number of seconds (or milliseconds) since the *epoch*: midnight UTC on January 1, 1970, according to the Gregorian calendar, not counting leap seconds. Some systems use other dates as their reference point.",
														"Time-of-day clocks are usually synchronized with NTP, which means that a timestamp from one machine (ideally) means the same as a timestamp on another machine. However, time-of-day clocks also have various oddities, as described in the next section. In particular, if the local clock is too far ahead of the NTP server, it may be forcibly reset and appear to jump back to a previous point in time. These jumps, as well as the fact that they often ignore leap seconds, make time-of-day clocks unsuitable for measuring elapsed time \\[[38]()\\].",
														"Time-of-day clocks have also historically had quite a coarse-grained resolution, e.g., moving forward in steps of 10 ms on older Windows systems \\[[39]()\\]. On recent systems, this is less of a problem.",
													],
													summary: [
														"Discover the quirks of synchronized clocks and their impact on time measurement.",
													],
													longSummary: [
														"A time-of-day clock provides the current date and time based on a calendar, like clock_gettime(CLOCK_REALTIME) on Linux or System.currentTimeMillis() in Java, which count seconds or milliseconds since midnight UTC on January 1, 1970. These clocks are typically synchronized with NTP for consistency across machines but can be reset if they deviate too much from NTP servers, causing time to jump backward. They often ignore leap seconds, making them unsuitable for measuring elapsed time. Historically, they had coarse resolution, such as 10 ms steps on older Windows systems, though this is less of an issue on modern systems.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289645/blog-cover-images/iig3xcafkgg48mwaaeqf.webp",
												},
												{
													heading: [
														"### **Monotonic clocks**",
													],
													children: [
														"A monotonic clock is suitable for measuring a duration (time interval), such as a timeout or a service’s response time: `clock_gettime(CLOCK_MONOTONIC)` on Linux and `System.nanoTime()` in Java are monotonic clocks, for example. The name comes from the fact that they are guaranteed to always move forward (whereas a time-of-day clock may jump back in time).",
														"You can check the value of the monotonic clock at one point in time, do something, and then check the clock again at a later time. The *difference* between the two values tells you how much time elapsed between the two checks. However, the *absolute* value of the clock is meaningless: it might be the number of nanoseconds since the computer was started, or something similarly arbitrary. In particular, it makes no sense to compare monotonic clock values from two different computers, because they don’t mean the same thing.",
														"On a server with multiple CPU sockets, there may be a separate timer per CPU, which is not necessarily synchronized with other CPUs. Operating systems compensate for any discrepancy and try to present a monotonic view of the clock to application threads, even as they are scheduled across different CPUs. However, it is wise to take this guarantee of monotonicity with a pinch of salt \\[[40]()\\].",
														"NTP may adjust the frequency at which the monotonic clock moves forward (this is known as *slewing* the clock) if it detects that the computer’s local quartz is moving faster or slower than the NTP server. By default, NTP allows the clock rate to be speeded up or slowed down by up to 0.05%, but NTP cannot cause the monotonic clock to jump forward or backward. The resolution of monotonic clocks is usually quite good: on most systems they can measure time intervals in microseconds or less.",
														"In a distributed system, using a monotonic clock for measuring elapsed time (e.g., timeouts) is usually fine, because it doesn’t assume any synchronization between different nodes’ clocks and is not sensitive to slight inaccuracies of measurement.",
													],
													summary: [
														"Monotonic clocks ensure precise time intervals without backward jumps, ideal for distributed systems.",
													],
													longSummary: [
														"A monotonic clock is ideal for measuring time intervals because it consistently moves forward, unlike time-of-day clocks that can jump backward. While it accurately reflects elapsed time, its absolute value is meaningless and not comparable across different computers. On multi-CPU servers, each CPU may have its own timer, but operating systems strive to maintain a consistent monotonic view. NTP can adjust the clock's frequency slightly to correct inaccuracies but cannot cause time jumps. With microsecond or better resolution, monotonic clocks are perfect for distributed systems, as they don't need synchronization between nodes and can handle minor inaccuracies.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289647/blog-cover-images/bjjyivbwkjltgeolgeit.webp",
												},
											],
										],
										summary: [
											"Discover why time-of-day and monotonic clocks serve distinct roles in computing.",
										],
										longSummary: [
											"Modern computers utilize two types of clocks: time-of-day and monotonic clocks, each serving distinct purposes. The time-of-day clock provides the current date and time based on a calendar, synchronized with NTP for consistency across machines, but can jump backward if adjusted, making it unsuitable for measuring elapsed time. Historically, these clocks had coarse resolution, though this has improved. In contrast, monotonic clocks, which always move forward, are ideal for measuring time intervals, offering microsecond or better resolution. They are unaffected by NTP adjustments that only alter frequency slightly, ensuring accurate elapsed time measurement in distributed systems without requiring synchronization.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289611/blog-cover-images/ldc9ba9spm1apqprwxzk.webp",
									},
									{
										heading: [
											"## **Clock Synchronization and Accuracy**",
										],
										children: [
											"Monotonic clocks don’t need synchronization, but time-of-day clocks need to be set according to an NTP server or other external time source in order to be useful. Unfortunately, our methods for getting a clock to tell the correct time aren’t nearly as reliable or accurate as you might hope—hardware clocks and NTP can be fickle beasts. To give just a few examples:",
											"* The quartz clock in a computer is not very accurate: it *drifts* (runs faster or slower than it should). Clock drift varies depending on the temperature of the machine. Google assumes a clock drift of 200 ppm (parts per million) for its servers \\[[41]()\\], which is equivalent to 6 ms drift for a clock that is resynchronized with a server every 30 seconds, or 17 seconds drift for a clock that is resynchronized once a day. This drift limits the best possible accuracy you can achieve, even if everything is working correctly.",
											"* If a computer’s clock differs too much from an NTP server, it may refuse to synchronize, or the local clock will be forcibly reset \\[[37]()\\]. Any applications observing the time before and after this reset may see time go backward or suddenly jump forward.",
											"* If a node is accidentally firewalled off from NTP servers, the misconfiguration may go unnoticed for some time. Anecdotal evidence suggests that this does happen in practice.",
											"* NTP synchronization can only be as good as the network delay, so there is a limit to its accuracy when you’re on a congested network with variable packet delays. One experiment showed that a minimum error of 35 ms is achievable when synchronizing over the internet \\[[42]()\\], though occasional spikes in network delay lead to errors of around a second. Depending on the configuration, large network delays can cause the NTP client to give up entirely.",
											"* Some NTP servers are wrong or misconfigured, reporting time that is off by hours \\[[43](), [44]()\\]. NTP clients are quite robust, because they query several servers and ignore outliers. Nevertheless, it’s somewhat worrying to bet the correctness of your systems on the time that you were told by a stranger on the internet.",
											"* Leap seconds result in a minute that is 59 seconds or 61 seconds long, which messes up timing assumptions in systems that are not designed with leap seconds in mind \\[[45]()\\]. The fact that leap seconds have crashed many large systems \\[[38](), [46]()\\] shows how easy it is for incorrect assumptions about clocks to sneak into a system. The best way of handling leap seconds may be to make NTP servers “lie,” by performing the leap second adjustment gradually over the course of a day (this is known as *smearing*) \\[[47](), [48]()\\], although actual NTP server behavior varies in practice \\[[49]()\\].",
											"* In virtual machines, the hardware clock is virtualized, which raises additional challenges for applications that need accurate timekeeping \\[[50]()\\]. When a CPU core is shared between virtual machines, each VM is paused for tens of milliseconds while another VM is running. From an application’s point of view, this pause manifests itself as the clock suddenly jumping forward \\[[26]()\\].",
											"* If you run software on devices that you don’t fully control (e.g., mobile or embedded devices), you probably cannot trust the device’s hardware clock at all. Some users deliberately set their hardware clock to an incorrect date and time, for example to circumvent timing limitations in games. As a result, the clock might be set to a time wildly in the past or the future.",
											"It is possible to achieve very good clock accuracy if you care about it sufficiently to invest significant resources. For example, the MiFID II draft European regulation for financial institutions requires all high-frequency trading funds to synchronize their clocks to within 100 microseconds of UTC, in order to help debug market anomalies such as “flash crashes” and to help detect market manipulation \\[[51]()\\].",
											"Such accuracy can be achieved using GPS receivers, the Precision Time Protocol (PTP) \\[[52]()\\], and careful deployment and monitoring. However, it requires significant effort and expertise, and there are plenty of ways clock synchronization can go wrong. If your NTP daemon is misconfigured, or a firewall is blocking NTP traffic, the clock error due to drift can quickly become large.",
										],
										summary: [
											"Monotonic clocks are stable, but time-of-day clocks face synchronization challenges and reliability issues.",
										],
										longSummary: [
											"Monotonic clocks don't require synchronization, but time-of-day clocks depend on external sources like NTP servers, which can be unreliable. Challenges include quartz clock drift, refusal to sync with significantly different NTP servers, accidental firewalling, network congestion limiting accuracy to 35 ms, misconfigured servers, leap seconds causing crashes, virtualized hardware issues, and untrusted device clocks. Achieving high accuracy, such as MiFID II's 100 microseconds requirement for high-frequency trading, demands significant effort, expertise, and monitoring to avoid large errors from misconfiguration.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289611/blog-cover-images/p7mf59snxzuhmyi9v3oe.webp",
									},
									{
										heading: [
											"## **Relying on Synchronized Clocks**",
										],
										children: [
											"The problem with clocks is that while they seem simple and easy to use, they have a surprising number of pitfalls: a day may not have exactly 86,400 seconds, time-of-day clocks may move backward in time, and the time on one node may be quite different from the time on another node.",
											"Earlier in this chapter we discussed networks dropping and arbitrarily delaying packets. Even though networks are well behaved most of the time, software must be designed on the assumption that the network will occasionally be faulty, and the software must handle such faults gracefully. The same is true with clocks: although they work quite well most of the time, robust software needs to be prepared to deal with incorrect clocks.",
											"Part of the problem is that incorrect clocks easily go unnoticed. If a machine’s CPU is defective or its network is misconfigured, it most likely won’t work at all, so it will quickly be noticed and fixed. On the other hand, if its quartz clock is defective or its NTP client is misconfigured, most things will seem to work fine, even though its clock gradually drifts further and further away from reality. If some piece of software is relying on an accurately synchronized clock, the result is more likely to be silent and subtle data loss than a dramatic crash \\[[53](), [54]()\\].",
											"Thus, if you use software that requires synchronized clocks, it is essential that you also carefully monitor the clock offsets between all the machines. Any node whose clock drifts too far from the others should be declared dead and removed from the cluster. Such monitoring ensures that you notice the broken clocks before they can cause too much damage.",
											[
												{
													heading: [
														"### **Timestamps for ordering events**",
													],
													children: [
														"Let’s consider one particular situation in which it is tempting, but dangerous, to rely on clocks: ordering of events across multiple nodes. For example, if two clients write to a distributed database, who got there first? Which write is the more recent one?",
														"[Figure 8-3](blob:https://johnfactotum.github.io/a501b827-14dc-4eda-a557-5a2ef326751d#fig_distributed_timestamps) illustrates a dangerous use of time-of-day clocks in a database with multi-leader replication (the example is similar to [Figure 5-9]()). Client A writes *x* = 1 on node 1; the write is replicated to node 3; client B increments *x* on node 3 (we now have *x* = 2); and finally, both writes are replicated to node 2.",
														"![ddia 0803](blob:https://johnfactotum.github.io/26fa3966-1565-4c13-a5bd-728949ee8636)",
														"###### *Figure 8-3. The write by client B is causally later than the write by client A, but B’s write has an earlier timestamp.*",
														"In [Figure 8-3](blob:https://johnfactotum.github.io/a501b827-14dc-4eda-a557-5a2ef326751d#fig_distributed_timestamps), when a write is replicated to other nodes, it is tagged with a timestamp according to the time-of-day clock on the node where the write originated. The clock synchronization is very good in this example: the skew between node 1 and node 3 is less than 3 ms, which is probably better than you can expect in practice.",
														"Nevertheless, the timestamps in [Figure 8-3](blob:https://johnfactotum.github.io/a501b827-14dc-4eda-a557-5a2ef326751d#fig_distributed_timestamps) fail to order the events correctly: the write *x* = 1 has a timestamp of 42.004 seconds, but the write *x* = 2 has a timestamp of 42.003 seconds, even though *x* = 2 occurred unambiguously later. When node 2 receives these two events, it will incorrectly conclude that *x* = 1 is the more recent value and drop the write *x* = 2. In effect, client B’s increment operation will be lost.",
														"This conflict resolution strategy is called *last write wins* (LWW), and it is widely used in both multi-leader replication and leaderless databases such as Cassandra \\[[53]()\\] and Riak \\[[54]()\\] (see [“Last write wins (discarding concurrent writes)”]()). Some implementations generate timestamps on the client rather than the server, but this doesn’t change the fundamental problems with LWW:",
														"* Database writes can mysteriously disappear: a node with a lagging clock is unable to overwrite values previously written by a node with a fast clock until the clock skew between the nodes has elapsed \\[[54](), [55]()\\]. This scenario can cause arbitrary amounts of data to be silently dropped without any error being reported to the application.",
														"* LWW cannot distinguish between writes that occurred sequentially in quick succession (in [Figure 8-3](blob:https://johnfactotum.github.io/a501b827-14dc-4eda-a557-5a2ef326751d#fig_distributed_timestamps), client B’s increment definitely occurs *after* client A’s write) and writes that were truly concurrent (neither writer was aware of the other). Additional causality tracking mechanisms, such as version vectors, are needed in order to prevent violations of causality (see [“Detecting Concurrent Writes”]()).",
														"* It is possible for two nodes to independently generate writes with the same timestamp, especially when the clock only has millisecond resolution. An additional tiebreaker value (which can simply be a large random number) is required to resolve such conflicts, but this approach can also lead to violations of causality \\[[53]()\\].",
														"Thus, even though it is tempting to resolve conflicts by keeping the most “recent” value and discarding others, it’s important to be aware that the definition of “recent” depends on a local time-of-day clock, which may well be incorrect. Even with tightly NTP-synchronized clocks, you could send a packet at timestamp 100 ms (according to the sender’s clock) and have it arrive at timestamp 99 ms (according to the recipient’s clock)—so it appears as though the packet arrived before it was sent, which is impossible.",
														"Could NTP synchronization be made accurate enough that such incorrect orderings cannot occur? Probably not, because NTP’s synchronization accuracy is itself limited by the network round-trip time, in addition to other sources of error such as quartz drift. For correct ordering, you would need the clock source to be significantly more accurate than the thing you are measuring (namely network delay).",
														"So-called *logical clocks* \\[[56](), [57]()\\], which are based on incrementing counters rather than an oscillating quartz crystal, are a safer alternative for ordering events (see [“Detecting Concurrent Writes”]()). Logical clocks do not measure the time of day or the number of seconds elapsed, only the relative ordering of events (whether one event happened before or after another). In contrast, time-of-day and monotonic clocks, which measure actual elapsed time, are also known as *physical clocks*. We’ll look at ordering a bit more in [“Ordering Guarantees”]().",
													],
													summary: [
														"Relying on physical clocks in distributed systems risks incorrect event ordering; logical clocks are safer.",
													],
													longSummary: [
														'Relying on clocks for ordering events in distributed systems is risky. In a multi-leader database, client A writes x = 1 on node 1, replicating to node 3, while client B increments x to 2 on node 3, with both writes replicating to node 2. Despite clock synchronization, timestamps fail, causing node 2 to incorrectly retain x = 1 due to the "last write wins" (LWW) strategy. LWW is flawed as it can cause writes to disappear, cannot distinguish between sequential and concurrent writes, and requires tiebreakers that may violate causality. Logical clocks, using incrementing counters, offer a safer alternative.',
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289643/blog-cover-images/a4pgfstrpgqq0yywmzka.webp",
												},
												{
													heading: [
														"### **Clock readings have a confidence interval**",
													],
													children: [
														"You may be able to read a machine’s time-of-day clock with microsecond or even nanosecond resolution. But even if you can get such a fine-grained measurement, that doesn’t mean the value is actually accurate to such precision. In fact, it most likely is not—as mentioned previously, the drift in an imprecise quartz clock can easily be several milliseconds, even if you synchronize with an NTP server on the local network every minute. With an NTP server on the public internet, the best possible accuracy is probably to the tens of milliseconds, and the error may easily spike to over 100 ms when there is network congestion \\[[57]()\\].",
														"Thus, it doesn’t make sense to think of a clock reading as a point in time—it is more like a range of times, within a confidence interval: for example, a system may be 95% confident that the time now is between 10.3 and 10.5 seconds past the minute, but it doesn’t know any more precisely than that \\[[58]()\\]. If we only know the time +/– 100 ms, the microsecond digits in the timestamp are essentially meaningless.",
														"The uncertainty bound can be calculated based on your time source. If you have a GPS receiver or atomic (caesium) clock directly attached to your computer, the expected error range is reported by the manufacturer. If you’re getting the time from a server, the uncertainty is based on the expected quartz drift since your last sync with the server, plus the NTP server’s uncertainty, plus the network round-trip time to the server (to a first approximation, and assuming you trust the server).",
														"Unfortunately, most systems don’t expose this uncertainty: for example, when you call `clock_gettime()`, the return value doesn’t tell you the expected error of the timestamp, so you don’t know if its confidence interval is five milliseconds or five years.",
														"An interesting exception is Google’s *TrueTime* API in Spanner \\[[41]()\\], which explicitly reports the confidence interval on the local clock. When you ask it for the current time, you get back two values: `[`*`earliest`*`,`*`latest`*`]`, which are the *earliest possible* and the *latest possible* timestamp. Based on its uncertainty calculations, the clock knows that the actual current time is somewhere within that interval. The width of the interval depends, among other things, on how long it has been since the local quartz clock was last synchronized with a more accurate clock source.",
													],
													summary: [
														"Machine clocks aren't precise; Google's TrueTime API reveals time uncertainty intervals.",
													],
													longSummary: [
														"Reading a machine's clock with microsecond or nanosecond resolution doesn't guarantee accuracy due to potential drift in quartz clocks, which can be several milliseconds even with frequent NTP synchronization. Public internet NTP servers offer accuracy in the tens of milliseconds, possibly exceeding 100 ms during network congestion. It's more accurate to view clock readings as a range within a confidence interval rather than a precise time. This uncertainty can be calculated based on your time source, but most systems don't expose it. Google's TrueTime API in Spanner is an exception, providing explicit confidence intervals for timestamps.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289643/blog-cover-images/spitiz9urc2c1b31mqkk.webp",
												},
												{
													heading: [
														"### **Synchronized clocks for global snapshots**",
													],
													children: [
														"In [“Snapshot Isolation and Repeatable Read”]() we discussed *snapshot isolation*, which is a very useful feature in databases that need to support both small, fast read-write transactions and large, long-running read-only transactions (e.g., for backups or analytics). It allows read-only transactions to see the database in a consistent state at a particular point in time, without locking and interfering with read-write transactions.",
														"The most common implementation of snapshot isolation requires a monotonically increasing transaction ID. If a write happened later than the snapshot (i.e., the write has a greater transaction ID than the snapshot), that write is invisible to the snapshot transaction. On a single-node database, a simple counter is sufficient for generating transaction IDs.",
														"However, when a database is distributed across many machines, potentially in multiple datacenters, a global, monotonically increasing transaction ID (across all partitions) is difficult to generate, because it requires coordination. The transaction ID must reflect causality: if transaction B reads a value that was written by transaction A, then B must have a higher transaction ID than A—otherwise, the snapshot would not be consistent. With lots of small, rapid transactions, creating transaction IDs in a distributed system becomes an untenable bottleneck.[vi]()",
														"Can we use the timestamps from synchronized time-of-day clocks as transaction IDs? If we could get the synchronization good enough, they would have the right properties: later transactions have a higher timestamp. The problem, of course, is the uncertainty about clock accuracy.",
														"Spanner implements snapshot isolation across datacenters in this way \\[[59](), [60]()\\]. It uses the clock’s confidence interval as reported by the TrueTime API, and is based on the following observation: if you have two confidence intervals, each consisting of an earliest and latest possible timestamp (*A* = \\[*Aearliest*, *Alatest*\\] and *B* = \\[*Bearliest*, *Blatest*\\]), and those two intervals do not overlap (i.e., *Aearliest* < *Alatest* < *Bearliest* < *Blatest*), then B definitely happened after A—there can be no doubt. Only if the intervals overlap are we unsure in which order A and B happened.",
														"In order to ensure that transaction timestamps reflect causality, Spanner deliberately waits for the length of the confidence interval before committing a read-write transaction. By doing so, it ensures that any transaction that may read the data is at a sufficiently later time, so their confidence intervals do not overlap. In order to keep the wait time as short as possible, Spanner needs to keep the clock uncertainty as small as possible; for this purpose, Google deploys a GPS receiver or atomic clock in each datacenter, allowing clocks to be synchronized to within about 7 ms \\[[41]()\\].",
														"Using clock synchronization for distributed transaction semantics is an area of active research \\[[57](), [61](), [62]()\\]. These ideas are interesting, but they have not yet been implemented in mainstream databases outside of Google.",
													],
													summary: [
														"Spanner uses synchronized clocks for distributed snapshot isolation, ensuring consistent transactions across databases.",
													],
													longSummary: [
														"Snapshot isolation enables read-only transactions to access a consistent database state without disrupting read-write transactions, typically using monotonically increasing transaction IDs. While this is straightforward in single-node databases, it poses challenges in distributed systems. Spanner addresses this by using synchronized time-of-day clocks as transaction IDs, leveraging the TrueTime API's confidence intervals to determine transaction order. To ensure causality, Spanner waits for the confidence interval duration before committing transactions. Google maintains clock uncertainty within about 7ms using GPS receivers or atomic clocks. Although promising, these techniques haven't been adopted in mainstream databases outside Google.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289644/blog-cover-images/d2z0gekk5wpyy4mih0nl.webp",
												},
											],
										],
										summary: [
											"Clocks seem simple but can mislead; logical clocks offer safer event ordering in systems.",
										],
										longSummary: [
											"Clocks in distributed systems pose challenges due to non-standard day lengths, backward-moving clocks, and differing times across nodes. Unlike immediate CPU or network failures, clock issues cause gradual drift and subtle data loss. Systems relying on synchronized clocks must monitor offsets and exclude nodes with significant drift. Using clocks for event ordering is risky, as clock skew can lead to errors, as seen in multi-leader databases. Logical clocks, based on counters, are safer. Google's TrueTime API in Spanner addresses clock uncertainty with confidence intervals, aiding in snapshot isolation. Clock synchronization for distributed transactions remains a research focus.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289610/blog-cover-images/fakcnfnv5gyi9vz063en.webp",
									},
									{
										heading: ["## **Process Pauses**"],
										children: [
											"Let’s consider another example of dangerous clock use in a distributed system. Say you have a database with a single leader per partition. Only the leader is allowed to accept writes. How does a node know that it is still leader (that it hasn’t been declared dead by the others), and that it may safely accept writes?",
											"One option is for the leader to obtain a *lease* from the other nodes, which is similar to a lock with a timeout \\[[63]()\\]. Only one node can hold the lease at any one time—thus, when a node obtains a lease, it knows that it is the leader for some amount of time, until the lease expires. In order to remain leader, the node must periodically renew the lease before it expires. If the node fails, it stops renewing the lease, so another node can take over when it expires.",
											"You can imagine the request-handling loop looking something like this:",
											"```\nwhile (true) {\n    request = getIncomingRequest();\n\n    // Ensure that the lease always has at least 10 seconds remaining\n    if (lease.expiryTimeMillis - System.currentTimeMillis() < 10000) {\n        lease = lease.renew();\n    }\n\n    if (lease.isValid()) {\n        process(request);\n    }\n}\n```",
											"What’s wrong with this code? Firstly, it’s relying on synchronized clocks: the expiry time on the lease is set by a different machine (where the expiry may be calculated as the current time plus 30 seconds, for example), and it’s being compared to the local system clock. If the clocks are out of sync by more than a few seconds, this code will start doing strange things.",
											"Secondly, even if we change the protocol to only use the local monotonic clock, there is another problem: the code assumes that very little time passes between the point that it checks the time (`System.currentTimeMillis()`) and the time when the request is processed (`process(request)`). Normally this code runs very quickly, so the 10 second buffer is more than enough to ensure that the lease doesn’t expire in the middle of processing a request.",
											"However, what if there is an unexpected pause in the execution of the program? For example, imagine the thread stops for 15 seconds around the line `lease.isValid()` before finally continuing. In that case, it’s likely that the lease will have expired by the time the request is processed, and another node has already taken over as leader. However, there is nothing to tell this thread that it was paused for so long, so this code won’t notice that the lease has expired until the next iteration of the loop—by which time it may have already done something unsafe by processing the request.",
											"Is it crazy to assume that a thread might be paused for so long? Unfortunately not. There are various reasons why this could happen:",
											"* Many programming language runtimes (such as the Java Virtual Machine) have a *garbage collector* (GC) that occasionally needs to stop all running threads. These *“stop-the-world” GC pauses* have sometimes been known to last for several minutes \\[[64]()\\]! Even so-called “concurrent” garbage collectors like the HotSpot JVM’s CMS cannot fully run in parallel with the application code—even they need to stop the world from time to time \\[[65]()\\]. Although the pauses can often be reduced by changing allocation patterns or tuning GC settings \\[[66]()\\], we must assume the worst if we want to offer robust guarantees.",
											"* In virtualized environments, a virtual machine can be *suspended* (pausing the execution of all processes and saving the contents of memory to disk) and *resumed* (restoring the contents of memory and continuing execution). This pause can occur at any time in a process’s execution and can last for an arbitrary length of time. This feature is sometimes used for *live migration* of virtual machines from one host to another without a reboot, in which case the length of the pause depends on the rate at which processes are writing to memory \\[[67]()\\].",
											"* On end-user devices such as laptops, execution may also be suspended and resumed arbitrarily, e.g., when the user closes the lid of their laptop.",
											"* When the operating system context-switches to another thread, or when the hypervisor switches to a different virtual machine (when running in a virtual machine), the currently running thread can be paused at any arbitrary point in the code. In the case of a virtual machine, the CPU time spent in other virtual machines is known as *steal time*. If the machine is under heavy load—i.e., if there is a long queue of threads waiting to run—it may take some time before the paused thread gets to run again.",
											"* If the application performs synchronous disk access, a thread may be paused waiting for a slow disk I/O operation to complete \\[[68]()\\]. In many languages, disk access can happen surprisingly, even if the code doesn’t explicitly mention file access—for example, the Java classloader lazily loads class files when they are first used, which could happen at any time in the program execution. I/O pauses and GC pauses may even conspire to combine their delays \\[[69]()\\]. If the disk is actually a network filesystem or network block device (such as Amazon’s EBS), the I/O latency is further subject to the variability of network delays \\[[29]()\\].",
											"* If the operating system is configured to allow *swapping to disk* (*paging*), a simple memory access may result in a page fault that requires a page from disk to be loaded into memory. The thread is paused while this slow I/O operation takes place. If memory pressure is high, this may in turn require a different page to be swapped out to disk. In extreme circumstances, the operating system may spend most of its time swapping pages in and out of memory and getting little actual work done (this is known as *thrashing*). To avoid this problem, paging is often disabled on server machines (if you would rather kill a process to free up memory than risk thrashing).",
											"* A Unix process can be paused by sending it the `SIGSTOP` signal, for example by pressing Ctrl-Z in a shell. This signal immediately stops the process from getting any more CPU cycles until it is resumed with `SIGCONT`, at which point it continues running where it left off. Even if your environment does not normally use `SIGSTOP`, it might be sent accidentally by an operations engineer.",
											"All of these occurrences can *preempt* the running thread at any point and resume it at some later time, without the thread even noticing. The problem is similar to making multi-threaded code on a single machine thread-safe: you can’t assume anything about timing, because arbitrary context switches and parallelism may occur.",
											"When writing multi-threaded code on a single machine, we have fairly good tools for making it thread-safe: mutexes, semaphores, atomic counters, lock-free data structures, blocking queues, and so on. Unfortunately, these tools don’t directly translate to distributed systems, because a distributed system has no shared memory—only messages sent over an unreliable network.",
											"A node in a distributed system must assume that its execution can be paused for a significant length of time at any point, even in the middle of a function. During the pause, the rest of the world keeps moving and may even declare the paused node dead because it’s not responding. Eventually, the paused node may continue running, without even noticing that it was asleep until it checks its clock sometime later.",
											[
												{
													heading: [
														"### **Response time guarantees**",
													],
													children: [
														"In many programming languages and operating systems, threads and processes may pause for an unbounded amount of time, as discussed. Those reasons for pausing *can* be eliminated if you try hard enough.",
														"Some software runs in environments where a failure to respond within a specified time can cause serious damage: computers that control aircraft, rockets, robots, cars, and other physical objects must respond quickly and predictably to their sensor inputs. In these systems, there is a specified *deadline* by which the software must respond; if it doesn’t meet the deadline, that may cause a failure of the entire system. These are so-called *hard real-time* systems.",
														[
															{
																heading: [
																	"# **Is real-time really real?**",
																],
																children: [
																	"In embedded systems, *real-time* means that a system is carefully designed and tested to meet specified timing guarantees in all circumstances. This meaning is in contrast to the more vague use of the term *real-time* on the web, where it describes servers pushing data to clients and stream processing without hard response time constraints (see [Chapter 11]()).",
																	"For example, if your car’s onboard sensors detect that you are currently experiencing a crash, you wouldn’t want the release of the airbag to be delayed due to an inopportune GC pause in the airbag release system.",
																	"Providing real-time guarantees in a system requires support from all levels of the software stack: a *real-time operating system* (RTOS) that allows processes to be scheduled with a guaranteed allocation of CPU time in specified intervals is needed; library functions must document their worst-case execution times; dynamic memory allocation may be restricted or disallowed entirely (real-time garbage collectors exist, but the application must still ensure that it doesn’t give the GC too much work to do); and an enormous amount of testing and measurement must be done to ensure that guarantees are being met.",
																	"All of this requires a large amount of additional work and severely restricts the range of programming languages, libraries, and tools that can be used (since most languages and tools do not provide real-time guarantees). For these reasons, developing real-time systems is very expensive, and they are most commonly used in safety-critical embedded devices. Moreover, “real-time” is not the same as “high-performance”—in fact, real-time systems may have lower throughput, since they have to prioritize timely responses above all else (see also [“Latency and Resource Utilization”](blob:https://johnfactotum.github.io/a501b827-14dc-4eda-a557-5a2ef326751d#sidebar_distributed_latency_utilization)).",
																	"For most server-side data processing systems, real-time guarantees are simply not economical or appropriate. Consequently, these systems must suffer the pauses and clock instability that come from operating in a non-real-time environment.",
																],
																summary: [
																	"Real-time systems prioritize timing guarantees, crucial for safety-critical devices, unlike typical server environments.",
																],
																longSummary: [
																	"In embedded systems, 'real-time' refers to systems designed to meet strict timing guarantees, unlike the looser web usage where servers push data without hard response time constraints. For instance, an airbag must deploy without delay, even during a garbage collection pause. Real-time systems require a specialized software stack, including a real-time operating system, documented worst-case execution times, limited dynamic memory allocation, and extensive testing. This complexity restricts programming languages and tools, making real-time systems costly and mainly used in safety-critical devices. Unlike 'high-performance' systems, real-time systems prioritize timely responses over throughput, making them unsuitable for most server-side data processing.",
																],
																imageUrl:
																	"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289718/blog-cover-images/hbmdqqzxdccknqczzgnz.webp",
															},
														],
													],
													summary: [
														"Real-time systems prioritize timely responses, crucial for safety-critical devices like aircraft and cars.",
													],
													longSummary: [
														"In programming, threads and processes can pause indefinitely, but eliminating these pauses is crucial in hard real-time systems, where missing deadlines can cause severe damage. These systems, controlling physical objects like aircraft and cars, must respond quickly and predictably to sensor inputs. In embedded systems, 'real-time' means meeting strict timing guarantees, unlike the looser web usage. Real-time systems require a specialized software stack, including a real-time operating system, documented execution times, limited dynamic memory use, and extensive testing. This complexity makes real-time systems costly, suitable mainly for safety-critical devices, and distinct from high-performance systems, which prioritize throughput over timing.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289648/blog-cover-images/xih8lpjbfwidotlwlcgo.webp",
												},
												{
													heading: [
														"### **Limiting the impact of garbage collection**",
													],
													children: [
														"The negative effects of process pauses can be mitigated without resorting to expensive real-time scheduling guarantees. Language runtimes have some flexibility around when they schedule garbage collections, because they can track the rate of object allocation and the remaining free memory over time.",
														"An emerging idea is to treat GC pauses like brief planned outages of a node, and to let other nodes handle requests from clients while one node is collecting its garbage. If the runtime can warn the application that a node soon requires a GC pause, the application can stop sending new requests to that node, wait for it to finish processing outstanding requests, and then perform the GC while no requests are in progress. This trick hides GC pauses from clients and reduces the high percentiles of response time \\[[70](), [71]()\\]. Some latency-sensitive financial trading systems \\[[72]()\\] use this approach.",
														"A variant of this idea is to use the garbage collector only for short-lived objects (which are fast to collect) and to restart processes periodically, before they accumulate enough long-lived objects to require a full GC of long-lived objects \\[[65](), [73]()\\]. One node can be restarted at a time, and traffic can be shifted away from the node before the planned restart, like in a rolling upgrade (see [Chapter 4]()).",
														"These measures cannot fully prevent garbage collection pauses, but they can usefully reduce their impact on the application.",
													],
													summary: [
														"Strategic GC scheduling minimizes pause impact, enhancing performance in latency-sensitive systems.",
													],
													longSummary: [
														"You can mitigate the negative effects of process pauses without costly real-time scheduling by strategically managing garbage collection (GC). Language runtimes can track memory allocation to schedule GC like brief planned outages, allowing other nodes to handle requests during pauses. This approach, used in latency-sensitive financial trading systems, hides GC pauses from clients and reduces high response time percentiles. Another method involves using GC only for short-lived objects and periodically restarting processes to prevent the accumulation of long-lived objects. While these strategies can't completely eliminate GC pauses, they effectively reduce their impact on applications.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289651/blog-cover-images/yobkh7jorlgqz1hoe1rg.webp",
												},
											],
										],
										summary: [
											"Distributed systems risk failure from clock issues and pauses; strategic GC can mitigate impacts.",
										],
										longSummary: [
											"Distributed systems struggle with clock synchronization, especially when a database leader node must renew its lease. This is risky due to unexpected thread pauses from garbage collection, VM suspension, or disk I/O, which can cause nodes to process requests after their lease expires. Unlike single-machine systems, distributed systems rely on unreliable network messages and lack shared memory, making them susceptible to pauses. Real-time systems in safety-critical applications require costly timing guarantees. However, server-side systems can mitigate pause effects by scheduling garbage collections and treating pauses as planned outages, allowing other nodes to manage requests.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289611/blog-cover-images/y3zxbb2hmb7ohnzmgdyb.webp",
									},
								],
							],
							summary: [
								"Clocks in distributed systems are complex, with synchronization challenges and potential pitfalls.",
							],
							longSummary: [
								"Clocks are vital for measuring time, but distributed systems struggle with network delays and clock inaccuracies. Hardware clocks can drift, and Network Time Protocol (NTP) isn't always reliable. Time-of-day clocks, synced with NTP, can jump backward, making them unsuitable for measuring elapsed time. Monotonic clocks move forward, ideal for intervals but not cross-machine comparisons. Clock issues can disrupt event ordering, as seen in multi-leader databases. Logical clocks and Google's TrueTime API offer better solutions. Distributed systems must manage clock inaccuracies and process pauses from garbage collection or virtual machine suspension, unlike real-time systems needing strict timing guarantees.",
							],
							imageUrl:
								"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289550/blog-cover-images/v57n2oybo5ejg7ebbzqp.webp",
						},
						{
							heading: ["# **Knowledge, Truth, and Lies**"],
							children: [
								"So far in this chapter we have explored the ways in which distributed systems are different from programs running on a single computer: there is no shared memory, only message passing via an unreliable network with variable delays, and the systems may suffer from partial failures, unreliable clocks, and processing pauses.",
								"The consequences of these issues are profoundly disorienting if you’re not used to distributed systems. A node in the network cannot *know* anything for sure—it can only make guesses based on the messages it receives (or doesn’t receive) via the network. A node can only find out what state another node is in (what data it has stored, whether it is correctly functioning, etc.) by exchanging messages with it. If a remote node doesn’t respond, there is no way of knowing what state it is in, because problems in the network cannot reliably be distinguished from problems at a node.",
								"Discussions of these systems border on the philosophical: What do we know to be true or false in our system? How sure can we be of that knowledge, if the mechanisms for perception and measurement are unreliable? Should software systems obey the laws that we expect of the physical world, such as cause and effect?",
								"Fortunately, we don’t need to go as far as figuring out the meaning of life. In a distributed system, we can state the assumptions we are making about the behavior (the *system model*) and design the actual system in such a way that it meets those assumptions. Algorithms can be proved to function correctly within a certain system model. This means that reliable behavior is achievable, even if the underlying system model provides very few guarantees.",
								"However, although it is possible to make software well behaved in an unreliable system model, it is not straightforward to do so. In the rest of this chapter we will further explore the notions of knowledge and truth in distributed systems, which will help us think about the kinds of assumptions we can make and the guarantees we may want to provide. In [Chapter 9]() we will proceed to look at some examples of distributed systems, algorithms that provide particular guarantees under particular assumptions.",
								[
									{
										heading: [
											"## **The Truth Is Defined by the Majority**",
										],
										children: [
											"Imagine a network with an asymmetric fault: a node is able to receive all messages sent to it, but any outgoing messages from that node are dropped or delayed \\[[19]()\\]. Even though that node is working perfectly well, and is receiving requests from other nodes, the other nodes cannot hear its responses. After some timeout, the other nodes declare it dead, because they haven’t heard from the node. The situation unfolds like a nightmare: the semi-disconnected node is dragged to the graveyard, kicking and screaming “I’m not dead!”—but since nobody can hear its screaming, the funeral procession continues with stoic determination.",
											"In a slightly less nightmarish scenario, the semi-disconnected node may notice that the messages it is sending are not being acknowledged by other nodes, and so realize that there must be a fault in the network. Nevertheless, the node is wrongly declared dead by the other nodes, and the semi-disconnected node cannot do anything about it.",
											"As a third scenario, imagine a node that experiences a long stop-the-world garbage collection pause. All of the node’s threads are preempted by the GC and paused for one minute, and consequently, no requests are processed and no responses are sent. The other nodes wait, retry, grow impatient, and eventually declare the node dead and load it onto the hearse. Finally, the GC finishes and the node’s threads continue as if nothing had happened. The other nodes are surprised as the supposedly dead node suddenly raises its head out of the coffin, in full health, and starts cheerfully chatting with bystanders. At first, the GCing node doesn’t even realize that an entire minute has passed and that it was declared dead—from its perspective, hardly any time has passed since it was last talking to the other nodes.",
											"The moral of these stories is that a node cannot necessarily trust its own judgment of a situation. A distributed system cannot exclusively rely on a single node, because a node may fail at any time, potentially leaving the system stuck and unable to recover. Instead, many distributed algorithms rely on a *quorum*, that is, voting among the nodes (see [“Quorums for reading and writing”]()): decisions require some minimum number of votes from several nodes in order to reduce the dependence on any one particular node.",
											"That includes decisions about declaring nodes dead. If a quorum of nodes declares another node dead, then it must be considered dead, even if that node still very much feels alive. The individual node must abide by the quorum decision and step down.",
											"Most commonly, the quorum is an absolute majority of more than half the nodes (although other kinds of quorums are possible). A majority quorum allows the system to continue working if individual nodes have failed (with three nodes, one failure can be tolerated; with five nodes, two failures can be tolerated). However, it is still safe, because there can only be only one majority in the system—there cannot be two majorities with conflicting decisions at the same time. We will discuss the use of quorums in more detail when we get to *consensus algorithms* in [Chapter 9]().",
											[
												{
													heading: [
														"### **The leader and the lock**",
													],
													children: [
														"Frequently, a system requires there to be only one of some thing. For example:",
														"* Only one node is allowed to be the leader for a database partition, to avoid split brain (see [“Handling Node Outages”]()).",
														"* Only one transaction or client is allowed to hold the lock for a particular resource or object, to prevent concurrently writing to it and corrupting it.",
														"* Only one user is allowed to register a particular username, because a username must uniquely identify a user.",
														"Implementing this in a distributed system requires care: even if a node believes that it is “the chosen one” (the leader of the partition, the holder of the lock, the request handler of the user who successfully grabbed the username), that doesn’t necessarily mean a quorum of nodes agrees! A node may have formerly been the leader, but if the other nodes declared it dead in the meantime (e.g., due to a network interruption or GC pause), it may have been demoted and another leader may have already been elected.",
														"If a node continues acting as the chosen one, even though the majority of nodes have declared it dead, it could cause problems in a system that is not carefully designed. Such a node could send messages to other nodes in its self-appointed capacity, and if other nodes believe it, the system as a whole may do something incorrect.",
														"For example, [Figure 8-4](blob:https://johnfactotum.github.io/a501b827-14dc-4eda-a557-5a2ef326751d#fig_distributed_io_fencing) shows a data corruption bug due to an incorrect implementation of locking. (The bug is not theoretical: HBase used to have this problem \\[[74](), [75]()\\].) Say you want to ensure that a file in a storage service can only be accessed by one client at a time, because if multiple clients tried to write to it, the file would become corrupted. You try to implement this by requiring a client to obtain a lease from a lock service before accessing the file.",
														"![ddia 0804](blob:https://johnfactotum.github.io/63991de3-3d46-4840-b59d-cf86ef3eb359)",
														"###### *Figure 8-4. Incorrect implementation of a distributed lock: client 1 believes that it still has a valid lease, even though it has expired, and thus corrupts a file in storage.*",
														"The problem is an example of what we discussed in [“Process Pauses”](blob:https://johnfactotum.github.io/a501b827-14dc-4eda-a557-5a2ef326751d#sec_distributed_clocks_pauses): if the client holding the lease is paused for too long, its lease expires. Another client can obtain a lease for the same file, and start writing to the file. When the paused client comes back, it believes (incorrectly) that it still has a valid lease and proceeds to also write to the file. As a result, the clients’ writes clash and corrupt the file.",
													],
													summary: [
														"Ensuring a single leader in distributed systems is crucial to prevent data corruption.",
													],
													longSummary: [
														"In distributed systems, ensuring a single entity, like a leader node or a lock holder, is crucial but challenging. A node may mistakenly believe it is the leader due to network issues or pauses, even if a quorum has elected a new leader. This misbelief can lead to issues like data corruption, as illustrated when a client with an expired lease continues writing to a file while another client with a new lease does the same. Such scenarios occur when a paused client resumes, unaware its lease expired, leading to conflicting actions and potential system failures.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289654/blog-cover-images/zggg0r2ycwioffe9ftsz.webp",
												},
												{
													heading: [
														"### **Fencing tokens**",
													],
													children: [
														"When using a lock or lease to protect access to some resource, such as the file storage in [Figure 8-4](blob:https://johnfactotum.github.io/a501b827-14dc-4eda-a557-5a2ef326751d#fig_distributed_io_fencing), we need to ensure that a node that is under a false belief of being “the chosen one” cannot disrupt the rest of the system. A fairly simple technique that achieves this goal is called *fencing*, and is illustrated in [Figure 8-5](blob:https://johnfactotum.github.io/a501b827-14dc-4eda-a557-5a2ef326751d#fig_distributed_io_fencing_tokens).",
														"![ddia 0805](blob:https://johnfactotum.github.io/729ed469-cc90-469f-a622-a8646187ef72)",
														"###### *Figure 8-5. Making access to storage safe by allowing writes only in the order of increasing fencing tokens.*",
														"Let’s assume that every time the lock server grants a lock or lease, it also returns a *fencing token*, which is a number that increases every time a lock is granted (e.g., incremented by the lock service). We can then require that every time a client sends a write request to the storage service, it must include its current fencing token.",
														"In [Figure 8-5](blob:https://johnfactotum.github.io/a501b827-14dc-4eda-a557-5a2ef326751d#fig_distributed_io_fencing_tokens), client 1 acquires the lease with a token of 33, but then it goes into a long pause and the lease expires. Client 2 acquires the lease with a token of 34 (the number always increases) and then sends its write request to the storage service, including the token of 34. Later, client 1 comes back to life and sends its write to the storage service, including its token value 33. However, the storage server remembers that it has already processed a write with a higher token number (34), and so it rejects the request with token 33.",
														"If ZooKeeper is used as lock service, the transaction ID `zxid` or the node version `cversion` can be used as fencing token. Since they are guaranteed to be monotonically increasing, they have the required properties \\[[74]()\\].",
														"Note that this mechanism requires the resource itself to take an active role in checking tokens by rejecting any writes with an older token than one that has already been processed—it is not sufficient to rely on clients checking their lock status themselves. For resources that do not explicitly support fencing tokens, you might still be able work around the limitation (for example, in the case of a file storage service you could include the fencing token in the filename). However, some kind of check is necessary to avoid processing requests outside of the lock’s protection.",
														"Checking a token on the server side may seem like a downside, but it is arguably a good thing: it is unwise for a service to assume that its clients will always be well behaved, because the clients are often run by people whose priorities are very different from the priorities of the people running the service \\[[76]()\\]. Thus, it is a good idea for any service to protect itself from accidentally abusive clients.",
													],
													summary: [
														"Prevent system chaos: Use fencing tokens to ensure only valid writes succeed.",
													],
													longSummary: [
														"To prevent disruptions from nodes mistakenly believing they hold a lock, fencing is used. The lock server issues an increasing fencing token with each lock grant, which clients must include in write requests. If a client pauses and its lease expires, another client can acquire the lock with a higher token. When the paused client resumes and tries to write with its outdated token, the storage server rejects it, ensuring data integrity. ZooKeeper's transaction ID or node version can serve as fencing tokens, and server-side token verification is crucial to guard against abusive clients.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289655/blog-cover-images/cxjzzgm4mutcrzufvsqn.webp",
												},
											],
										],
										summary: [
											'In distributed systems, quorums prevent "zombie" nodes from causing chaos despite feeling alive.',
										],
										longSummary: [
											"In distributed systems, nodes can suffer asymmetric faults, receiving messages but having their outgoing messages dropped, leading others to wrongly declare them dead. This can result from network issues or long garbage collection pauses. Quorums, where a majority of nodes agree on a node's status, maintain system safety. Even if a node believes it's active, it must step down if a quorum declares it dead to avoid data corruption. Fencing with increasing tokens ensures nodes with expired leases can't disrupt the system, as the storage service rejects outdated writes, protecting against disruptive clients.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289613/blog-cover-images/gxfilrjszdt9bpawzdte.webp",
									},
									{
										heading: ["## **Byzantine Faults**"],
										children: [
											"Fencing tokens can detect and block a node that is *inadvertently* acting in error (e.g., because it hasn’t yet found out that its lease has expired). However, if the node deliberately wanted to subvert the system’s guarantees, it could easily do so by sending messages with a fake fencing token.",
											"In this book we assume that nodes are unreliable but honest: they may be slow or never respond (due to a fault), and their state may be outdated (due to a GC pause or network delays), but we assume that if a node *does* respond, it is telling the “truth”: to the best of its knowledge, it is playing by the rules of the protocol.",
											"Distributed systems problems become much harder if there is a risk that nodes may “lie” (send arbitrary faulty or corrupted responses)—for example, if a node may claim to have received a particular message when in fact it didn’t. Such behavior is known as a *Byzantine fault*, and the problem of reaching consensus in this untrusting environment is known as the *Byzantine Generals Problem* \\[[77]()\\].",
											[
												{
													heading: [
														"##### **The Byzantine Generals Problem**",
													],
													children: [
														"The Byzantine Generals Problem is a generalization of the so-called *Two Generals Problem* \\[[78]()\\], which imagines a situation in which two army generals need to agree on a battle plan. As they have set up camp on two different sites, they can only communicate by messenger, and the messengers sometimes get delayed or lost (like packets in a network). We will discuss this problem of *consensus* in [Chapter 9]().",
														"In the Byzantine version of the problem, there are *n* generals who need to agree, and their endeavor is hampered by the fact that there are some traitors in their midst. Most of the generals are loyal, and thus send truthful messages, but the traitors may try to deceive and confuse the others by sending fake or untrue messages (while trying to remain undiscovered). It is not known in advance who the traitors are.",
														"Byzantium was an ancient Greek city that later became Constantinople, in the place which is now Istanbul in Turkey. There isn’t any historic evidence that the generals of Byzantium were any more prone to intrigue and conspiracy than those elsewhere. Rather, the name is derived from *Byzantine* in the sense of *excessively complicated, bureaucratic, devious*, which was used in politics long before computers \\[[79]()\\]. Lamport wanted to choose a nationality that would not offend any readers, and he was advised that calling it *The Albanian Generals Problem* was not such a good idea \\[[80]()\\].",
														"A system is *Byzantine fault-tolerant* if it continues to operate correctly even if some of the nodes are malfunctioning and not obeying the protocol, or if malicious attackers are interfering with the network. This concern is relevant in certain specific circumstances. For example:",
														"* In aerospace environments, the data in a computer’s memory or CPU register could become corrupted by radiation, leading it to respond to other nodes in arbitrarily unpredictable ways. Since a system failure would be very expensive (e.g., an aircraft crashing and killing everyone on board, or a rocket colliding with the International Space Station), flight control systems must tolerate Byzantine faults \\[[81](), [82]()\\].",
														"* In a system with multiple participating organizations, some participants may attempt to cheat or defraud others. In such circumstances, it is not safe for a node to simply trust another node’s messages, since they may be sent with malicious intent. For example, peer-to-peer networks like Bitcoin and other blockchains can be considered to be a way of getting mutually untrusting parties to agree whether a transaction happened or not, without relying on a central authority \\[[83]()\\].",
														"However, in the kinds of systems we discuss in this book, we can usually safely assume that there are no Byzantine faults. In your datacenter, all the nodes are controlled by your organization (so they can hopefully be trusted) and radiation levels are low enough that memory corruption is not a major problem. Protocols for making systems Byzantine fault-tolerant are quite complicated \\[[84]()\\], and fault-tolerant embedded systems rely on support from the hardware level \\[[81]()\\]. In most server-side data systems, the cost of deploying Byzantine fault-tolerant solutions makes them impractical.",
														"Web applications do need to expect arbitrary and malicious behavior of clients that are under end-user control, such as web browsers. This is why input validation, sanitization, and output escaping are so important: to prevent SQL injection and cross-site scripting, for example. However, we typically don’t use Byzantine fault-tolerant protocols here, but simply make the server the authority on deciding what client behavior is and isn’t allowed. In peer-to-peer networks, where there is no such central authority, Byzantine fault tolerance is more relevant.",
														"A bug in the software could be regarded as a Byzantine fault, but if you deploy the same software to all nodes, then a Byzantine fault-tolerant algorithm cannot save you. Most Byzantine fault-tolerant algorithms require a supermajority of more than two-thirds of the nodes to be functioning correctly (i.e., if you have four nodes, at most one may malfunction). To use this approach against bugs, you would have to have four independent implementations of the same software and hope that a bug only appears in one of the four implementations.",
														"Similarly, it would be appealing if a protocol could protect us from vulnerabilities, security compromises, and malicious attacks. Unfortunately, this is not realistic either: in most systems, if an attacker can compromise one node, they can probably compromise all of them, because they are probably running the same software. Thus, traditional mechanisms (authentication, access control, encryption, firewalls, and so on) continue to be the main protection against attackers.",
													],
													summary: [
														"Byzantine fault tolerance ensures system reliability despite deceptive nodes and network interference.",
													],
													longSummary: [
														"The Byzantine Generals Problem involves multiple generals needing to agree on a battle plan despite some being traitors sending deceptive messages. A system is Byzantine fault-tolerant if it functions correctly even with malfunctioning nodes or network interference, crucial in aerospace and blockchain networks. However, in most server-side data systems, Byzantine faults are unlikely since nodes are controlled by one organization and radiation levels are low. Byzantine fault-tolerant protocols are complex and impractical for most datacenter systems. Web applications handle malicious client behavior through validation, but these protocols don't protect against software bugs or widespread security compromises.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289655/blog-cover-images/sxni5i8rvwjdw2fljcm7.webp",
												},
											],
										],
										summary: [
											"Byzantine fault tolerance tackles unreliable nodes and deception in complex distributed systems.",
										],
										longSummary: [
											"Fencing tokens can block erroneous nodes but not deliberate subversion. This book assumes nodes are unreliable yet honest, meaning they may be slow or outdated but truthful. The challenge arises with Byzantine faults, where nodes send deceptive responses. The Byzantine Generals Problem highlights the need for consensus despite misleading messages. Byzantine fault tolerance is vital in aerospace and blockchain, where data corruption or cheating is possible. However, in most server-side systems, Byzantine faults are rare due to controlled environments. These protocols are complex and impractical for datacenters and can't guard against widespread software bugs or security breaches.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289615/blog-cover-images/ymxbin4xvni3n2vwfasv.webp",
									},
									{
										heading: [
											"### **Weak forms of lying**",
										],
										children: [
											"Although we assume that nodes are generally honest, it can be worth adding mechanisms to software that guard against weak forms of “lying”—for example, invalid messages due to hardware issues, software bugs, and misconfiguration. Such protection mechanisms are not full-blown Byzantine fault tolerance, as they would not withstand a determined adversary, but they are nevertheless simple and pragmatic steps toward better reliability. For example:",
											"* Network packets do sometimes get corrupted due to hardware issues or bugs in operating systems, drivers, routers, etc. Usually, corrupted packets are caught by the checksums built into TCP and UDP, but sometimes they evade detection \\[[85](), [86](), [87]()\\]. Simple measures are usually sufficient protection against such corruption, such as checksums in the application-level protocol.",
											"* A publicly accessible application must carefully sanitize any inputs from users, for example checking that a value is within a reasonable range and limiting the size of strings to prevent denial of service through large memory allocations. An internal service behind a firewall may be able to get away with less strict checks on inputs, but some basic sanity-checking of values (e.g., in protocol parsing \\[[85]()\\]) is a good idea.",
											"* NTP clients can be configured with multiple server addresses. When synchronizing, the client contacts all of them, estimates their errors, and checks that a majority of servers agree on some time range. As long as most of the servers are okay, a misconfigured NTP server that is reporting an incorrect time is detected as an outlier and is excluded from synchronization \\[[37]()\\]. The use of multiple servers makes NTP more robust than if it only uses a single server.",
										],
										summary: [
											"Enhance reliability: implement checksums, sanitize inputs, and use multiple NTP servers for accuracy.",
										],
										longSummary: [
											'While nodes are generally honest, it\'s important to implement mechanisms to guard against minor "lying" due to hardware issues, software bugs, and misconfiguration. These measures, though not full Byzantine fault tolerance, enhance reliability. Network packets can be corrupted despite TCP/UDP checksums, so application-level checksums are beneficial. Public applications should sanitize user inputs by checking value ranges and limiting string sizes to prevent denial of service, while internal services should still perform basic sanity-checking. NTP clients can be configured with multiple server addresses to exclude outliers, enhancing robustness compared to relying on a single server.',
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289618/blog-cover-images/itsjbbijk6u8uffn5e0w.webp",
									},
									{
										heading: [
											"## **System Model and Reality**",
										],
										children: [
											"Many algorithms have been designed to solve distributed systems problems—for example, we will examine solutions for the consensus problem in [Chapter 9](). In order to be useful, these algorithms need to tolerate the various faults of distributed systems that we discussed in this chapter.",
											"Algorithms need to be written in a way that does not depend too heavily on the details of the hardware and software configuration on which they are run. This in turn requires that we somehow formalize the kinds of faults that we expect to happen in a system. We do this by defining a *system model*, which is an abstraction that describes what things an algorithm may assume.",
											"With regard to timing assumptions, three system models are in common use:",
											"Synchronous model",
											"The synchronous model assumes bounded network delay, bounded process pauses, and bounded clock error. This does not imply exactly synchronized clocks or zero network delay; it just means you know that network delay, pauses, and clock drift will never exceed some fixed upper bound \\[[88]()\\]. The synchronous model is not a realistic model of most practical systems, because (as discussed in this chapter) unbounded delays and pauses do occur.",
											"Partially synchronous model",
											"Partial synchrony means that a system behaves like a synchronous system *most of the time*, but it sometimes exceeds the bounds for network delay, process pauses, and clock drift \\[[88]()\\]. This is a realistic model of many systems: most of the time, networks and processes are quite well behaved—otherwise we would never be able to get anything done—but we have to reckon with the fact that any timing assumptions may be shattered occasionally. When this happens, network delay, pauses, and clock error may become arbitrarily large.",
											"Asynchronous model",
											"In this model, an algorithm is not allowed to make any timing assumptions—in fact, it does not even have a clock (so it cannot use timeouts). Some algorithms can be designed for the asynchronous model, but it is very restrictive.",
											"Moreover, besides timing issues, we have to consider node failures. The three most common system models for nodes are:",
											"Crash-stop faults",
											"In the crash-stop model, an algorithm may assume that a node can fail in only one way, namely by crashing. This means that the node may suddenly stop responding at any moment, and thereafter that node is gone forever—it never comes back.",
											"Crash-recovery faults",
											"We assume that nodes may crash at any moment, and perhaps start responding again after some unknown time. In the crash-recovery model, nodes are assumed to have stable storage (i.e., nonvolatile disk storage) that is preserved across crashes, while the in-memory state is assumed to be lost.",
											"Byzantine (arbitrary) faults",
											"Nodes may do absolutely anything, including trying to trick and deceive other nodes, as described in the last section.",
											"For modeling real systems, the partially synchronous model with crash-recovery faults is generally the most useful model. But how do distributed algorithms cope with that model?",
											[
												{
													heading: [
														"### **Correctness of an algorithm**",
													],
													children: [
														"To define what it means for an algorithm to be *correct*, we can describe its *properties*. For example, the output of a sorting algorithm has the property that for any two distinct elements of the output list, the element further to the left is smaller than the element further to the right. That is simply a formal way of defining what it means for a list to be sorted.",
														"Similarly, we can write down the properties we want of a distributed algorithm to define what it means to be correct. For example, if we are generating fencing tokens for a lock (see [“Fencing tokens”](blob:https://johnfactotum.github.io/a501b827-14dc-4eda-a557-5a2ef326751d#sec_distributed_fencing_tokens)), we may require the algorithm to have the following properties:",
														"Uniqueness",
														"No two requests for a fencing token return the same value.",
														"Monotonic sequence",
														"If request *x* returned token *tx*, and request *y* returned token *ty*, and *x* completed before *y* began, then *tx* < *ty*.",
														"Availability",
														"A node that requests a fencing token and does not crash eventually receives a response.",
														"An algorithm is correct in some system model if it always satisfies its properties in all situations that we assume may occur in that system model. But how does this make sense? If all nodes crash, or all network delays suddenly become infinitely long, then no algorithm will be able to get anything done.",
													],
													summary: [
														"Discover how algorithm correctness hinges on unique properties like uniqueness, monotonicity, and availability.",
													],
													longSummary: [
														"To determine an algorithm's correctness, we examine its properties. For sorting algorithms, this means elements on the left are smaller than those on the right. Distributed algorithms have properties like Uniqueness (no two requests return the same value), Monotonic sequence (earlier requests return smaller tokens), and Availability (non-crashing nodes eventually receive responses). An algorithm is correct if it consistently meets these properties in all scenarios, even with challenges like node crashes or network delays.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289656/blog-cover-images/hqizqh7tpiymrm3i3rpm.webp",
												},
												{
													heading: [
														"### **Safety and liveness**",
													],
													children: [
														"To clarify the situation, it is worth distinguishing between two different kinds of properties: *safety* and *liveness* properties. In the example just given, *uniqueness* and *monotonic sequence* are safety properties, but *availability* is a liveness property.",
														"What distinguishes the two kinds of properties? A giveaway is that liveness properties often include the word “eventually” in their definition. (And yes, you guessed it—*eventual consistency* is a liveness property \\[[89]()\\].)",
														"Safety is often informally defined as *nothing bad happens*, and liveness as *something good eventually happens*. However, it’s best to not read too much into those informal definitions, because the meaning of good and bad is subjective. The actual definitions of safety and liveness are precise and mathematical \\[[90]()\\]:",
														"* If a safety property is violated, we can point at a particular point in time at which it was broken (for example, if the uniqueness property was violated, we can identify the particular operation in which a duplicate fencing token was returned). After a safety property has been violated, the violation cannot be undone—the damage is already done.",
														"* A liveness property works the other way round: it may not hold at some point in time (for example, a node may have sent a request but not yet received a response), but there is always hope that it may be satisfied in the future (namely by receiving a response).",
														"An advantage of distinguishing between safety and liveness properties is that it helps us deal with difficult system models. For distributed algorithms, it is common to require that safety properties *always* hold, in all possible situations of a system model \\[[88]()\\]. That is, even if all nodes crash, or the entire network fails, the algorithm must nevertheless ensure that it does not return a wrong result (i.e., that the safety properties remain satisfied).",
														"However, with liveness properties we are allowed to make caveats: for example, we could say that a request needs to receive a response only if a majority of nodes have not crashed, and only if the network eventually recovers from an outage. The definition of the partially synchronous model requires that eventually the system returns to a synchronous state—that is, any period of network interruption lasts only for a finite duration and is then repaired.",
													],
													summary: [
														'Distinguish safety and liveness: "nothing bad happens" vs. "something good eventually happens."',
													],
													longSummary: [
														'To clarify, it\'s important to distinguish between safety and liveness properties. Safety properties, such as uniqueness and monotonic sequence, ensure "nothing bad happens" and cannot be undone once violated. Liveness properties, like availability and eventual consistency, ensure "something good eventually happens" and can be satisfied in the future even if they don\'t hold at a specific moment. In distributed algorithms, safety must always be maintained, even during crashes or network failures. Liveness allows for exceptions, requiring conditions like a majority of nodes being operational and eventual network recovery, as outlined in the partially synchronous model.',
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289659/blog-cover-images/pndt7osaoih2rhr2cdcz.webp",
												},
												{
													heading: [
														"### **Mapping system models to the real world**",
													],
													children: [
														"Safety and liveness properties and system models are very useful for reasoning about the correctness of a distributed algorithm. However, when implementing an algorithm in practice, the messy facts of reality come back to bite you again, and it becomes clear that the system model is a simplified abstraction of reality.",
														"For example, algorithms in the crash-recovery model generally assume that data in stable storage survives crashes. However, what happens if the data on disk is corrupted, or the data is wiped out due to hardware error or misconfiguration \\[[91]()\\]? What happens if a server has a firmware bug and fails to recognize its hard drives on reboot, even though the drives are correctly attached to the server \\[[92]()\\]?",
														"Quorum algorithms (see [“Quorums for reading and writing”]()) rely on a node remembering the data that it claims to have stored. If a node may suffer from amnesia and forget previously stored data, that breaks the quorum condition, and thus breaks the correctness of the algorithm. Perhaps a new system model is needed, in which we assume that stable storage mostly survives crashes, but may sometimes be lost. But that model then becomes harder to reason about.",
														'The theoretical description of an algorithm can declare that certain things are simply assumed not to happen—and in non-Byzantine systems, we do have to make some assumptions about faults that can and cannot happen. However, a real implementation may still have to include code to handle the case where something happens that was assumed to be impossible, even if that handling boils down to `printf("Sucks to be you")` and `exit(666)`—i.e., letting a human operator clean up the mess \\[[93]()\\]. (This is arguably the difference between computer science and software engineering.)',
														"That is not to say that theoretical, abstract system models are worthless—quite the opposite. They are incredibly helpful for distilling down the complexity of real systems to a manageable set of faults that we can reason about, so that we can understand the problem and try to solve it systematically. We can prove algorithms correct by showing that their properties always hold in some system model.",
														"Proving an algorithm correct does not mean its *implementation* on a real system will necessarily always behave correctly. But it’s a very good first step, because the theoretical analysis can uncover problems in an algorithm that might remain hidden for a long time in a real system, and that only come to bite you when your assumptions (e.g., about timing) are defeated due to unusual circumstances. Theoretical analysis and empirical testing are equally important.",
													],
													summary: [
														"Abstract models simplify distributed systems, but real-world failures challenge their assumptions.",
													],
													longSummary: [
														"Safety and liveness properties, along with system models, are crucial for understanding distributed algorithm correctness, but real-world complexities often challenge these abstractions. In the crash-recovery model, stable storage is assumed to survive crashes, yet corruption or hardware errors can undermine this. Quorum algorithms depend on nodes retaining data, but amnesia can disrupt this. While theoretical algorithms may dismiss certain failures, real implementations must address them, even if only to fail gracefully. Despite these challenges, abstract models simplify complex systems, and both theoretical analysis and empirical testing are vital for uncovering hidden issues.",
													],
													imageUrl:
														"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289659/blog-cover-images/zug0xmecvabsumlmwvnm.webp",
												},
											],
										],
										summary: [
											"Explore distributed algorithms: balancing safety, liveness, and real-world challenges in system models.",
										],
										longSummary: [
											"Distributed systems algorithms must handle faults within synchronous, partially synchronous, and asynchronous models. The synchronous model assumes bounded delays, while the asynchronous model has no timing assumptions. The partially synchronous model is more realistic, allowing for occasional deviations. Node failures include crash-stop, crash-recovery, and Byzantine faults. Algorithm correctness relies on safety (e.g., uniqueness) and liveness (e.g., availability). Safety must always be maintained, while liveness can be eventually achieved. Although theoretical models simplify complexities, real-world implementations must address unexpected failures, making both theoretical analysis and empirical testing crucial.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289620/blog-cover-images/nblcnaramjeneevgqhxo.webp",
									},
								],
							],
							summary: [
								"Distributed systems face unique challenges: unreliable networks, partial failures, and philosophical questions of truth.",
							],
							longSummary: [
								"Distributed systems face challenges like unreliable networks, partial failures, and processing pauses, leading to uncertainty. Nodes use quorums for decision-making due to potential failures or network issues. Reliable systems require careful design, including fencing tokens to prevent disruptions from outdated nodes. While Byzantine faults are rare, systems must guard against hardware issues and software bugs. Models like partially synchronous with crash-recovery faults define algorithm correctness through safety and liveness properties. Despite theoretical limitations, these models simplify and aid reasoning about distributed systems, with both theoretical analysis and empirical testing crucial for uncovering hidden problems.",
							],
							imageUrl:
								"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289555/blog-cover-images/h0r3zw0otyqtneyiz4mw.webp",
						},
						{
							heading: ["# **Summary**"],
							children: [
								"In this chapter we have discussed a wide range of problems that can occur in distributed systems, including:",
								"* Whenever you try to send a packet over the network, it may be lost or arbitrarily delayed. Likewise, the reply may be lost or delayed, so if you don’t get a reply, you have no idea whether the message got through.",
								"* A node’s clock may be significantly out of sync with other nodes (despite your best efforts to set up NTP), it may suddenly jump forward or back in time, and relying on it is dangerous because you most likely don’t have a good measure of your clock’s error interval.",
								"* A process may pause for a substantial amount of time at any point in its execution (perhaps due to a stop-the-world garbage collector), be declared dead by other nodes, and then come back to life again without realizing that it was paused.",
								"The fact that such *partial failures* can occur is the defining characteristic of distributed systems. Whenever software tries to do anything involving other nodes, there is the possibility that it may occasionally fail, or randomly go slow, or not respond at all (and eventually time out). In distributed systems, we try to build tolerance of partial failures into software, so that the system as a whole may continue functioning even when some of its constituent parts are broken.",
								"To tolerate faults, the first step is to *detect* them, but even that is hard. Most systems don’t have an accurate mechanism of detecting whether a node has failed, so most distributed algorithms rely on timeouts to determine whether a remote node is still available. However, timeouts can’t distinguish between network and node failures, and variable network delay sometimes causes a node to be falsely suspected of crashing. Moreover, sometimes a node can be in a degraded state: for example, a Gigabit network interface could suddenly drop to 1 Kb/s throughput due to a driver bug \\[[94]()\\]. Such a node that is “limping” but not dead can be even more difficult to deal with than a cleanly failed node.",
								"Once a fault is detected, making a system tolerate it is not easy either: there is no global variable, no shared memory, no common knowledge or any other kind of shared state between the machines. Nodes can’t even agree on what time it is, let alone on anything more profound. The only way information can flow from one node to another is by sending it over the unreliable network. Major decisions cannot be safely made by a single node, so we require protocols that enlist help from other nodes and try to get a quorum to agree.",
								"If you’re used to writing software in the idealized mathematical perfection of a single computer, where the same operation always deterministically returns the same result, then moving to the messy physical reality of distributed systems can be a bit of a shock. Conversely, distributed systems engineers will often regard a problem as trivial if it can be solved on a single computer \\[[5]()\\], and indeed a single computer can do a lot nowadays \\[[95]()\\]. If you can avoid opening Pandora’s box and simply keep things on a single machine, it is generally worth doing so.",
								"However, as discussed in the introduction to [Part II](), scalability is not the only reason for wanting to use a distributed system. Fault tolerance and low latency (by placing data geographically close to users) are equally important goals, and those things cannot be achieved with a single node.",
								"In this chapter we also went on some tangents to explore whether the unreliability of networks, clocks, and processes is an inevitable law of nature. We saw that it isn’t: it is possible to give hard real-time response guarantees and bounded delays in networks, but doing so is very expensive and results in lower utilization of hardware resources. Most non-safety-critical systems choose cheap and unreliable over expensive and reliable.",
								"We also touched on supercomputers, which assume reliable components and thus have to be stopped and restarted entirely when a component does fail. By contrast, distributed systems can run forever without being interrupted at the service level, because all faults and maintenance can be handled at the node level—at least in theory. (In practice, if a bad configuration change is rolled out to all nodes, that will still bring a distributed system to its knees.)",
								"This chapter has been all about problems, and has given us a bleak outlook. In the next chapter we will move on to solutions, and discuss some algorithms that have been designed to cope with all the problems in distributed systems.",
							],
							summary: [
								"Explore distributed systems' challenges: unreliable networks, fault tolerance, and perpetual operation strategies.",
							],
							longSummary: [
								"This chapter delves into the challenges of distributed systems, including unreliable network communication, clock synchronization issues, and process pauses. These systems face partial failures, where components may fail, slow down, or become unresponsive. Fault detection is tricky, often relying on timeouts that can't distinguish between network and node failures. Building fault tolerance requires collaborative protocols, as there's no shared state. Despite these challenges, distributed systems are crucial for fault tolerance and low latency, theoretically running indefinitely by managing node-level faults. The next chapter will explore solutions and algorithms for these issues.",
							],
							imageUrl:
								"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289552/blog-cover-images/ukldmj9zqs1w54wqfn42.webp",
						},
						{
							heading: [
								"##### **Footnotes**",
								"##### **References**",
							],
							children: [
								"\\[[1]()\\] Mark Cavage: “[There’s Just No Getting Around It: You’re Building a Distributed System](http://queue.acm.org/detail.cfm?id=2482856),” *ACM Queue*, volume 11, number 4, pages 80-89, April 2013. [doi:10.1145/2466486.2482856](http://dx.doi.org/10.1145/2466486.2482856)",
								"\\[[2]()\\] Jay Kreps: “[Getting Real About Distributed System Reliability](http://blog.empathybox.com/post/19574936361/getting-real-about-distributed-system-reliability),” *blog.empathybox.com*, March 19, 2012.",
								"\\[[3]()\\] Sydney Padua: *The Thrilling Adventures of Lovelace and Babbage: The (Mostly) True Story of the First Computer*. Particular Books, April 2015. ISBN: 978-0-141-98151-2",
								"\\[[4]()\\] Coda Hale: “[You Can’t Sacrifice Partition Tolerance](http://codahale.com/you-cant-sacrifice-partition-tolerance/),” *codahale.com*, October 7, 2010.",
								"\\[[5]()\\] Jeff Hodges: “[Notes on Distributed Systems for Young Bloods](http://www.somethingsimilar.com/2013/01/14/notes-on-distributed-systems-for-young-bloods/),” *somethingsimilar.com*, January 14, 2013.",
								"\\[[6]()\\] Antonio Regalado: “[Who Coined ‘Cloud Computing’?](http://www.technologyreview.com/news/425970/who-coined-cloud-computing/),” *technologyreview.com*, October 31, 2011.",
								"\\[[7]()\\] Luiz André Barroso, Jimmy Clidaras, and Urs Hölzle: “[The Datacenter as a Computer: An Introduction to the Design of Warehouse-Scale Machines, Second Edition](http://www.morganclaypool.com/doi/abs/10.2200/S00516ED2V01Y201306CAC024),” *Synthesis Lectures on Computer Architecture*, volume 8, number 3, Morgan & Claypool Publishers, July 2013. [doi:10.2200/S00516ED2V01Y201306CAC024](http://dx.doi.org/10.2200/S00516ED2V01Y201306CAC024), ISBN: 978-1-627-05010-4",
								"\\[[8]()\\] David Fiala, Frank Mueller, Christian Engelmann, et al.: “[Detection and Correction of Silent Data Corruption for Large-Scale High-Performance Computing](http://moss.csc.ncsu.edu/~mueller/ftp/pub/mueller/papers/sc12.pdf),” at *International Conference for High Performance Computing, Networking, Storage and Analysis* (SC12), November 2012.",
								"\\[[9]()\\] Arjun Singh, Joon Ong, Amit Agarwal, et al.: “[Jupiter Rising: A Decade of Clos Topologies and Centralized Control in Google’s Datacenter Network](http://conferences.sigcomm.org/sigcomm/2015/pdf/papers/p183.pdf),” at *Annual Conference of the ACM Special Interest Group on Data Communication* (SIGCOMM), August 2015. [doi:10.1145/2785956.2787508](http://dx.doi.org/10.1145/2785956.2787508)",
								"\\[[10]()\\] Glenn K. Lockwood: “[Hadoop’s Uncomfortable Fit in HPC](http://glennklockwood.blogspot.co.uk/2014/05/hadoops-uncomfortable-fit-in-hpc.html),” *glennklockwood.blogspot.co.uk*, May 16, 2014.",
								"\\[[11]()\\] John von Neumann: “[Probabilistic Logics and the Synthesis of Reliable Organisms from Unreliable Components](https://ece.uwaterloo.ca/~ssundara/courses/prob_logics.pdf),” in *Automata Studies (AM-34)*, edited by Claude E. Shannon and John McCarthy, Princeton University Press, 1956. ISBN: 978-0-691-07916-5",
								"\\[[12]()\\] Richard W. Hamming: *The Art of Doing Science and Engineering*. Taylor & Francis, 1997. ISBN: 978-9-056-99500-3",
								"\\[[13]()\\] Claude E. Shannon: “[A Mathematical Theory of Communication](http://cs.brynmawr.edu/Courses/cs380/fall2012/shannon1948.pdf),” *The Bell System Technical Journal*, volume 27, number 3, pages 379–423 and 623–656, July 1948.",
								"\\[[14]()\\] Peter Bailis and Kyle Kingsbury: “[The Network Is Reliable](https://queue.acm.org/detail.cfm?id=2655736),” *ACM Queue*, volume 12, number 7, pages 48-55, July 2014. [doi:10.1145/2639988.2639988](http://dx.doi.org/10.1145/2639988.2639988)",
								"\\[[15]()\\] Joshua B. Leners, Trinabh Gupta, Marcos K. Aguilera, and Michael Walfish: “[Taming Uncertainty in Distributed Systems with Help from the Network](http://www.cs.nyu.edu/~mwalfish/papers/albatross-eurosys15.pdf),” at *10th European Conference on Computer Systems* (EuroSys), April 2015. [doi:10.1145/2741948.2741976](http://dx.doi.org/10.1145/2741948.2741976)",
								"\\[[16]()\\] Phillipa Gill, Navendu Jain, and Nachiappan Nagappan: “[Understanding Network Failures in Data Centers: Measurement, Analysis, and Implications](http://conferences.sigcomm.org/sigcomm/2011/papers/sigcomm/p350.pdf),” at *ACM SIGCOMM Conference*, August 2011. [doi:10.1145/2018436.2018477](http://dx.doi.org/10.1145/2018436.2018477)",
								"\\[[17]()\\] Mark Imbriaco: “[Downtime Last Saturday](https://github.com/blog/1364-downtime-last-saturday),” *github.com*, December 26, 2012.",
								"\\[[18]()\\] Will Oremus: “[The Global Internet Is Being Attacked by Sharks, Google Confirms](http://www.slate.com/blogs/future_tense/2014/08/15/shark_attacks_threaten_google_s_undersea_internet_cables_video.html),” *slate.com*, August 15, 2014.",
								"\\[[19]()\\] Marc A. Donges: “[Re: bnx2 cards Intermittantly Going Offline](http://www.spinics.net/lists/netdev/msg210485.html),” Message to Linux *netdev* mailing list, *spinics.net*, September 13, 2012.",
								"\\[[20]()\\] Kyle Kingsbury: “[Call Me Maybe: Elasticsearch](https://aphyr.com/posts/317-call-me-maybe-elasticsearch),” *aphyr.com*, June 15, 2014.",
								"\\[[21]()\\] Salvatore Sanfilippo: “[A Few Arguments About Redis Sentinel Properties and Fail Scenarios](http://antirez.com/news/80),” *antirez.com*, October 21, 2014.",
								"\\[[22]()\\] Bert Hubert: “[The Ultimate SO\\_LINGER Page, or: Why Is My TCP Not Reliable](http://blog.netherlabs.nl/articles/2009/01/18/the-ultimate-so_linger-page-or-why-is-my-tcp-not-reliable),” *blog.netherlabs.nl*, January 18, 2009.",
								"\\[[23]()\\] Nicolas Liochon: “[CAP: If All You Have Is a Timeout, Everything Looks Like a Partition](http://blog.thislongrun.com/2015/05/CAP-theorem-partition-timeout-zookeeper.html),” *blog.thislongrun.com*, May 25, 2015.",
								"\\[[24]()\\] Jerome H. Saltzer, David P. Reed, and David D. Clark: “[End-To-End Arguments in System Design](http://www.ece.drexel.edu/courses/ECE-C631-501/SalRee1984.pdf),” *ACM Transactions on Computer Systems*, volume 2, number 4, pages 277–288, November 1984. [doi:10.1145/357401.357402](http://dx.doi.org/10.1145/357401.357402)",
								"\\[[25]()\\] Matthew P. Grosvenor, Malte Schwarzkopf, Ionel Gog, et al.: “[Queues Don’t Matter When You Can JUMP Them!](https://www.usenix.org/system/files/conference/nsdi15/nsdi15-paper-grosvenor_update.pdf),” at *12th USENIX Symposium on Networked Systems Design and Implementation* (NSDI), May 2015.",
								"\\[[26]()\\] Guohui Wang and T. S. Eugene Ng: “[The Impact of Virtualization on Network Performance of Amazon EC2 Data Center](http://www.cs.rice.edu/~eugeneng/papers/INFOCOM10-ec2.pdf),” at *29th IEEE International Conference on Computer Communications* (INFOCOM), March 2010. [doi:10.1109/INFCOM.2010.5461931](http://dx.doi.org/10.1109/INFCOM.2010.5461931)",
								"\\[[27]()\\] Van Jacobson: “[Congestion Avoidance and Control](http://www.cs.usask.ca/ftp/pub/discus/seminars2002-2003/p314-jacobson.pdf),” at *ACM Symposium on Communications Architectures and Protocols* (SIGCOMM), August 1988. [doi:10.1145/52324.52356](http://dx.doi.org/10.1145/52324.52356)",
								"\\[[28]()\\] Brandon Philips: “[etcd: Distributed Locking and Service Discovery](https://www.youtube.com/watch?v=HJIjTTHWYnE),” at *Strange Loop*, September 2014.",
								"\\[[29]()\\] Steve Newman: “[A Systematic Look at EC2 I/O](http://blog.scalyr.com/2012/10/a-systematic-look-at-ec2-io/),” *blog.scalyr.com*, October 16, 2012.",
								"\\[[30]()\\] Naohiro Hayashibara, Xavier Défago, Rami Yared, and Takuya Katayama: “[The ϕ Accrual Failure Detector](http://hdl.handle.net/10119/4784),” Japan Advanced Institute of Science and Technology, School of Information Science, Technical Report IS-RR-2004-010, May 2004.",
								"\\[[31]()\\] Jeffrey Wang: “[Phi Accrual Failure Detector](http://ternarysearch.blogspot.co.uk/2013/08/phi-accrual-failure-detector.html),” *ternarysearch.blogspot.co.uk*, August 11, 2013.",
								"\\[[32]()\\] Srinivasan Keshav: *An Engineering Approach to Computer Networking: ATM Networks, the Internet, and the Telephone Network*. Addison-Wesley Professional, May 1997. ISBN: 978-0-201-63442-6",
								"\\[[33]()\\] Cisco, “[Integrated Services Digital Network](http://docwiki.cisco.com/wiki/Integrated_Services_Digital_Network),” *docwiki.cisco.com*.",
								"\\[[34]()\\] Othmar Kyas: *ATM Networks*. International Thomson Publishing, 1995. ISBN: 978-1-850-32128-6",
								"\\[[35]()\\] “[InfiniBand FAQ](http://www.mellanox.com/related-docs/whitepapers/InfiniBandFAQ_FQ_100.pdf),” Mellanox Technologies, December 22, 2014.",
								"\\[[36]()\\] Jose Renato Santos, Yoshio Turner, and G. (John) Janakiraman: “[End-to-End Congestion Control for InfiniBand](http://www.hpl.hp.com/techreports/2002/HPL-2002-359.pdf),” at *22nd Annual Joint Conference of the IEEE Computer and Communications Societies* (INFOCOM), April 2003. Also published by HP Laboratories Palo Alto, Tech Report HPL-2002-359. [doi:10.1109/INFCOM.2003.1208949](http://dx.doi.org/10.1109/INFCOM.2003.1208949)",
								"\\[[37]()\\] Ulrich Windl, David Dalton, Marc Martinec, and Dale R. Worley: “[The NTP FAQ and HOWTO](http://www.ntp.org/ntpfaq/NTP-a-faq.htm),” *ntp.org*, November 2006.",
								"\\[[38]()\\] John Graham-Cumming: “[How and why the leap second affected Cloudflare DNS](https://blog.cloudflare.com/how-and-why-the-leap-second-affected-cloudflare-dns/),” *blog.cloudflare.com*, January 1, 2017.",
								"\\[[39]()\\] David Holmes: “[Inside the Hotspot VM: Clocks, Timers and Scheduling Events – Part I – Windows](https://blogs.oracle.com/dholmes/entry/inside_the_hotspot_vm_clocks),” *blogs.oracle.com*, October 2, 2006.",
								"\\[[40]()\\] Steve Loughran: “[Time on Multi-Core, Multi-Socket Servers](http://steveloughran.blogspot.co.uk/2015/09/time-on-multi-core-multi-socket-servers.html),” *steveloughran.blogspot.co.uk*, September 17, 2015.",
								"\\[[41]()\\] James C. Corbett, Jeffrey Dean, Michael Epstein, et al.: “[Spanner: Google’s Globally-Distributed Database](http://research.google.com/archive/spanner.html),” at *10th USENIX Symposium on Operating System Design and Implementation* (OSDI), October 2012.",
								"\\[[42]()\\] M. Caporaloni and R. Ambrosini: “[How Closely Can a Personal Computer Clock Track the UTC Timescale Via the Internet?](https://iopscience.iop.org/0143-0807/23/4/103/),” *European Journal of Physics*, volume 23, number 4, pages L17–L21, June 2012. [doi:10.1088/0143-0807/23/4/103](http://dx.doi.org/10.1088/0143-0807/23/4/103)",
								"\\[[43]()\\] Nelson Minar: “[A Survey of the NTP Network](http://alumni.media.mit.edu/~nelson/research/ntp-survey99/),” *alumni.media.mit.edu*, December 1999.",
								"\\[[44]()\\] Viliam Holub: “[Synchronizing Clocks in a Cassandra Cluster Pt. 1 – The Problem](https://blog.logentries.com/2014/03/synchronizing-clocks-in-a-cassandra-cluster-pt-1-the-problem/),” *blog.logentries.com*, March 14, 2014.",
								"\\[[45]()\\] Poul-Henning Kamp: “[The One-Second War (What Time Will You Die?)](http://queue.acm.org/detail.cfm?id=1967009),” *ACM Queue*, volume 9, number 4, pages 44–48, April 2011. [doi:10.1145/1966989.1967009](http://dx.doi.org/10.1145/1966989.1967009)",
								"\\[[46]()\\] Nelson Minar: “[Leap Second Crashes Half the Internet](http://www.somebits.com/weblog/tech/bad/leap-second-2012.html),” *somebits.com*, July 3, 2012.",
								"\\[[47]()\\] Christopher Pascoe: “[Time, Technology and Leaping Seconds](http://googleblog.blogspot.co.uk/2011/09/time-technology-and-leaping-seconds.html),” *googleblog.blogspot.co.uk*, September 15, 2011.",
								"\\[[48]()\\] Mingxue Zhao and Jeff Barr: “[Look Before You Leap – The Coming Leap Second and AWS](https://aws.amazon.com/blogs/aws/look-before-you-leap-the-coming-leap-second-and-aws/),” *aws.amazon.com*, May 18, 2015.",
								"\\[[49]()\\] Darryl Veitch and Kanthaiah Vijayalayan: “[Network Timing and the 2015 Leap Second](http://crin.eng.uts.edu.au/~darryl/Publications/LeapSecond_camera.pdf),” at *17th International Conference on Passive and Active Measurement* (PAM), April 2016. [doi:10.1007/978-3-319-30505-9\\_29](http://dx.doi.org/10.1007/978-3-319-30505-9_29)",
								"\\[[50]()\\] “[Timekeeping in VMware Virtual Machines](http://www.vmware.com/resources/techresources/238),” Information Guide, VMware, Inc., December 2011.",
								"\\[[51]()\\] “[MiFID II / MiFIR: Regulatory Technical and Implementing Standards – Annex I (Draft)](https://www.esma.europa.eu/sites/default/files/library/2015/11/2015-esma-1464_annex_i_-_draft_rts_and_its_on_mifid_ii_and_mifir.pdf),” European Securities and Markets Authority, Report ESMA/2015/1464, September 2015.",
								"\\[[52]()\\] Luke Bigum: “[Solving MiFID II Clock Synchronisation With Minimum Spend (Part 1)](https://www.lmax.com/blog/staff-blogs/2015/11/27/solving-mifid-ii-clock-synchronisation-minimum-spend-part-1/),” *lmax.com*, November 27, 2015.",
								"\\[[53]()\\] Kyle Kingsbury: “[Call Me Maybe: Cassandra](https://aphyr.com/posts/294-call-me-maybe-cassandra/),” *aphyr.com*, September 24, 2013.",
								"\\[[54]()\\] John Daily: “[Clocks Are Bad, or, Welcome to the Wonderful World of Distributed Systems](http://basho.com/clocks-are-bad-or-welcome-to-distributed-systems/),” *basho.com*, November 12, 2013.",
								"\\[[55]()\\] Kyle Kingsbury: “[The Trouble with Timestamps](https://aphyr.com/posts/299-the-trouble-with-timestamps),” *aphyr.com*, October 12, 2013.",
								"\\[[56]()\\] Leslie Lamport: “[Time, Clocks, and the Ordering of Events in a Distributed System](http://research.microsoft.com/en-US/um/people/Lamport/pubs/time-clocks.pdf),” *Communications of the ACM*, volume 21, number 7, pages 558–565, July 1978. [doi:10.1145/359545.359563](http://dx.doi.org/10.1145/359545.359563)",
								"\\[[57]()\\] Sandeep Kulkarni, Murat Demirbas, Deepak Madeppa, et al.: “[Logical Physical Clocks and Consistent Snapshots in Globally Distributed Databases](http://www.cse.buffalo.edu/tech-reports/2014-04.pdf),” State University of New York at Buffalo, Computer Science and Engineering Technical Report 2014-04, May 2014.",
								"\\[[58]()\\] Justin Sheehy: “[There Is No Now: Problems With Simultaneity in Distributed Systems](https://queue.acm.org/detail.cfm?id=2745385),” *ACM Queue*, volume 13, number 3, pages 36–41, March 2015. [doi:10.1145/2733108](http://dx.doi.org/10.1145/2733108)",
								"\\[[59]()\\] Murat Demirbas: “[Spanner: Google’s Globally-Distributed Database](http://muratbuffalo.blogspot.co.uk/2013/07/spanner-googles-globally-distributed_4.html),” *muratbuffalo.blogspot.co.uk*, July 4, 2013.",
								"\\[[60]()\\] Dahlia Malkhi and Jean-Philippe Martin: “[Spanner’s Concurrency Control](http://www.cs.cornell.edu/~ie53/publications/DC-col51-Sep13.pdf),” *ACM SIGACT News*, volume 44, number 3, pages 73–77, September 2013. [doi:10.1145/2527748.2527767](http://dx.doi.org/10.1145/2527748.2527767)",
								"\\[[61]()\\] Manuel Bravo, Nuno Diegues, Jingna Zeng, et al.: “[On the Use of Clocks to Enforce Consistency in the Cloud](http://sites.computer.org/debull/A15mar/p18.pdf),” *IEEE Data Engineering Bulletin*, volume 38, number 1, pages 18–31, March 2015.",
								"\\[[62]()\\] Spencer Kimball: “[Living Without Atomic Clocks](http://www.cockroachlabs.com/blog/living-without-atomic-clocks/),” *cockroachlabs.com*, February 17, 2016.",
								"\\[[63]()\\] Cary G. Gray and David R. Cheriton: “[Leases: An Efficient Fault-Tolerant Mechanism for Distributed File Cache Consistency](http://web.stanford.edu/class/cs240/readings/89-leases.pdf),” at *12th ACM Symposium on Operating Systems Principles* (SOSP), December 1989. [doi:10.1145/74850.74870](http://dx.doi.org/10.1145/74850.74870)",
								"\\[[64]()\\] Todd Lipcon: “[Avoiding Full GCs in Apache HBase with MemStore-Local Allocation Buffers: Part 1](http://blog.cloudera.com/blog/2011/02/avoiding-full-gcs-in-hbase-with-memstore-local-allocation-buffers-part-1/),” *blog.cloudera.com*, February 24, 2011.",
								"\\[[65]()\\] Martin Thompson: “[Java Garbage Collection Distilled](http://mechanical-sympathy.blogspot.co.uk/2013/07/java-garbage-collection-distilled.html),” *mechanical-sympathy.blogspot.co.uk*, July 16, 2013.",
								"\\[[66]()\\] Alexey Ragozin: “[How to Tame Java GC Pauses? Surviving 16GiB Heap and Greater](http://java.dzone.com/articles/how-tame-java-gc-pauses),” *java.dzone.com*, June 28, 2011.",
								"\\[[67]()\\] Christopher Clark, Keir Fraser, Steven Hand, et al.: “[Live Migration of Virtual Machines](http://www.cl.cam.ac.uk/research/srg/netos/papers/2005-nsdi-migration.pdf),” at *2nd USENIX Symposium on Symposium on Networked Systems Design & Implementation* (NSDI), May 2005.",
								"\\[[68]()\\] Mike Shaver: “[fsyncers and Curveballs](http://shaver.off.net/diary/2008/05/25/fsyncers-and-curveballs/),” *shaver.off.net*, May 25, 2008.",
								"\\[[69]()\\] Zhenyun Zhuang and Cuong Tran: “[Eliminating Large JVM GC Pauses Caused by Background IO Traffic](https://engineering.linkedin.com/blog/2016/02/eliminating-large-jvm-gc-pauses-caused-by-background-io-traffic),” *engineering.linkedin.com*, February 10, 2016.",
								"\\[[70]()\\] David Terei and Amit Levy: “[Blade: A Data Center Garbage Collector](http://arxiv.org/pdf/1504.02578.pdf),” arXiv:1504.02578, April 13, 2015.",
								"\\[[71]()\\] Martin Maas, Tim Harris, Krste Asanović, and John Kubiatowicz: “[Trash Day: Coordinating Garbage Collection in Distributed Systems](https://timharris.uk/papers/2015-hotos.pdf),” at *15th USENIX Workshop on Hot Topics in Operating Systems* (HotOS), May 2015.",
								"\\[[72]()\\] “[Predictable Low Latency](http://cdn2.hubspot.net/hubfs/1624455/Website_2016/content/White%20papers/Cinnober%20on%20GC%20pause%20free%20Java%20applications.pdf),” Cinnober Financial Technology AB, *cinnober.com*, November 24, 2013.",
								"\\[[73]()\\] Martin Fowler: “[The LMAX Architecture](http://martinfowler.com/articles/lmax.html),” *martinfowler.com*, July 12, 2011.",
								"\\[[74]()\\] Flavio P. Junqueira and Benjamin Reed: *ZooKeeper: Distributed Process Coordination*. O’Reilly Media, 2013. ISBN: 978-1-449-36130-3",
								"\\[[75]()\\] Enis Söztutar: “[HBase and HDFS: Understanding Filesystem Usage in HBase](http://www.slideshare.net/enissoz/hbase-and-hdfs-understanding-filesystem-usage),” at *HBaseCon*, June 2013.",
								"\\[[76]()\\] Caitie McCaffrey: “[Clients Are Jerks: AKA How Halo 4 DoSed the Services at Launch & How We Survived](http://caitiem.com/2015/06/23/clients-are-jerks-aka-how-halo-4-dosed-the-services-at-launch-how-we-survived/),” *caitiem.com*, June 23, 2015.",
								"\\[[77]()\\] Leslie Lamport, Robert Shostak, and Marshall Pease: “[The Byzantine Generals Problem](http://research.microsoft.com/en-us/um/people/lamport/pubs/byz.pdf),” *ACM Transactions on Programming Languages and Systems* (TOPLAS), volume 4, number 3, pages 382–401, July 1982. [doi:10.1145/357172.357176](http://dx.doi.org/10.1145/357172.357176)",
								"\\[[78]()\\] Jim N. Gray: “[Notes on Data Base Operating Systems](http://research.microsoft.com/en-us/um/people/gray/papers/DBOS.pdf),” in *Operating Systems: An Advanced Course*, Lecture Notes in Computer Science, volume 60, edited by R. Bayer, R. M. Graham, and G. Seegmüller, pages 393–481, Springer-Verlag, 1978. ISBN: 978-3-540-08755-7",
								"\\[[79]()\\] Brian Palmer: “[How Complicated Was the Byzantine Empire?](http://www.slate.com/articles/news_and_politics/explainer/2011/10/the_byzantine_tax_code_how_complicated_was_byzantium_anyway_.html),” *slate.com*, October 20, 2011.",
								"\\[[80]()\\] Leslie Lamport: “[My Writings](http://research.microsoft.com/en-us/um/people/lamport/pubs/pubs.html),” *research.microsoft.com*, December 16, 2014. This page can be found by searching the web for the 23-character string obtained by removing the hyphens from the string `allla-mport-spubso-ntheweb`.",
								"\\[[81]()\\] John Rushby: “[Bus Architectures for Safety-Critical Embedded Systems](http://www.csl.sri.com/papers/emsoft01/emsoft01.pdf),” at *1st International Workshop on Embedded Software* (EMSOFT), October 2001.",
								"\\[[82]()\\] Jake Edge: “[ELC: SpaceX Lessons Learned](http://lwn.net/Articles/540368/),” *lwn.net*, March 6, 2013.",
								"\\[[83]()\\] Andrew Miller and Joseph J. LaViola, Jr.: “[Anonymous Byzantine Consensus from Moderately-Hard Puzzles: A Model for Bitcoin](http://nakamotoinstitute.org/static/docs/anonymous-byzantine-consensus.pdf),” University of Central Florida, Technical Report CS-TR-14-01, April 2014.",
								"\\[[84]()\\] James Mickens: “[The Saddest Moment](https://www.usenix.org/system/files/login-logout_1305_mickens.pdf),” *USENIX ;login: logout*, May 2013.",
								"\\[[85]()\\] Evan Gilman: “[The Discovery of Apache ZooKeeper’s Poison Packet](http://www.pagerduty.com/blog/the-discovery-of-apache-zookeepers-poison-packet/),” *pagerduty.com*, May 7, 2015.",
								"\\[[86]()\\] Jonathan Stone and Craig Partridge: “[When the CRC and TCP Checksum Disagree](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.27.7611&rep=rep1&type=pdf),” at *ACM Conference on Applications, Technologies, Architectures, and Protocols for Computer Communication* (SIGCOMM), August 2000. [doi:10.1145/347059.347561](http://dx.doi.org/10.1145/347059.347561)",
								"\\[[87]()\\] Evan Jones: “[How Both TCP and Ethernet Checksums Fail](http://www.evanjones.ca/tcp-and-ethernet-checksums-fail.html),” *evanjones.ca*, October 5, 2015.",
								"\\[[88]()\\] Cynthia Dwork, Nancy Lynch, and Larry Stockmeyer: “[Consensus in the Presence of Partial Synchrony](http://www.net.t-labs.tu-berlin.de/~petr/ADC-07/papers/DLS88.pdf),” *Journal of the ACM*, volume 35, number 2, pages 288–323, April 1988. [doi:10.1145/42282.42283](http://dx.doi.org/10.1145/42282.42283)",
								"\\[[89]()\\] Peter Bailis and Ali Ghodsi: “[Eventual Consistency Today: Limitations, Extensions, and Beyond](http://queue.acm.org/detail.cfm?id=2462076),” *ACM Queue*, volume 11, number 3, pages 55-63, March 2013. [doi:10.1145/2460276.2462076](http://dx.doi.org/10.1145/2460276.2462076)",
								"\\[[90]()\\] Bowen Alpern and Fred B. Schneider: “[Defining Liveness](https://www.cs.cornell.edu/fbs/publications/DefLiveness.pdf),” *Information Processing Letters*, volume 21, number 4, pages 181–185, October 1985. [doi:10.1016/0020-0190(85)90056-0](http://dx.doi.org/10.1016/0020-0190(85)90056-0)",
								"\\[[91]()\\] Flavio P. Junqueira: “[Dude, Where’s My Metadata?](http://fpj.me/2015/05/28/dude-wheres-my-metadata/),” *fpj.me*, May 28, 2015.",
								"\\[[92]()\\] Scott Sanders: “[January 28th Incident Report](https://github.com/blog/2106-january-28th-incident-report),” *github.com*, February 3, 2016.",
								"\\[[93]()\\] Jay Kreps: “[A Few Notes on Kafka and Jepsen](http://blog.empathybox.com/post/62279088548/a-few-notes-on-kafka-and-jepsen),” *blog.empathybox.com*, September 25, 2013.",
								"\\[[94]()\\] Thanh Do, Mingzhe Hao, Tanakorn Leesatapornwongsa, et al.: “[Limplock: Understanding the Impact of Limpware on Scale-out Cloud Systems](http://ucare.cs.uchicago.edu/pdf/socc13-limplock.pdf),” at *4th ACM Symposium on Cloud Computing* (SoCC), October 2013. [doi:10.1145/2523616.2523627](http://dx.doi.org/10.1145/2523616.2523627)",
								"\\[[95]()\\] Frank McSherry, Michael Isard, and Derek G. Murray: “[Scalability! But at What COST?](http://www.frankmcsherry.org/assets/COST.pdf),” at *15th USENIX Workshop on Hot Topics in Operating Systems* (HotOS), May 2015.",
							],
							summary: [
								"Explore key distributed systems insights from pioneers like Lamport and Fowler, spanning decades.",
							],
							longSummary: [
								"This bibliography compiles references on distributed systems, featuring academic papers, books, blog posts, and technical reports. It covers key topics such as system reliability, datacenter architecture, network failures, time synchronization, consensus protocols, garbage collection, Byzantine fault tolerance, and performance. Notable contributors include Leslie Lamport, Martin Fowler, Kyle Kingsbury, and researchers from Google, Microsoft, and various universities. The citations range from foundational works of the 1970s-80s to recent studies from the 2010s, addressing contemporary challenges in distributed computing.",
							],
							imageUrl:
								"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289553/blog-cover-images/rec5ejabprnlfkdlf8xt.webp",
						},
					],
				],
				summary: [
					"Distributed systems face inevitable failures; learn to build resilient systems despite chaos.",
				],
				longSummary: [
					"In distributed systems, failures are inevitable, so engineers must design systems to meet user expectations despite these challenges. Unlike single-computer software, distributed systems face network issues, clock inaccuracies, and partial failures. They require fault-tolerance mechanisms due to unreliable networks and clocks, leading to nondeterministic behavior. Reliable systems can be built from unreliable components, as shown by error-correcting codes and TCP/IP, though there are limits. These systems handle network faults, clock sync issues, and process pauses using timeouts and quorum-based decision-making. Despite complexities, they are crucial for fault tolerance and low latency.",
				],
				imageUrl:
					"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289523/blog-cover-images/vhsbn38z8hjoq5kcla16.webp",
			},
			{
				heading: ["# **Chapter 9. Consistency and Consensus**"],
				children: [
					"Lots of things can go wrong in distributed systems, as discussed in [Chapter 8](). The simplest way of handling such faults is to simply let the entire service fail, and show the user an error message. If that solution is unacceptable, we need to find ways of *tolerating* faults—that is, of keeping the service functioning correctly, even if some internal component is faulty.",
					"In this chapter, we will talk about some examples of algorithms and protocols for building fault-tolerant distributed systems. We will assume that all the problems from [Chapter 8]() can occur: packets can be lost, reordered, duplicated, or arbitrarily delayed in the network; clocks are approximate at best; and nodes can pause (e.g., due to garbage collection) or crash at any time.",
					"The best way of building fault-tolerant systems is to find some general-purpose abstractions with useful guarantees, implement them once, and then let applications rely on those guarantees. This is the same approach as we used with transactions in [Chapter 7](): by using a transaction, the application can pretend that there are no crashes (atomicity), that nobody else is concurrently accessing the database (isolation), and that storage devices are perfectly reliable (durability). Even though crashes, race conditions, and disk failures do occur, the transaction abstraction hides those problems so that the application doesn’t need to worry about them.",
					"We will now continue along the same lines, and seek abstractions that can allow an application to ignore some of the problems with distributed systems. For example, one of the most important abstractions for distributed systems is *consensus*: that is, getting all of the nodes to agree on something. As we shall see in this chapter, reliably reaching consensus in spite of network faults and process failures is a surprisingly tricky problem.",
					"Once you have an implementation of consensus, applications can use it for various purposes. For example, say you have a database with single-leader replication. If the leader dies and you need to fail over to another node, the remaining database nodes can use consensus to elect a new leader. As discussed in [“Handling Node Outages”](), it’s important that there is only one leader, and that all nodes agree who the leader is. If two nodes both believe that they are the leader, that situation is called *split brain*, and it often leads to data loss. Correct implementations of consensus help avoid such problems.",
					"Later in this chapter, in [“Distributed Transactions and Consensus”](blob:https://johnfactotum.github.io/08af1efc-0362-4479-878a-645f5b08c432#sec_consistency_consensus), we will look into algorithms to solve consensus and related problems. But first we first need to explore the range of guarantees and abstractions that can be provided in a distributed system.",
					"We need to understand the scope of what can and cannot be done: in some situations, it’s possible for the system to tolerate faults and continue working; in other situations, that is not possible. The limits of what is and isn’t possible have been explored in depth, both in theoretical proofs and in practical implementations. We will get an overview of those fundamental limits in this chapter.",
					"Researchers in the field of distributed systems have been studying these topics for decades, so there is a lot of material—we’ll only be able to scratch the surface. In this book we don’t have space to go into details of the formal models and proofs, so we will stick with informal intuitions. The literature references offer plenty of additional depth if you’re interested.",
					[
						{
							heading: ["# **Consistency Guarantees**"],
							children: [
								"In [“Problems with Replication Lag”]() we looked at some timing issues that occur in a replicated database. If you look at two database nodes at the same moment in time, you’re likely to see different data on the two nodes, because write requests arrive on different nodes at different times. These inconsistencies occur no matter what replication method the database uses (single-leader, multi-leader, or leaderless replication).",
								"Most replicated databases provide at least *eventual consistency*, which means that if you stop writing to the database and wait for some unspecified length of time, then eventually all read requests will return the same value \\[[1]()\\]. In other words, the inconsistency is temporary, and it eventually resolves itself (assuming that any faults in the network are also eventually repaired). A better name for eventual consistency may be *convergence*, as we expect all replicas to eventually converge to the same value \\[[2]()\\].",
								"However, this is a very weak guarantee—it doesn’t say anything about *when* the replicas will converge. Until the time of convergence, reads could return anything or nothing \\[[1]()\\]. For example, if you write a value and then immediately read it again, there is no guarantee that you will see the value you just wrote, because the read may be routed to a different replica (see [“Reading Your Own Writes”]()).",
								"Eventual consistency is hard for application developers because it is so different from the behavior of variables in a normal single-threaded program. If you assign a value to a variable and then read it shortly afterward, you don’t expect to read back the old value, or for the read to fail. A database looks superficially like a variable that you can read and write, but in fact it has much more complicated semantics \\[[3]()\\].",
								"When working with a database that provides only weak guarantees, you need to be constantly aware of its limitations and not accidentally assume too much. Bugs are often subtle and hard to find by testing, because the application may work well most of the time. The edge cases of eventual consistency only become apparent when there is a fault in the system (e.g., a network interruption) or at high concurrency.",
								"In this chapter we will explore stronger consistency models that data systems may choose to provide. They don’t come for free: systems with stronger guarantees may have worse performance or be less fault-tolerant than systems with weaker guarantees. Nevertheless, stronger guarantees can be appealing because they are easier to use correctly. Once you have seen a few different consistency models, you’ll be in a better position to decide which one best fits your needs.",
								"There is some similarity between distributed consistency models and the hierarchy of transaction isolation levels we discussed previously \\[[4](), [5]()\\] (see [“Weak Isolation Levels”]()). But while there is some overlap, they are mostly independent concerns: transaction isolation is primarily about avoiding race conditions due to concurrently executing transactions, whereas distributed consistency is mostly about coordinating the state of replicas in the face of delays and faults.",
								"This chapter covers a broad range of topics, but as we shall see, these areas are in fact deeply linked:",
								"* We will start by looking at one of the strongest consistency models in common use, *linearizability*, and examine its pros and cons.",
								"* We’ll then examine the issue of ordering events in a distributed system ([“Ordering Guarantees”](blob:https://johnfactotum.github.io/08af1efc-0362-4479-878a-645f5b08c432#sec_consistency_ordering)), particularly around causality and total ordering.",
								"* In the third section ([“Distributed Transactions and Consensus”](blob:https://johnfactotum.github.io/08af1efc-0362-4479-878a-645f5b08c432#sec_consistency_consensus)) we will explore how to atomically commit a distributed transaction, which will finally lead us toward solutions for the consensus problem.",
							],
							summary: [
								"Replicated databases face timing issues, challenging development with weak consistency and potential subtle bugs.",
							],
							longSummary: [
								"Replicated databases often face timing issues where nodes show different data simultaneously. Most databases offer eventual consistency, meaning replicas align after writes stop, but without a specific timeline. This complicates development, as database behavior differs from single-threaded variables. Developers must understand these limitations to avoid subtle bugs, especially during faults or high concurrency. Stronger consistency models simplify correctness but may impact performance or fault tolerance. While distributed consistency and transaction isolation overlap, they address different concerns. This chapter explores linearizability, event ordering, and distributed transactions leading to consensus solutions.",
							],
							imageUrl:
								"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289468/blog-cover-images/qk8hbloy1e6xzlk1sltl.webp",
						},
						{
							heading: ["# **Linearizability**"],
							children: [
								"In an eventually consistent database, if you ask two different replicas the same question at the same time, you may get two different answers. That’s confusing. Wouldn’t it be a lot simpler if the database could give the illusion that there is only one replica (i.e., only one copy of the data)? Then every client would have the same view of the data, and you wouldn’t have to worry about replication lag.",
								"This is the idea behind *linearizability* \\[[6]()\\] (also known as *atomic consistency* \\[[7]()\\], *strong consistency*, *immediate consistency*, or *external consistency* \\[[8]()\\]). The exact definition of linearizability is quite subtle, and we will explore it in the rest of this section. But the basic idea is to make a system appear as if there were only one copy of the data, and all operations on it are atomic. With this guarantee, even though there may be multiple replicas in reality, the application does not need to worry about them.",
								"In a linearizable system, as soon as one client successfully completes a write, all clients reading from the database must be able to see the value just written. Maintaining the illusion of a single copy of the data means guaranteeing that the value read is the most recent, up-to-date value, and doesn’t come from a stale cache or replica. In other words, linearizability is a *recency guarantee*. To clarify this idea, let’s look at an example of a system that is not linearizable.",
								"![ddia 0901](blob:https://johnfactotum.github.io/b5df11b3-842f-40ee-be20-75dfc7199c25)",
								"###### *Figure 9-1. This system is not linearizable, causing football fans to be confused.*",
								"[Figure 9-1](blob:https://johnfactotum.github.io/08af1efc-0362-4479-878a-645f5b08c432#fig_consistency_linearizability_0) shows an example of a nonlinearizable sports website \\[[9]()\\]. Alice and Bob are sitting in the same room, both checking their phones to see the outcome of the 2014 FIFA World Cup final. Just after the final score is announced, Alice refreshes the page, sees the winner announced, and excitedly tells Bob about it. Bob incredulously hits *reload* on his own phone, but his request goes to a database replica that is lagging, and so his phone shows that the game is still ongoing.",
								"If Alice and Bob had hit reload at the same time, it would have been less surprising if they had gotten two different query results, because they wouldn’t know at exactly what time their respective requests were processed by the server. However, Bob knows that he hit the reload button (initiated his query) *after* he heard Alice exclaim the final score, and therefore he expects his query result to be at least as recent as Alice’s. The fact that his query returned a stale result is a violation of linearizability.",
								[
									{
										heading: [
											"## **What Makes a System Linearizable?**",
										],
										children: [
											"The basic idea behind linearizability is simple: to make a system appear as if there is only a single copy of the data. However, nailing down precisely what that means actually requires some care. In order to understand linearizability better, let’s look at some more examples.",
											"[Figure 9-2](blob:https://johnfactotum.github.io/08af1efc-0362-4479-878a-645f5b08c432#fig_consistency_linearizability_1) shows three clients concurrently reading and writing the same key *x* in a linearizable database. In the distributed systems literature, *x* is called a *register*—in practice, it could be one key in a key-value store, one row in a relational database, or one document in a document database, for example.",
											"![ddia 0902](blob:https://johnfactotum.github.io/ee1f45b2-f73f-4656-9b02-1b0489f75679)",
											"###### *Figure 9-2. If a read request is concurrent with a write request, it may return either the old or the new value.*",
											"For simplicity, [Figure 9-2](blob:https://johnfactotum.github.io/08af1efc-0362-4479-878a-645f5b08c432#fig_consistency_linearizability_1) shows only the requests from the clients’ point of view, not the internals of the database. Each bar is a request made by a client, where the start of a bar is the time when the request was sent, and the end of a bar is when the response was received by the client. Due to variable network delays, a client doesn’t know exactly when the database processed its request—it only knows that it must have happened sometime between the client sending the request and receiving the response.[i]()",
											"In this example, the register has two types of operations:",
											"* *read*(*x*) ⇒ *v* means the client requested to read the value of register *x*, and the database returned the value *v*.",
											"* *write*(*x*, *v*) ⇒ *r* means the client requested to set the register *x* to value *v*, and the database returned response *r* (which could be *ok* or *error*).",
											"In [Figure 9-2](blob:https://johnfactotum.github.io/08af1efc-0362-4479-878a-645f5b08c432#fig_consistency_linearizability_1), the value of *x* is initially 0, and client C performs a write request to set it to 1. While this is happening, clients A and B are repeatedly polling the database to read the latest value. What are the possible responses that A and B might get for their read requests?",
											"* The first read operation by client A completes before the write begins, so it must definitely return the old value 0.",
											"* The last read by client A begins after the write has completed, so it must definitely return the new value 1 if the database is linearizable: we know that the write must have been processed sometime between the start and end of the write operation, and the read must have been processed sometime between the start and end of the read operation. If the read started after the write ended, then the read must have been processed after the write, and therefore it must see the new value that was written.",
											"* Any read operations that overlap in time with the write operation might return either 0 or 1, because we don’t know whether or not the write has taken effect at the time when the read operation is processed. These operations are *concurrent* with the write.",
											"However, that is not yet sufficient to fully describe linearizability: if reads that are concurrent with a write can return either the old or the new value, then readers could see a value flip back and forth between the old and the new value several times while a write is going on. That is not what we expect of a system that emulates a “single copy of the data.”[ii]()",
											"To make the system linearizable, we need to add another constraint, illustrated in [Figure 9-3](blob:https://johnfactotum.github.io/08af1efc-0362-4479-878a-645f5b08c432#fig_consistency_linearizability_2).",
											"![ddia 0903](blob:https://johnfactotum.github.io/2d4fd6e2-86a8-499e-b9cb-cc34890def96)",
											"###### *Figure 9-3. After any one read has returned the new value, all following reads (on the same or other clients) must also return the new value.*",
											"In a linearizable system we imagine that there must be some point in time (between the start and end of the write operation) at which the value of *x* atomically flips from 0 to 1. Thus, if one client’s read returns the new value 1, all subsequent reads must also return the new value, even if the write operation has not yet completed.",
											"This timing dependency is illustrated with an arrow in [Figure 9-3](blob:https://johnfactotum.github.io/08af1efc-0362-4479-878a-645f5b08c432#fig_consistency_linearizability_2). Client A is the first to read the new value, 1. Just after A’s read returns, B begins a new read. Since B’s read occurs strictly after A’s read, it must also return 1, even though the write by C is still ongoing. (It’s the same situation as with Alice and Bob in [Figure 9-1](blob:https://johnfactotum.github.io/08af1efc-0362-4479-878a-645f5b08c432#fig_consistency_linearizability_0): after Alice has read the new value, Bob also expects to read the new value.)",
											"We can further refine this timing diagram to visualize each operation taking effect atomically at some point in time. A more complex example is shown in [Figure 9-4](blob:https://johnfactotum.github.io/08af1efc-0362-4479-878a-645f5b08c432#fig_consistency_linearizability_3) \\[[10]()\\].",
											"In [Figure 9-4](blob:https://johnfactotum.github.io/08af1efc-0362-4479-878a-645f5b08c432#fig_consistency_linearizability_3) we add a third type of operation besides *read* and *write*:",
											"* *cas*(*x*, *v*old, *v*new) ⇒ *r* means the client requested an atomic *compare-and-set* operation (see [“Compare-and-set”]()). If the current value of the register *x* equals *v*old, it should be atomically set to *v*new. If *x* ≠ *v*old then the operation should leave the register unchanged and return an error. *r* is the database’s response (*ok* or *error*).",
											"Each operation in [Figure 9-4](blob:https://johnfactotum.github.io/08af1efc-0362-4479-878a-645f5b08c432#fig_consistency_linearizability_3) is marked with a vertical line (inside the bar for each operation) at the time when we think the operation was executed. Those markers are joined up in a sequential order, and the result must be a valid sequence of reads and writes for a register (every read must return the value set by the most recent write).",
											"The requirement of linearizability is that the lines joining up the operation markers always move forward in time (from left to right), never backward. This requirement ensures the recency guarantee we discussed earlier: once a new value has been written or read, all subsequent reads see the value that was written, until it is overwritten again.",
											"![ddia 0904](blob:https://johnfactotum.github.io/73311b91-08bb-4000-afc4-6b9d761d7404)",
											"###### *Figure 9-4. Visualizing the points in time at which the reads and writes appear to have taken effect. The final read by B is not linearizable.*",
											"There are a few interesting details to point out in [Figure 9-4](blob:https://johnfactotum.github.io/08af1efc-0362-4479-878a-645f5b08c432#fig_consistency_linearizability_3):",
											"* First client B sent a request to read *x*, then client D sent a request to set *x* to 0, and then client A sent a request to set *x* to 1. Nevertheless, the value returned to B’s read is 1 (the value written by A). This is okay: it means that the database first processed D’s write, then A’s write, and finally B’s read. Although this is not the order in which the requests were sent, it’s an acceptable order, because the three requests are concurrent. Perhaps B’s read request was slightly delayed in the network, so it only reached the database after the two writes.",
											"* Client B’s read returned 1 before client A received its response from the database, saying that the write of the value 1 was successful. This is also okay: it doesn’t mean the value was read before it was written, it just means the *ok* response from the database to client A was slightly delayed in the network.",
											"* This model doesn’t assume any transaction isolation: another client may change a value at any time. For example, C first reads 1 and then reads 2, because the value was changed by B between the two reads. An atomic compare-and-set (*cas*) operation can be used to check the value hasn’t been concurrently changed by another client: B and C’s *cas* requests succeed, but D’s *cas* request fails (by the time the database processes it, the value of *x* is no longer 0).",
											"* The final read by client B (in a shaded bar) is not linearizable. The operation is concurrent with C’s *cas* write, which updates *x* from 2 to 4. In the absence of other requests, it would be okay for B’s read to return 2. However, client A has already read the new value 4 before B’s read started, so B is not allowed to read an older value than A. Again, it’s the same situation as with Alice and Bob in [Figure 9-1](blob:https://johnfactotum.github.io/08af1efc-0362-4479-878a-645f5b08c432#fig_consistency_linearizability_0).",
											"That is the intuition behind linearizability; the formal definition \\[[6]()\\] describes it more precisely. It is possible (though computationally expensive) to test whether a system’s behavior is linearizable by recording the timings of all requests and responses, and checking whether they can be arranged into a valid sequential order \\[[11]()\\].",
											"##### **Linearizability Versus Serializability**",
											"Linearizability is easily confused with serializability (see [“Serializability”]()), as both words seem to mean something like “can be arranged in a sequential order.” However, they are two quite different guarantees, and it is important to distinguish between them:",
											"Serializability",
											"Serializability is an isolation property of *transactions*, where every transaction may read and write multiple objects (rows, documents, records)—see [“Single-Object and Multi-Object Operations”](). It guarantees that transactions behave the same as if they had executed in *some* serial order (each transaction running to completion before the next transaction starts). It is okay for that serial order to be different from the order in which transactions were actually run \\[[12]()\\].",
											"Linearizability",
											"Linearizability is a recency guarantee on reads and writes of a register (an *individual object*). It doesn’t group operations together into transactions, so it does not prevent problems such as write skew (see [“Write Skew and Phantoms”]()), unless you take additional measures such as materializing conflicts (see [“Materializing conflicts”]()).",
											"A database may provide both serializability and linearizability, and this combination is known as *strict serializability* or *strong one-copy serializability* (*strong-1SR*) \\[[4](), [13]()\\]. Implementations of serializability based on two-phase locking (see [“Two-Phase Locking (2PL)”]()) or actual serial execution (see [“Actual Serial Execution”]()) are typically linearizable.",
											"However, serializable snapshot isolation (see [“Serializable Snapshot Isolation (SSI)”]()) is not linearizable: by design, it makes reads from a consistent snapshot, to avoid lock contention between readers and writers. The whole point of a consistent snapshot is that it does not include writes that are more recent than the snapshot, and thus reads from the snapshot are not linearizable.",
										],
										summary: [
											"Linearizability ensures immediate visibility of data changes, guaranteeing consistent reads across all clients.",
										],
										longSummary: [
											"Linearizability ensures a system behaves as if there is only one copy of the data, providing a recency guarantee where once a new value is written or read, all subsequent reads return this value until it's changed again. This means if one client reads a new value, all following reads must reflect this change, even if the write isn't fully completed. Linearizability differs from serializability, which is about transaction isolation across multiple objects. A database can offer both, known as strict serializability, often achieved through two-phase locking or serial execution, whereas serializable snapshot isolation is not linearizable by design.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289485/blog-cover-images/h0hmdi177ynvkdvtjxtc.webp",
									},
									{
										heading: [
											"## **Relying on Linearizability**",
										],
										children: [
											"In what circumstances is linearizability useful? Viewing the final score of a sporting match is perhaps a frivolous example: a result that is outdated by a few seconds is unlikely to cause any real harm in this situation. However, there a few areas in which linearizability is an important requirement for making a system work correctly.",
											"### **Locking and leader election**",
											"A system that uses single-leader replication needs to ensure that there is indeed only one leader, not several (split brain). One way of electing a leader is to use a lock: every node that starts up tries to acquire the lock, and the one that succeeds becomes the leader \\[[14]()\\]. No matter how this lock is implemented, it must be linearizable: all nodes must agree which node owns the lock; otherwise it is useless.",
											"Coordination services like Apache ZooKeeper \\[[15]()\\] and etcd \\[[16]()\\] are often used to implement distributed locks and leader election. They use consensus algorithms to implement linearizable operations in a fault-tolerant way (we discuss such algorithms later in this chapter, in [“Fault-Tolerant Consensus”](blob:https://johnfactotum.github.io/08af1efc-0362-4479-878a-645f5b08c432#sec_consistency_consensus_ft)).[iii]() There are still many subtle details to implementing locks and leader election correctly (see for example the fencing issue in [“The leader and the lock”]()), and libraries like Apache Curator \\[[17]()\\] help by providing higher-level recipes on top of ZooKeeper. However, a linearizable storage service is the basic foundation for these coordination tasks.",
											"Distributed locking is also used at a much more granular level in some distributed databases, such as Oracle Real Application Clusters (RAC) \\[[18]()\\]. RAC uses a lock per disk page, with multiple nodes sharing access to the same disk storage system. Since these linearizable locks are on the critical path of transaction execution, RAC deployments usually have a dedicated cluster interconnect network for communication between database nodes.",
											"### **Constraints and uniqueness guarantees**",
											"Uniqueness constraints are common in databases: for example, a username or email address must uniquely identify one user, and in a file storage service there cannot be two files with the same path and filename. If you want to enforce this constraint as the data is written (such that if two people try to concurrently create a user or a file with the same name, one of them will be returned an error), you need linearizability.",
											"This situation is actually similar to a lock: when a user registers for your service, you can think of them acquiring a “lock” on their chosen username. The operation is also very similar to an atomic compare-and-set, setting the username to the ID of the user who claimed it, provided that the username is not already taken.",
											"Similar issues arise if you want to ensure that a bank account balance never goes negative, or that you don’t sell more items than you have in stock in the warehouse, or that two people don’t concurrently book the same seat on a flight or in a theater. These constraints all require there to be a single up-to-date value (the account balance, the stock level, the seat occupancy) that all nodes agree on.",
											"In real applications, it is sometimes acceptable to treat such constraints loosely (for example, if a flight is overbooked, you can move customers to a different flight and offer them compensation for the inconvenience). In such cases, linearizability may not be needed, and we will discuss such loosely interpreted constraints in [“Timeliness and Integrity”]().",
											"However, a hard uniqueness constraint, such as the one you typically find in relational databases, requires linearizability. Other kinds of constraints, such as foreign key or attribute constraints, can be implemented without requiring linearizability \\[[19]()\\].",
											"### **Cross-channel timing dependencies**",
											"Notice a detail in [Figure 9-1](blob:https://johnfactotum.github.io/08af1efc-0362-4479-878a-645f5b08c432#fig_consistency_linearizability_0): if Alice hadn’t exclaimed the score, Bob wouldn’t have known that the result of his query was stale. He would have just refreshed the page again a few seconds later, and eventually seen the final score. The linearizability violation was only noticed because there was an additional communication channel in the system (Alice’s voice to Bob’s ears).",
											"Similar situations can arise in computer systems. For example, say you have a website where users can upload a photo, and a background process resizes the photos to lower resolution for faster download (thumbnails). The architecture and dataflow of this system is illustrated in [Figure 9-5](blob:https://johnfactotum.github.io/08af1efc-0362-4479-878a-645f5b08c432#fig_consistency_thumbnailer).",
											"The image resizer needs to be explicitly instructed to perform a resizing job, and this instruction is sent from the web server to the resizer via a message queue (see [Chapter 11]()). The web server doesn’t place the entire photo on the queue, since most message brokers are designed for small messages, and a photo may be several megabytes in size. Instead, the photo is first written to a file storage service, and once the write is complete, the instruction to the resizer is placed on the queue.",
											"![ddia 0905](blob:https://johnfactotum.github.io/f8767546-68d6-4217-b596-8a58f56a10a3)",
											"###### *Figure 9-5. The web server and image resizer communicate both through file storage and a message queue, opening the potential for race conditions.*",
											"If the file storage service is linearizable, then this system should work fine. If it is not linearizable, there is the risk of a race condition: the message queue (steps 3 and 4 in [Figure 9-5](blob:https://johnfactotum.github.io/08af1efc-0362-4479-878a-645f5b08c432#fig_consistency_thumbnailer)) might be faster than the internal replication inside the storage service. In this case, when the resizer fetches the image (step 5), it might see an old version of the image, or nothing at all. If it processes an old version of the image, the full-size and resized images in the file storage become permanently inconsistent.",
											"This problem arises because there are two different communication channels between the web server and the resizer: the file storage and the message queue. Without the recency guarantee of linearizability, race conditions between these two channels are possible. This situation is analogous to [Figure 9-1](blob:https://johnfactotum.github.io/08af1efc-0362-4479-878a-645f5b08c432#fig_consistency_linearizability_0), where there was also a race condition between two communication channels: the database replication and the real-life audio channel between Alice’s mouth and Bob’s ears.",
											"Linearizability is not the only way of avoiding this race condition, but it’s the simplest to understand. If you control the additional communication channel (like in the case of the message queue, but not in the case of Alice and Bob), you can use alternative approaches similar to what we discussed in [“Reading Your Own Writes”](), at the cost of additional complexity.",
											"## **Implementing Linearizable Systems**",
											"Now that we’ve looked at a few examples in which linearizability is useful, let’s think about how we might implement a system that offers linearizable semantics.",
											"Since linearizability essentially means “behave as though there is only a single copy of the data, and all operations on it are atomic,” the simplest answer would be to really only use a single copy of the data. However, that approach would not be able to tolerate faults: if the node holding that one copy failed, the data would be lost, or at least inaccessible until the node was brought up again.",
											"The most common approach to making a system fault-tolerant is to use replication. Let’s revisit the replication methods from [Chapter 5](), and compare whether they can be made linearizable:",
											"Single-leader replication (potentially linearizable)",
											"In a system with single-leader replication (see [“Leaders and Followers”]()), the leader has the primary copy of the data that is used for writes, and the followers maintain backup copies of the data on other nodes. If you make reads from the leader, or from synchronously updated followers, they have the *potential* to be linearizable.[iv]() However, not every single-leader database is actually linearizable, either by design (e.g., because it uses snapshot isolation) or due to concurrency bugs \\[[10]()\\].",
											"Using the leader for reads relies on the assumption that you know for sure who the leader is. As discussed in [“The Truth Is Defined by the Majority”](), it is quite possible for a node to think that it is the leader, when in fact it is not—and if the delusional leader continues to serve requests, it is likely to violate linearizability \\[[20]()\\]. With asynchronous replication, failover may even lose committed writes (see [“Handling Node Outages”]()), which violates both durability and linearizability.",
											"Consensus algorithms (linearizable)",
											"Some consensus algorithms, which we will discuss later in this chapter, bear a resemblance to single-leader replication. However, consensus protocols contain measures to prevent split brain and stale replicas. Thanks to these details, consensus algorithms can implement linearizable storage safely. This is how ZooKeeper \\[[21]()\\] and etcd \\[[22]()\\] work, for example.",
											"Multi-leader replication (not linearizable)",
											"Systems with multi-leader replication are generally not linearizable, because they concurrently process writes on multiple nodes and asynchronously replicate them to other nodes. For this reason, they can produce conflicting writes that require resolution (see [“Handling Write Conflicts”]()). Such conflicts are an artifact of the lack of a single copy of the data.",
											"Leaderless replication (probably not linearizable)",
											"For systems with leaderless replication (Dynamo-style; see [“Leaderless Replication”]()), people sometimes claim that you can obtain “strong consistency” by requiring quorum reads and writes (*w* + *r* > *n*). Depending on the exact configuration of the quorums, and depending on how you define strong consistency, this is not quite true.",
											"“Last write wins” conflict resolution methods based on time-of-day clocks (e.g., in Cassandra; see [“Relying on Synchronized Clocks”]()) are almost certainly nonlinearizable, because clock timestamps cannot be guaranteed to be consistent with actual event ordering due to clock skew. Sloppy quorums ([“Sloppy Quorums and Hinted Handoff”]()) also ruin any chance of linearizability. Even with strict quorums, nonlinearizable behavior is possible, as demonstrated in the next section.",
											"### **Linearizability and quorums**",
											"Intuitively, it seems as though strict quorum reads and writes should be linearizable in a Dynamo-style model. However, when we have variable network delays, it is possible to have race conditions, as demonstrated in [Figure 9-6](blob:https://johnfactotum.github.io/08af1efc-0362-4479-878a-645f5b08c432#fig_consistency_leaderless).",
											"![ddia 0906](blob:https://johnfactotum.github.io/04c55d00-3352-4193-9d94-d915df2f364d)",
											"###### *Figure 9-6. A nonlinearizable execution, despite using a strict quorum.*",
											"In [Figure 9-6](blob:https://johnfactotum.github.io/08af1efc-0362-4479-878a-645f5b08c432#fig_consistency_leaderless), the initial value of *x* is 0, and a writer client is updating *x* to 1 by sending the write to all three replicas (*n* = 3, *w* = 3). Concurrently, client A reads from a quorum of two nodes (*r* = 2) and sees the new value 1 on one of the nodes. Also concurrently with the write, client B reads from a different quorum of two nodes, and gets back the old value 0 from both.",
											"The quorum condition is met (*w* + *r* > *n*), but this execution is nevertheless not linearizable: B’s request begins after A’s request completes, but B returns the old value while A returns the new value. (It’s once again the Alice and Bob situation from [Figure 9-1](blob:https://johnfactotum.github.io/08af1efc-0362-4479-878a-645f5b08c432#fig_consistency_linearizability_0).)",
											"Interestingly, it *is* possible to make Dynamo-style quorums linearizable at the cost of reduced performance: a reader must perform read repair (see [“Read repair and anti-entropy”]()) synchronously, before returning results to the application \\[[23]()\\], and a writer must read the latest state of a quorum of nodes before sending its writes \\[[24](), [25]()\\]. However, Riak does not perform synchronous read repair due to the performance penalty \\[[26]()\\]. Cassandra *does* wait for read repair to complete on quorum reads \\[[27]()\\], but it loses linearizability if there are multiple concurrent writes to the same key, due to its use of last-write-wins conflict resolution.",
											"Moreover, only linearizable read and write operations can be implemented in this way; a linearizable compare-and-set operation cannot, because it requires a consensus algorithm \\[[28]()\\].",
											"In summary, it is safest to assume that a leaderless system with Dynamo-style replication does not provide linearizability.",
											"## **The Cost of Linearizability**",
											"As some replication methods can provide linearizability and others cannot, it is interesting to explore the pros and cons of linearizability in more depth.",
											"We already discussed some use cases for different replication methods in [Chapter 5](); for example, we saw that multi-leader replication is often a good choice for multi-datacenter replication (see [“Multi-datacenter operation”]()). An example of such a deployment is illustrated in [Figure 9-7](blob:https://johnfactotum.github.io/08af1efc-0362-4479-878a-645f5b08c432#fig_consistency_cap_availability).",
											"![ddia 0907](blob:https://johnfactotum.github.io/3ab18ed6-8a54-422d-b9fd-d7b17385623a)",
											"###### *Figure 9-7. A network interruption forcing a choice between linearizability and availability.*",
											"Consider what happens if there is a network interruption between the two datacenters. Let’s assume that the network within each datacenter is working, and clients can reach the datacenters, but the datacenters cannot connect to each other.",
											"With a multi-leader database, each datacenter can continue operating normally: since writes from one datacenter are asynchronously replicated to the other, the writes are simply queued up and exchanged when network connectivity is restored.",
											"On the other hand, if single-leader replication is used, then the leader must be in one of the datacenters. Any writes and any linearizable reads must be sent to the leader—thus, for any clients connected to a follower datacenter, those read and write requests must be sent synchronously over the network to the leader datacenter.",
											"If the network between datacenters is interrupted in a single-leader setup, clients connected to follower datacenters cannot contact the leader, so they cannot make any writes to the database, nor any linearizable reads. They can still make reads from the follower, but they might be stale (nonlinearizable). If the application requires linearizable reads and writes, the network interruption causes the application to become unavailable in the datacenters that cannot contact the leader.",
											"If clients can connect directly to the leader datacenter, this is not a problem, since the application continues to work normally there. But clients that can only reach a follower datacenter will experience an outage until the network link is repaired.",
											"### **The CAP theorem**",
											"This issue is not just a consequence of single-leader and multi-leader replication: any linearizable database has this problem, no matter how it is implemented. The issue also isn’t specific to multi-datacenter deployments, but can occur on any unreliable network, even within one datacenter. The trade-off is as follows:[v]()",
											"* If your application *requires* linearizability, and some replicas are disconnected from the other replicas due to a network problem, then some replicas cannot process requests while they are disconnected: they must either wait until the network problem is fixed, or return an error (either way, they become *unavailable*).",
											"* If your application *does not require* linearizability, then it can be written in a way that each replica can process requests independently, even if it is disconnected from other replicas (e.g., multi-leader). In this case, the application can remain *available* in the face of a network problem, but its behavior is not linearizable.",
											"Thus, applications that don’t require linearizability can be more tolerant of network problems. This insight is popularly known as the *CAP theorem* \\[[29](), [30](), [31](), [32]()\\], named by Eric Brewer in 2000, although the trade-off has been known to designers of distributed databases since the 1970s \\[[33](), [34](), [35](), [36]()\\].",
											"CAP was originally proposed as a rule of thumb, without precise definitions, with the goal of starting a discussion about trade-offs in databases. At the time, many distributed databases focused on providing linearizable semantics on a cluster of machines with shared storage \\[[18]()\\], and CAP encouraged database engineers to explore a wider design space of distributed shared-nothing systems, which were more suitable for implementing large-scale web services \\[[37]()\\]. CAP deserves credit for this culture shift—witness the explosion of new database technologies since the mid-2000s (known as NoSQL).",
											"##### **The Unhelpful CAP Theorem**",
											"CAP is sometimes presented as *Consistency, Availability, Partition tolerance: pick 2 out of 3*. Unfortunately, putting it this way is misleading \\[[32]()\\] because network partitions are a kind of fault, so they aren’t something about which you have a choice: they will happen whether you like it or not \\[[38]()\\].",
											"At times when the network is working correctly, a system can provide both consistency (linearizability) and total availability. When a network fault occurs, you have to choose between either linearizability or total availability. Thus, a better way of phrasing CAP would be *either Consistent or Available when Partitioned* \\[[39]()\\]. A more reliable network needs to make this choice less often, but at some point the choice is inevitable.",
											"In discussions of CAP there are several contradictory definitions of the term *availability*, and the formalization as a theorem \\[[30]()\\] does not match its usual meaning \\[[40]()\\]. Many so-called “highly available” (fault-tolerant) systems actually do not meet CAP’s idiosyncratic definition of availability. All in all, there is a lot of misunderstanding and confusion around CAP, and it does not help us understand systems better, so CAP is best avoided.",
											"The CAP theorem as formally defined \\[[30]()\\] is of very narrow scope: it only considers one consistency model (namely linearizability) and one kind of fault (*network partitions*,[vi]() or nodes that are alive but disconnected from each other). It doesn’t say anything about network delays, dead nodes, or other trade-offs. Thus, although CAP has been historically influential, it has little practical value for designing systems \\[[9](), [40]()\\].",
											"There are many more interesting impossibility results in distributed systems \\[[41]()\\], and CAP has now been superseded by more precise results \\[[2](), [42]()\\], so it is of mostly historical interest today.",
											"### **Linearizability and network delays**",
											"Although linearizability is a useful guarantee, surprisingly few systems are actually linearizable in practice. For example, even RAM on a modern multi-core CPU is not linearizable \\[[43]()\\]: if a thread running on one CPU core writes to a memory address, and a thread on another CPU core reads the same address shortly afterward, it is not guaranteed to read the value written by the first thread (unless a *memory barrier* or *fence* \\[[44]()\\] is used).",
											"The reason for this behavior is that every CPU core has its own memory cache and store buffer. Memory access first goes to the cache by default, and any changes are asynchronously written out to main memory. Since accessing data in the cache is much faster than going to main memory \\[[45]()\\], this feature is essential for good performance on modern CPUs. However, there are now several copies of the data (one in main memory, and perhaps several more in various caches), and these copies are asynchronously updated, so linearizability is lost.",
											"Why make this trade-off? It makes no sense to use the CAP theorem to justify the multi-core memory consistency model: within one computer we usually assume reliable communication, and we don’t expect one CPU core to be able to continue operating normally if it is disconnected from the rest of the computer. The reason for dropping linearizability is *performance*, not fault tolerance.",
											"The same is true of many distributed databases that choose not to provide linearizable guarantees: they do so primarily to increase performance, not so much for fault tolerance \\[[46]()\\]. Linearizability is slow—and this is true all the time, not only during a network fault.",
											"Can’t we maybe find a more efficient implementation of linearizable storage? It seems the answer is no: Attiya and Welch \\[[47]()\\] prove that if you want linearizability, the response time of read and write requests is at least proportional to the uncertainty of delays in the network. In a network with highly variable delays, like most computer networks (see [“Timeouts and Unbounded Delays”]()), the response time of linearizable reads and writes is inevitably going to be high. A faster algorithm for linearizability does not exist, but weaker consistency models can be much faster, so this trade-off is important for latency-sensitive systems. In [Chapter 12]() we will discuss some approaches for avoiding linearizability without sacrificing correctness.",
										],
										summary: [
											"Linearizability ensures consistent data across nodes, preventing conflicts and maintaining system integrity.",
										],
										longSummary: [
											"Linearizability ensures consistency in distributed systems, crucial for locking, leader election, and preventing split brain scenarios in services like ZooKeeper and etcd. It maintains uniqueness constraints, such as usernames and file paths, and prevents issues like negative balances or double-booking by ensuring nodes agree on a single, current value. Systems with cross-channel timing dependencies rely on it to avoid race conditions. While single-leader replication and consensus algorithms can achieve linearizability, multi-leader and leaderless replication typically cannot. The CAP theorem suggests that during network partitions, systems often sacrifice linearizability for availability and performance.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289486/blog-cover-images/zhelwzivjbjeyhd76kip.webp",
									},
								],
							],
							summary: [
								"Linearizability ensures consistent data views, crucial for preventing race conditions and maintaining system integrity.",
							],
							longSummary: [
								"In an eventually consistent database, replicas may provide inconsistent answers, causing confusion. Linearizability ensures operations appear atomic, creating the illusion of a single data copy. Once a client completes a write, all clients see the most recent data, unlike Alice seeing a World Cup result while Bob sees outdated information. Linearizability guarantees recency, differing from serializability, which focuses on transaction isolation. It's crucial for locking, leader election, and uniqueness constraints but often sacrificed for performance due to network delays, as highlighted by the CAP theorem.",
							],
							imageUrl:
								"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289467/blog-cover-images/avjlj7zmoupdzqpgahcd.webp",
						},
						{
							heading: ["# **Ordering Guarantees**"],
							children: [
								"We said previously that a linearizable register behaves as if there is only a single copy of the data, and that every operation appears to take effect atomically at one point in time. This definition implies that operations are executed in some well-defined order. We illustrated the ordering in [Figure 9-4](blob:https://johnfactotum.github.io/08af1efc-0362-4479-878a-645f5b08c432#fig_consistency_linearizability_3) by joining up the operations in the order in which they seem to have executed.",
								"Ordering has been a recurring theme in this book, which suggests that it might be an important fundamental idea. Let’s briefly recap some of the other contexts in which we have discussed ordering:",
								"* In [Chapter 5]() we saw that the main purpose of the leader in single-leader replication is to determine the *order of writes* in the replication log—that is, the order in which followers apply those writes. If there is no single leader, conflicts can occur due to concurrent operations (see [“Handling Write Conflicts”]()).",
								"* Serializability, which we discussed in [Chapter 7](), is about ensuring that transactions behave as if they were executed in *some sequential order*. It can be achieved by literally executing transactions in that serial order, or by allowing concurrent execution while preventing serialization conflicts (by locking or aborting).",
								"* The use of timestamps and clocks in distributed systems that we discussed in [Chapter 8]() (see [“Relying on Synchronized Clocks”]()) is another attempt to introduce order into a disorderly world, for example to determine which one of two writes happened later.",
								"It turns out that there are deep connections between ordering, linearizability, and consensus. Although this notion is a bit more theoretical and abstract than the rest of this book, it is very helpful for clarifying our understanding of what systems can and cannot do. We will explore this topic in the next few sections.",
								[
									{
										heading: [
											"## **Ordering and Causality**",
										],
										children: [
											"There are several reasons why ordering keeps coming up, and one of the reasons is that it helps preserve *causality*. We have already seen several examples over the course of this book where causality has been important:",
											"* In [“Consistent Prefix Reads”]() ([Figure 5-5]()) we saw an example where the observer of a conversation saw first the answer to a question, and then the question being answered. This is confusing because it violates our intuition of cause and effect: if a question is answered, then clearly the question had to be there first, because the person giving the answer must have seen the question (assuming they are not psychic and cannot see into the future). We say that there is a *causal dependency* between the question and the answer.",
											"* A similar pattern appeared in [Figure 5-9](), where we looked at the replication between three leaders and noticed that some writes could “overtake” others due to network delays. From the perspective of one of the replicas it would look as though there was an update to a row that did not exist. Causality here means that a row must first be created before it can be updated.",
											"* In [“Detecting Concurrent Writes”]() we observed that if you have two operations A and B, there are three possibilities: either A happened before B, or B happened before A, or A and B are concurrent. This *happened before* relationship is another expression of causality: if A happened before B, that means B might have known about A, or built upon A, or depended on A. If A and B are concurrent, there is no causal link between them; in other words, we are sure that neither knew about the other.",
											"* In the context of snapshot isolation for transactions ([“Snapshot Isolation and Repeatable Read”]()), we said that a transaction reads from a consistent snapshot. But what does “consistent” mean in this context? It means *consistent with causality*: if the snapshot contains an answer, it must also contain the question being answered \\[[48]()\\]. Observing the entire database at a single point in time makes it consistent with causality: the effects of all operations that happened causally before that point in time are visible, but no operations that happened causally afterward can be seen. Read skew (non-repeatable reads, as illustrated in [Figure 7-6]()) means reading data in a state that violates causality.",
											"* Our examples of write skew between transactions (see [“Write Skew and Phantoms”]()) also demonstrated causal dependencies: in [Figure 7-8](), Alice was allowed to go off call because the transaction thought that Bob was still on call, and vice versa. In this case, the action of going off call is causally dependent on the observation of who is currently on call. Serializable snapshot isolation (see [“Serializable Snapshot Isolation (SSI)”]()) detects write skew by tracking the causal dependencies between transactions.",
											"* In the example of Alice and Bob watching football ([Figure 9-1](blob:https://johnfactotum.github.io/08af1efc-0362-4479-878a-645f5b08c432#fig_consistency_linearizability_0)), the fact that Bob got a stale result from the server after hearing Alice exclaim the result is a causality violation: Alice’s exclamation is causally dependent on the announcement of the score, so Bob should also be able to see the score after hearing Alice. The same pattern appeared again in [“Cross-channel timing dependencies”](blob:https://johnfactotum.github.io/08af1efc-0362-4479-878a-645f5b08c432#sec_consistency_multi_channel) in the guise of an image resizing service.",
											"Causality imposes an ordering on events: cause comes before effect; a message is sent before that message is received; the question comes before the answer. And, like in real life, one thing leads to another: one node reads some data and then writes something as a result, another node reads the thing that was written and writes something else in turn, and so on. These chains of causally dependent operations define the causal order in the system—i.e., what happened before what.",
											"If a system obeys the ordering imposed by causality, we say that it is *causally consistent*. For example, snapshot isolation provides causal consistency: when you read from the database, and you see some piece of data, then you must also be able to see any data that causally precedes it (assuming it has not been deleted in the meantime).",
											"### **The causal order is not a total order**",
											"A *total order* allows any two elements to be compared, so if you have two elements, you can always say which one is greater and which one is smaller. For example, natural numbers are totally ordered: if I give you any two numbers, say 5 and 13, you can tell me that 13 is greater than 5.",
											"However, mathematical sets are not totally ordered: is {*a*, *b*} greater than {*b*, *c*}? Well, you can’t really compare them, because neither is a subset of the other. We say they are *incomparable*, and therefore mathematical sets are *partially ordered*: in some cases one set is greater than another (if one set contains all the elements of another), but in other cases they are incomparable.",
											"The difference between a total order and a partial order is reflected in different database consistency models:",
											"Linearizability",
											"In a linearizable system, we have a *total order* of operations: if the system behaves as if there is only a single copy of the data, and every operation is atomic, this means that for any two operations we can always say which one happened first. This total ordering is illustrated as a timeline in [Figure 9-4](blob:https://johnfactotum.github.io/08af1efc-0362-4479-878a-645f5b08c432#fig_consistency_linearizability_3).",
											"Causality",
											"We said that two operations are concurrent if neither happened before the other (see [“The “happens-before” relationship and concurrency”]()). Put another way, two events are ordered if they are causally related (one happened before the other), but they are incomparable if they are concurrent. This means that causality defines a *partial order*, not a total order: some operations are ordered with respect to each other, but some are incomparable.",
											"Therefore, according to this definition, there are no concurrent operations in a linearizable datastore: there must be a single timeline along which all operations are totally ordered. There might be several requests waiting to be handled, but the datastore ensures that every request is handled atomically at a single point in time, acting on a single copy of the data, along a single timeline, without any concurrency.",
											"Concurrency would mean that the timeline branches and merges again—and in this case, operations on different branches are incomparable (i.e., concurrent). We saw this phenomenon in [Chapter 5](): for example, [Figure 5-14]() is not a straight-line total order, but rather a jumble of different operations going on concurrently. The arrows in the diagram indicate causal dependencies—the partial ordering of operations.",
											"If you are familiar with distributed version control systems such as Git, their version histories are very much like the graph of causal dependencies. Often one commit happens after another, in a straight line, but sometimes you get branches (when several people concurrently work on a project), and merges are created when those concurrently created commits are combined.",
											"### **Linearizability is stronger than causal consistency**",
											"So what is the relationship between the causal order and linearizability? The answer is that linearizability *implies* causality: any system that is linearizable will preserve causality correctly \\[[7]()\\]. In particular, if there are multiple communication channels in a system (such as the message queue and the file storage service in [Figure 9-5](blob:https://johnfactotum.github.io/08af1efc-0362-4479-878a-645f5b08c432#fig_consistency_thumbnailer)), linearizability ensures that causality is automatically preserved without the system having to do anything special (such as passing around timestamps between different components).",
											"The fact that linearizability ensures causality is what makes linearizable systems simple to understand and appealing. However, as discussed in [“The Cost of Linearizability”](blob:https://johnfactotum.github.io/08af1efc-0362-4479-878a-645f5b08c432#sec_linearizability_cost), making a system linearizable can harm its performance and availability, especially if the system has significant network delays (for example, if it’s geographically distributed). For this reason, some distributed data systems have abandoned linearizability, which allows them to achieve better performance but can make them difficult to work with.",
											"The good news is that a middle ground is possible. Linearizability is not the only way of preserving causality—there are other ways too. A system can be causally consistent without incurring the performance hit of making it linearizable (in particular, the CAP theorem does not apply). In fact, causal consistency is the strongest possible consistency model that does not slow down due to network delays, and remains available in the face of network failures \\[[2](), [42]()\\].",
											"In many cases, systems that appear to require linearizability in fact only really require causal consistency, which can be implemented more efficiently. Based on this observation, researchers are exploring new kinds of databases that preserve causality, with performance and availability characteristics that are similar to those of eventually consistent systems \\[[49](), [50](), [51]()\\].",
											"As this research is quite recent, not much of it has yet made its way into production systems, and there are still challenges to be overcome \\[[52](), [53]()\\]. However, it is a promising direction for future systems.",
											"### **Capturing causal dependencies**",
											"We won’t go into all the nitty-gritty details of how nonlinearizable systems can maintain causal consistency here, but just briefly explore some of the key ideas.",
											"In order to maintain causality, you need to know which operation *happened before* which other operation. This is a partial order: concurrent operations may be processed in any order, but if one operation happened before another, then they must be processed in that order on every replica. Thus, when a replica processes an operation, it must ensure that all causally preceding operations (all operations that happened before) have already been processed; if some preceding operation is missing, the later operation must wait until the preceding operation has been processed.",
											"In order to determine causal dependencies, we need some way of describing the “knowledge” of a node in the system. If a node had already seen the value X when it issued the write Y, then X and Y may be causally related. The analysis uses the kinds of questions you would expect in a criminal investigation of fraud charges: did the CEO *know* about X at the time when they made decision Y?",
											"The techniques for determining which operation happened before which other operation are similar to what we discussed in [“Detecting Concurrent Writes”](). That section discussed causality in a leaderless datastore, where we need to detect concurrent writes to the same key in order to prevent lost updates. Causal consistency goes further: it needs to track causal dependencies across the entire database, not just for a single key. Version vectors can be generalized to do this \\[[54]()\\].",
											"In order to determine the causal ordering, the database needs to know which version of the data was read by the application. This is why, in [Figure 5-13](), the version number from the prior operation is passed back to the database on a write. A similar idea appears in the conflict detection of SSI, as discussed in [“Serializable Snapshot Isolation (SSI)”](): when a transaction wants to commit, the database checks whether the version of the data that it read is still up to date. To this end, the database keeps track of which data has been read by which transaction.",
											"## **Sequence Number Ordering**",
											"Although causality is an important theoretical concept, actually keeping track of all causal dependencies can become impractical. In many applications, clients read lots of data before writing something, and then it is not clear whether the write is causally dependent on all or only some of those prior reads. Explicitly tracking all the data that has been read would mean a large overhead.",
											"However, there is a better way: we can use *sequence numbers* or *timestamps* to order events. A timestamp need not come from a time-of-day clock (or physical clock, which have many problems, as discussed in [“Unreliable Clocks”]()). It can instead come from a *logical clock*, which is an algorithm to generate a sequence of numbers to identify operations, typically using counters that are incremented for every operation.",
											"Such sequence numbers or timestamps are compact (only a few bytes in size), and they provide a *total order*: that is, every operation has a unique sequence number, and you can always compare two sequence numbers to determine which is greater (i.e., which operation happened later).",
											"In particular, we can create sequence numbers in a total order that is *consistent with causality*:[vii]() we promise that if operation A causally happened before B, then A occurs before B in the total order (A has a lower sequence number than B). Concurrent operations may be ordered arbitrarily. Such a total order captures all the causality information, but also imposes more ordering than strictly required by causality.",
											"In a database with single-leader replication (see [“Leaders and Followers”]()), the replication log defines a total order of write operations that is consistent with causality. The leader can simply increment a counter for each operation, and thus assign a monotonically increasing sequence number to each operation in the replication log. If a follower applies the writes in the order they appear in the replication log, the state of the follower is always causally consistent (even if it is lagging behind the leader).",
											"### **Noncausal sequence number generators**",
											"If there is not a single leader (perhaps because you are using a multi-leader or leaderless database, or because the database is partitioned), it is less clear how to generate sequence numbers for operations. Various methods are used in practice:",
											"* Each node can generate its own independent set of sequence numbers. For example, if you have two nodes, one node can generate only odd numbers and the other only even numbers. In general, you could reserve some bits in the binary representation of the sequence number to contain a unique node identifier, and this would ensure that two different nodes can never generate the same sequence number.",
											"* You can attach a timestamp from a time-of-day clock (physical clock) to each operation \\[[55]()\\]. Such timestamps are not sequential, but if they have sufficiently high resolution, they might be sufficient to totally order operations. This fact is used in the last write wins conflict resolution method (see [“Timestamps for ordering events”]()).",
											"* You can preallocate blocks of sequence numbers. For example, node A might claim the block of sequence numbers from 1 to 1,000, and node B might claim the block from 1,001 to 2,000. Then each node can independently assign sequence numbers from its block, and allocate a new block when its supply of sequence numbers begins to run low.",
											"These three options all perform better and are more scalable than pushing all operations through a single leader that increments a counter. They generate a unique, approximately increasing sequence number for each operation. However, they all have a problem: the sequence numbers they generate are *not consistent with causality*.",
											"The causality problems occur because these sequence number generators do not correctly capture the ordering of operations across different nodes:",
											"* Each node may process a different number of operations per second. Thus, if one node generates even numbers and the other generates odd numbers, the counter for even numbers may lag behind the counter for odd numbers, or vice versa. If you have an odd-numbered operation and an even-numbered operation, you cannot accurately tell which one causally happened first.",
											"* Timestamps from physical clocks are subject to clock skew, which can make them inconsistent with causality. For example, see [Figure 8-3](), which shows a scenario in which an operation that happened causally later was actually assigned a lower timestamp.[viii]()",
											"* In the case of the block allocator, one operation may be given a sequence number in the range from 1,001 to 2,000, and a causally later operation may be given a number in the range from 1 to 1,000. Here, again, the sequence number is inconsistent with causality.",
											"### **Lamport timestamps**",
											"Although the three sequence number generators just described are inconsistent with causality, there is actually a simple method for generating sequence numbers that *is* consistent with causality. It is called a *Lamport timestamp*, proposed in 1978 by Leslie Lamport \\[[56]()\\], in what is now one of the most-cited papers in the field of distributed systems.",
											"The use of Lamport timestamps is illustrated in [Figure 9-8](blob:https://johnfactotum.github.io/08af1efc-0362-4479-878a-645f5b08c432#fig_consistency_lamport_ts). Each node has a unique identifier, and each node keeps a counter of the number of operations it has processed. The Lamport timestamp is then simply a pair of (*counter*, *node ID*). Two nodes may sometimes have the same counter value, but by including the node ID in the timestamp, each timestamp is made unique.",
											"![ddia 0908](blob:https://johnfactotum.github.io/0a9783cf-ac6b-4488-8f3a-510620f4dd66)",
											"###### *Figure 9-8. Lamport timestamps provide a total ordering consistent with causality.*",
											"A Lamport timestamp bears no relationship to a physical time-of-day clock, but it provides total ordering: if you have two timestamps, the one with a greater counter value is the greater timestamp; if the counter values are the same, the one with the greater node ID is the greater timestamp.",
											"So far this description is essentially the same as the even/odd counters described in the last section. The key idea about Lamport timestamps, which makes them consistent with causality, is the following: every node and every client keeps track of the *maximum* counter value it has seen so far, and includes that maximum on every request. When a node receives a request or response with a maximum counter value greater than its own counter value, it immediately increases its own counter to that maximum.",
											"This is shown in [Figure 9-8](blob:https://johnfactotum.github.io/08af1efc-0362-4479-878a-645f5b08c432#fig_consistency_lamport_ts), where client A receives a counter value of 5 from node 2, and then sends that maximum of 5 to node 1. At that time, node 1’s counter was only 1, but it was immediately moved forward to 5, so the next operation had an incremented counter value of 6.",
											"As long as the maximum counter value is carried along with every operation, this scheme ensures that the ordering from the Lamport timestamps is consistent with causality, because every causal dependency results in an increased timestamp.",
											"Lamport timestamps are sometimes confused with version vectors, which we saw in [“Detecting Concurrent Writes”](). Although there are some similarities, they have a different purpose: version vectors can distinguish whether two operations are concurrent or whether one is causally dependent on the other, whereas Lamport timestamps always enforce a total ordering. From the total ordering of Lamport timestamps, you cannot tell whether two operations are concurrent or whether they are causally dependent. The advantage of Lamport timestamps over version vectors is that they are more compact.",
											"### **Timestamp ordering is not sufficient**",
											"Although Lamport timestamps define a total order of operations that is consistent with causality, they are not quite sufficient to solve many common problems in distributed systems.",
											"For example, consider a system that needs to ensure that a username uniquely identifies a user account. If two users concurrently try to create an account with the same username, one of the two should succeed and the other should fail. (We touched on this problem previously in [“The leader and the lock”]().)",
											"At first glance, it seems as though a total ordering of operations (e.g., using Lamport timestamps) should be sufficient to solve this problem: if two accounts with the same username are created, pick the one with the lower timestamp as the winner (the one who grabbed the username first), and let the one with the greater timestamp fail. Since timestamps are totally ordered, this comparison is always valid.",
											"This approach works for determining the winner after the fact: once you have collected all the username creation operations in the system, you can compare their timestamps. However, it is not sufficient when a node has just received a request from a user to create a username, and needs to decide *right now* whether the request should succeed or fail. At that moment, the node does not know whether another node is concurrently in the process of creating an account with the same username, and what timestamp that other node may assign to the operation.",
											"In order to be sure that no other node is in the process of concurrently creating an account with the same username and a lower timestamp, you would have to check with every other node to see what it is doing \\[[56]()\\]. If one of the other nodes has failed or cannot be reached due to a network problem, this system would grind to a halt. This is not the kind of fault-tolerant system that we need.",
											"The problem here is that the total order of operations only emerges after you have collected all of the operations. If another node has generated some operations, but you don’t yet know what they are, you cannot construct the final ordering of operations: the unknown operations from the other node may need to be inserted at various positions in the total order.",
											"To conclude: in order to implement something like a uniqueness constraint for usernames, it’s not sufficient to have a total ordering of operations—you also need to know when that order is finalized. If you have an operation to create a username, and you are sure that no other node can insert a claim for the same username ahead of your operation in the total order, then you can safely declare the operation successful.",
											"This idea of knowing when your total order is finalized is captured in the topic of *total order broadcast*.",
										],
										summary: [
											"Causal consistency ensures order in distributed systems, balancing availability and performance during network issues.",
										],
										longSummary: [
											"In distributed systems, ordering is vital to maintain causality, ensuring causes precede effects. Causality creates a partial order, allowing some operations to be ordered while concurrent ones remain incomparable. Linearizability provides a total order but reduces performance and availability during network delays. Causal consistency is the strongest model available during network failures, requiring tracking of operation precedence. Sequence numbers or timestamps can establish a total order consistent with causality, with Lamport timestamps using a counter and node ID. However, timestamp ordering alone can't enforce uniqueness constraints, necessitating total order broadcast to finalize order.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289493/blog-cover-images/gx9gzwhj29fvwell8xsc.webp",
									},
									{
										heading: [
											"## **Total Order Broadcast**",
										],
										children: [
											"If your program runs only on a single CPU core, it is easy to define a total ordering of operations: it is simply the order in which they were executed by the CPU. However, in a distributed system, getting all nodes to agree on the same total ordering of operations is tricky. In the last section we discussed ordering by timestamps or sequence numbers, but found that it is not as powerful as single-leader replication (if you use timestamp ordering to implement a uniqueness constraint, you cannot tolerate any faults).",
											"As discussed, single-leader replication determines a total order of operations by choosing one node as the leader and sequencing all operations on a single CPU core on the leader. The challenge then is how to scale the system if the throughput is greater than a single leader can handle, and also how to handle failover if the leader fails (see [“Handling Node Outages”]()). In the distributed systems literature, this problem is known as *total order broadcast* or *atomic broadcast* \\[[25](), [57](), [58]()\\].[ix]()",
											"# **Scope of ordering guarantee**",
											"Partitioned databases with a single leader per partition often maintain ordering only per partition, which means they cannot offer consistency guarantees (e.g., consistent snapshots, foreign key references) across partitions. Total ordering across all partitions is possible, but requires additional coordination \\[[59]()\\].",
											"Total order broadcast is usually described as a protocol for exchanging messages between nodes. Informally, it requires that two safety properties always be satisfied:",
											"Reliable delivery",
											"No messages are lost: if a message is delivered to one node, it is delivered to all nodes.",
											"Totally ordered delivery",
											"Messages are delivered to every node in the same order.",
											"A correct algorithm for total order broadcast must ensure that the reliability and ordering properties are always satisfied, even if a node or the network is faulty. Of course, messages will not be delivered while the network is interrupted, but an algorithm can keep retrying so that the messages get through when the network is eventually repaired (and then they must still be delivered in the correct order).",
											"### **Using total order broadcast**",
											"Consensus services such as ZooKeeper and etcd actually implement total order broadcast. This fact is a hint that there is a strong connection between total order broadcast and consensus, which we will explore later in this chapter.",
											"Total order broadcast is exactly what you need for database replication: if every message represents a write to the database, and every replica processes the same writes in the same order, then the replicas will remain consistent with each other (aside from any temporary replication lag). This principle is known as *state machine replication* \\[[60]()\\], and we will return to it in [Chapter 11]().",
											"Similarly, total order broadcast can be used to implement serializable transactions: as discussed in [“Actual Serial Execution”](), if every message represents a deterministic transaction to be executed as a stored procedure, and if every node processes those messages in the same order, then the partitions and replicas of the database are kept consistent with each other \\[[61]()\\].",
											"An important aspect of total order broadcast is that the order is fixed at the time the messages are delivered: a node is not allowed to retroactively insert a message into an earlier position in the order if subsequent messages have already been delivered. This fact makes total order broadcast stronger than timestamp ordering.",
											"Another way of looking at total order broadcast is that it is a way of creating a *log* (as in a replication log, transaction log, or write-ahead log): delivering a message is like appending to the log. Since all nodes must deliver the same messages in the same order, all nodes can read the log and see the same sequence of messages.",
											"Total order broadcast is also useful for implementing a lock service that provides fencing tokens (see [“Fencing tokens”]()). Every request to acquire the lock is appended as a message to the log, and all messages are sequentially numbered in the order they appear in the log. The sequence number can then serve as a fencing token, because it is monotonically increasing. In ZooKeeper, this sequence number is called `zxid` \\[[15]()\\].",
											"### **Implementing linearizable storage using total order broadcast**",
											"As illustrated in [Figure 9-4](blob:https://johnfactotum.github.io/08af1efc-0362-4479-878a-645f5b08c432#fig_consistency_linearizability_3), in a linearizable system there is a total order of operations. Does that mean linearizability is the same as total order broadcast? Not quite, but there are close links between the two.[x]()",
											"Total order broadcast is asynchronous: messages are guaranteed to be delivered reliably in a fixed order, but there is no guarantee about *when* a message will be delivered (so one recipient may lag behind the others). By contrast, linearizability is a recency guarantee: a read is guaranteed to see the latest value written.",
											"However, if you have total order broadcast, you can build linearizable storage on top of it. For example, you can ensure that usernames uniquely identify user accounts.",
											"Imagine that for every possible username, you can have a linearizable register with an atomic compare-and-set operation. Every register initially has the value `null` (indicating that the username is not taken). When a user wants to create a username, you execute a compare-and-set operation on the register for that username, setting it to the user account ID, under the condition that the previous register value is `null`. If multiple users try to concurrently grab the same username, only one of the compare-and-set operations will succeed, because the others will see a value other than `null` (due to linearizability).",
											"You can implement such a linearizable compare-and-set operation as follows by using total order broadcast as an append-only log \\[[62](), [63]()\\]:",
											"1. Append a message to the log, tentatively indicating the username you want to claim.",
											"2. Read the log, and wait for the message you appended to be delivered back to you.[xi]()",
											"3. Check for any messages claiming the username that you want. If the first message for your desired username is your own message, then you are successful: you can commit the username claim (perhaps by appending another message to the log) and acknowledge it to the client. If the first message for your desired username is from another user, you abort the operation.",
											"Because log entries are delivered to all nodes in the same order, if there are several concurrent writes, all nodes will agree on which one came first. Choosing the first of the conflicting writes as the winner and aborting later ones ensures that all nodes agree on whether a write was committed or aborted. A similar approach can be used to implement serializable multi-object transactions on top of a log \\[[62]()\\].",
											"While this procedure ensures linearizable writes, it doesn’t guarantee linearizable reads—if you read from a store that is asynchronously updated from the log, it may be stale. (To be precise, the procedure described here provides *sequential consistency* \\[[47](), [64]()\\], sometimes also known as *timeline consistency* \\[[65](), [66]()\\], a slightly weaker guarantee than linearizability.) To make reads linearizable, there are a few options:",
											"* You can sequence reads through the log by appending a message, reading the log, and performing the actual read when the message is delivered back to you. The message’s position in the log thus defines the point in time at which the read happens. (Quorum reads in etcd work somewhat like this \\[[16]()\\].)",
											"* If the log allows you to fetch the position of the latest log message in a linearizable way, you can query that position, wait for all entries up to that position to be delivered to you, and then perform the read. (This is the idea behind ZooKeeper’s `sync()` operation \\[[15]()\\].)",
											"* You can make your read from a replica that is synchronously updated on writes, and is thus sure to be up to date. (This technique is used in chain replication \\[[63]()\\]; see also [“Research on Replication”]().)",
											"### **Implementing total order broadcast using linearizable storage**",
											"The last section showed how to build a linearizable compare-and-set operation from total order broadcast. We can also turn it around, assume that we have linearizable storage, and show how to build total order broadcast from it.",
											"The easiest way is to assume you have a linearizable register that stores an integer and that has an atomic increment-and-get operation \\[[28]()\\]. Alternatively, an atomic compare-and-set operation would also do the job.",
											"The algorithm is simple: for every message you want to send through total order broadcast, you increment-and-get the linearizable integer, and then attach the value you got from the register as a sequence number to the message. You can then send the message to all nodes (resending any lost messages), and the recipients will deliver the messages consecutively by sequence number.",
											"Note that unlike Lamport timestamps, the numbers you get from incrementing the linearizable register form a sequence with no gaps. Thus, if a node has delivered message 4 and receives an incoming message with a sequence number of 6, it knows that it must wait for message 5 before it can deliver message 6. The same is not the case with Lamport timestamps—in fact, this is the key difference between total order broadcast and timestamp ordering.",
											"How hard could it be to make a linearizable integer with an atomic increment-and-get operation? As usual, if things never failed, it would be easy: you could just keep it in a variable on one node. The problem lies in handling the situation when network connections to that node are interrupted, and restoring the value when that node fails \\[[59]()\\]. In general, if you think hard enough about linearizable sequence number generators, you inevitably end up with a consensus algorithm.",
											"This is no coincidence: it can be proved that a linearizable compare-and-set (or increment-and-get) register and total order broadcast are both *equivalent to consensus* \\[[28](), [67]()\\]. That is, if you can solve one of these problems, you can transform it into a solution for the others. This is quite a profound and surprising insight!",
											"It is time to finally tackle the consensus problem head-on, which we will do in the rest of this chapter.",
										],
										summary: [
											"Mastering total order broadcast and linearizability is key to solving consensus in distributed systems.",
										],
										longSummary: [
											"In distributed systems, achieving total order of operations is challenging. Single-leader replication sequences operations on one node but faces scaling and failover issues. Total order broadcast ensures reliable, ordered message delivery across nodes, essential for database replication and serializable transactions. It can build linearizable storage using compare-and-set operations via an append-only log, though extra techniques are needed for linearizable reads. Conversely, total order broadcast can be achieved using linearizable storage with atomic operations. Both linearizable compare-and-set registers and total order broadcast equate to consensus, solving one helps solve the others.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289493/blog-cover-images/ab0qvzdfv5e5wqiuu0c5.webp",
									},
								],
							],
							summary: [
								"Explore the deep connections between ordering, linearizability, and consensus in distributed systems.",
							],
							longSummary: [
								"A linearizable register ensures operations appear atomic and ordered, akin to having a single data copy, which is crucial for maintaining causality in distributed systems. This concept is explored through various chapters, highlighting its role in single-leader replication, serializability, and timestamp ordering. Linearizability offers a total order of operations, stronger than causal consistency, but sacrifices performance and availability during network delays. Causal consistency, however, remains available during failures. Establishing total order is challenging, requiring techniques like total order broadcast and single-leader replication. Both linearizable storage and total order broadcast are equivalent to consensus, solving one aids in solving the others.",
							],
							imageUrl:
								"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289468/blog-cover-images/f7wiki3jwdwsvpjf9o0a.webp",
						},
						{
							heading: [
								"# **Distributed Transactions and Consensus**",
							],
							children: [
								"Consensus is one of the most important and fundamental problems in distributed computing. On the surface, it seems simple: informally, the goal is simply to *get several nodes to agree on something*. You might think that this shouldn’t be too hard. Unfortunately, many broken systems have been built in the mistaken belief that this problem is easy to solve.",
								"Although consensus is very important, the section about it appears late in this book because the topic is quite subtle, and appreciating the subtleties requires some prerequisite knowledge. Even in the academic research community, the understanding of consensus only gradually crystallized over the course of decades, with many misunderstandings along the way. Now that we have discussed replication ([Chapter 5]()), transactions ([Chapter 7]()), system models ([Chapter 8]()), linearizability, and total order broadcast (this chapter), we are finally ready to tackle the consensus problem.",
								"There are a number of situations in which it is important for nodes to agree. For example:",
								"Leader election",
								"In a database with single-leader replication, all nodes need to agree on which node is the leader. The leadership position might become contested if some nodes can’t communicate with others due to a network fault. In this case, consensus is important to avoid a bad failover, resulting in a split brain situation in which two nodes both believe themselves to be the leader (see [“Handling Node Outages”]()). If there were two leaders, they would both accept writes and their data would diverge, leading to inconsistency and data loss.",
								"Atomic commit",
								"In a database that supports transactions spanning several nodes or partitions, we have the problem that a transaction may fail on some nodes but succeed on others. If we want to maintain transaction atomicity (in the sense of ACID; see [“Atomicity”]()), we have to get all nodes to agree on the outcome of the transaction: either they all abort/roll back (if anything goes wrong) or they all commit (if nothing goes wrong). This instance of consensus is known as the *atomic commit* problem.[xii]()",
								"##### **The Impossibility of Consensus**",
								"You may have heard about the FLP result \\[[68]()\\]—named after the authors Fischer, Lynch, and Paterson—which proves that there is no algorithm that is always able to reach consensus if there is a risk that a node may crash. In a distributed system, we must assume that nodes may crash, so reliable consensus is impossible. Yet, here we are, discussing algorithms for achieving consensus. What is going on here?",
								"The answer is that the FLP result is proved in the asynchronous system model (see [“System Model and Reality”]()), a very restrictive model that assumes a deterministic algorithm that cannot use any clocks or timeouts. If the algorithm is allowed to use timeouts, or some other way of identifying suspected crashed nodes (even if the suspicion is sometimes wrong), then consensus becomes solvable \\[[67]()\\]. Even just allowing the algorithm to use random numbers is sufficient to get around the impossibility result \\[[69]()\\].",
								"Thus, although the FLP result about the impossibility of consensus is of great theoretical importance, distributed systems can usually achieve consensus in practice.",
								"In this section we will first examine the atomic commit problem in more detail. In particular, we will discuss the *two-phase commit* (2PC) algorithm, which is the most common way of solving atomic commit and which is implemented in various databases, messaging systems, and application servers. It turns out that 2PC is a kind of consensus algorithm—but not a very good one \\[[70](), [71]()\\].",
								"By learning from 2PC we will then work our way toward better consensus algorithms, such as those used in ZooKeeper (Zab) and etcd (Raft).",
								[
									{
										heading: [
											"## **Atomic Commit and Two-Phase Commit (2PC)**",
										],
										children: [
											"In [Chapter 7]() we learned that the purpose of transaction atomicity is to provide simple semantics in the case where something goes wrong in the middle of making several writes. The outcome of a transaction is either a successful *commit*, in which case all of the transaction’s writes are made durable, or an *abort*, in which case all of the transaction’s writes are rolled back (i.e., undone or discarded).",
											"Atomicity prevents failed transactions from littering the database with half-finished results and half-updated state. This is especially important for multi-object transactions (see [“Single-Object and Multi-Object Operations”]()) and databases that maintain secondary indexes. Each secondary index is a separate data structure from the primary data—thus, if you modify some data, the corresponding change needs to also be made in the secondary index. Atomicity ensures that the secondary index stays consistent with the primary data (if the index became inconsistent with the primary data, it would not be very useful).",
											"### **From single-node to distributed atomic commit**",
											"For transactions that execute at a single database node, atomicity is commonly implemented by the storage engine. When the client asks the database node to commit the transaction, the database makes the transaction’s writes durable (typically in a write-ahead log; see [“Making B-trees reliable”]()) and then appends a commit record to the log on disk. If the database crashes in the middle of this process, the transaction is recovered from the log when the node restarts: if the commit record was successfully written to disk before the crash, the transaction is considered committed; if not, any writes from that transaction are rolled back.",
											"Thus, on a single node, transaction commitment crucially depends on the *order* in which data is durably written to disk: first the data, then the commit record \\[[72]()\\]. The key deciding moment for whether the transaction commits or aborts is the moment at which the disk finishes writing the commit record: before that moment, it is still possible to abort (due to a crash), but after that moment, the transaction is committed (even if the database crashes). Thus, it is a single device (the controller of one particular disk drive, attached to one particular node) that makes the commit atomic.",
											"However, what if multiple nodes are involved in a transaction? For example, perhaps you have a multi-object transaction in a partitioned database, or a term-partitioned secondary index (in which the index entry may be on a different node from the primary data; see [“Partitioning and Secondary Indexes”]()). Most “NoSQL” distributed datastores do not support such distributed transactions, but various clustered relational systems do (see [“Distributed Transactions in Practice”](blob:https://johnfactotum.github.io/08af1efc-0362-4479-878a-645f5b08c432#sec_consistency_dist_trans)).",
											"In these cases, it is not sufficient to simply send a commit request to all of the nodes and independently commit the transaction on each one. In doing so, it could easily happen that the commit succeeds on some nodes and fails on other nodes, which would violate the atomicity guarantee:",
											"* Some nodes may detect a constraint violation or conflict, making an abort necessary, while other nodes are successfully able to commit.",
											"* Some of the commit requests might be lost in the network, eventually aborting due to a timeout, while other commit requests get through.",
											"* Some nodes may crash before the commit record is fully written and roll back on recovery, while others successfully commit.",
											"If some nodes commit the transaction but others abort it, the nodes become inconsistent with each other (like in [Figure 7-3]()). And once a transaction has been committed on one node, it cannot be retracted again if it later turns out that it was aborted on another node. For this reason, a node must only commit once it is certain that all other nodes in the transaction are also going to commit.",
											"A transaction commit must be irrevocable—you are not allowed to change your mind and retroactively abort a transaction after it has been committed. The reason for this rule is that once data has been committed, it becomes visible to other transactions, and thus other clients may start relying on that data; this principle forms the basis of *read committed* isolation, discussed in [“Read Committed”](). If a transaction was allowed to abort after committing, any transactions that read the committed data would be based on data that was retroactively declared not to have existed—so they would have to be reverted as well.",
											"(It is possible for the effects of a committed transaction to later be undone by another, *compensating transaction* \\[[73](), [74]()\\]. However, from the database’s point of view this is a separate transaction, and thus any cross-transaction correctness requirements are the application’s problem.)",
											"### **Introduction to two-phase commit**",
											"Two-phase commit is an algorithm for achieving atomic transaction commit across multiple nodes—i.e., to ensure that either all nodes commit or all nodes abort. It is a classic algorithm in distributed databases \\[[13](), [35](), [75]()\\]. 2PC is used internally in some databases and also made available to applications in the form of *XA transactions* \\[[76](), [77]()\\] (which are supported by the Java Transaction API, for example) or via WS-AtomicTransaction for SOAP web services \\[[78](), [79]()\\].",
											"The basic flow of 2PC is illustrated in [Figure 9-9](blob:https://johnfactotum.github.io/08af1efc-0362-4479-878a-645f5b08c432#fig_consistency_two_phase_commit). Instead of a single commit request, as with a single-node transaction, the commit/abort process in 2PC is split into two phases (hence the name).",
											"![ddia 0909](blob:https://johnfactotum.github.io/8e368c73-3b20-4eca-aa0d-dbc34d95f7e3)",
											"###### *Figure 9-9. A successful execution of two-phase commit (2PC).*",
											"# **Don’t confuse 2PC and 2PL**",
											"Two-phase *commit* (2PC) and two-phase *locking* (see [“Two-Phase Locking (2PL)”]()) are two very different things. 2PC provides atomic commit in a distributed database, whereas 2PL provides serializable isolation. To avoid confusion, it’s best to think of them as entirely separate concepts and to ignore the unfortunate similarity in the names.",
											"2PC uses a new component that does not normally appear in single-node transactions: a *coordinator* (also known as *transaction manager*). The coordinator is often implemented as a library within the same application process that is requesting the transaction (e.g., embedded in a Java EE container), but it can also be a separate process or service. Examples of such coordinators include Narayana, JOTM, BTM, or MSDTC.",
											"A 2PC transaction begins with the application reading and writing data on multiple database nodes, as normal. We call these database nodes *participants* in the transaction. When the application is ready to commit, the coordinator begins phase 1: it sends a *prepare* request to each of the nodes, asking them whether they are able to commit. The coordinator then tracks the responses from the participants:",
											"* If all participants reply “yes,” indicating they are ready to commit, then the coordinator sends out a *commit* request in phase 2, and the commit actually takes place.",
											"* If any of the participants replies “no,” the coordinator sends an *abort* request to all nodes in phase 2.",
											"This process is somewhat like the traditional marriage ceremony in Western cultures: the minister asks the bride and groom individually whether each wants to marry the other, and typically receives the answer “I do” from both. After receiving both acknowledgments, the minister pronounces the couple husband and wife: the transaction is committed, and the happy fact is broadcast to all attendees. If either bride or groom does not say “yes,” the ceremony is aborted \\[[73]()\\].",
											"### **A system of promises**",
											"From this short description it might not be clear why two-phase commit ensures atomicity, while one-phase commit across several nodes does not. Surely the prepare and commit requests can just as easily be lost in the two-phase case. What makes 2PC different?",
											"To understand why it works, we have to break down the process in a bit more detail:",
											"1. When the application wants to begin a distributed transaction, it requests a transaction ID from the coordinator. This transaction ID is globally unique.",
											"2. The application begins a single-node transaction on each of the participants, and attaches the globally unique transaction ID to the single-node transaction. All reads and writes are done in one of these single-node transactions. If anything goes wrong at this stage (for example, a node crashes or a request times out), the coordinator or any of the participants can abort.",
											"3. When the application is ready to commit, the coordinator sends a prepare request to all participants, tagged with the global transaction ID. If any of these requests fails or times out, the coordinator sends an abort request for that transaction ID to all participants.",
											"4. When a participant receives the prepare request, it makes sure that it can definitely commit the transaction under all circumstances. This includes writing all transaction data to disk (a crash, a power failure, or running out of disk space is not an acceptable excuse for refusing to commit later), and checking for any conflicts or constraint violations. By replying “yes” to the coordinator, the node promises to commit the transaction without error if requested. In other words, the participant surrenders the right to abort the transaction, but without actually committing it.",
											"5. When the coordinator has received responses to all prepare requests, it makes a definitive decision on whether to commit or abort the transaction (committing only if all participants voted “yes”). The coordinator must write that decision to its transaction log on disk so that it knows which way it decided in case it subsequently crashes. This is called the *commit point*.",
											"6. Once the coordinator’s decision has been written to disk, the commit or abort request is sent to all participants. If this request fails or times out, the coordinator must retry forever until it succeeds. There is no more going back: if the decision was to commit, that decision must be enforced, no matter how many retries it takes. If a participant has crashed in the meantime, the transaction will be committed when it recovers—since the participant voted “yes,” it cannot refuse to commit when it recovers.",
											"Thus, the protocol contains two crucial “points of no return”: when a participant votes “yes,” it promises that it will definitely be able to commit later (although the coordinator may still choose to abort); and once the coordinator decides, that decision is irrevocable. Those promises ensure the atomicity of 2PC. (Single-node atomic commit lumps these two events into one: writing the commit record to the transaction log.)",
											"Returning to the marriage analogy, before saying “I do,” you and your bride/groom have the freedom to abort the transaction by saying “No way!” (or something to that effect). However, after saying “I do,” you cannot retract that statement. If you faint after saying “I do” and you don’t hear the minister speak the words “You are now husband and wife,” that doesn’t change the fact that the transaction was committed. When you recover consciousness later, you can find out whether you are married or not by querying the minister for the status of your global transaction ID, or you can wait for the minister’s next retry of the commit request (since the retries will have continued throughout your period of unconsciousness).",
											"### **Coordinator failure**",
											"We have discussed what happens if one of the participants or the network fails during 2PC: if any of the prepare requests fail or time out, the coordinator aborts the transaction; if any of the commit or abort requests fail, the coordinator retries them indefinitely. However, it is less clear what happens if the coordinator crashes.",
											"If the coordinator fails before sending the prepare requests, a participant can safely abort the transaction. But once the participant has received a prepare request and voted “yes,” it can no longer abort unilaterally—it must wait to hear back from the coordinator whether the transaction was committed or aborted. If the coordinator crashes or the network fails at this point, the participant can do nothing but wait. A participant’s transaction in this state is called *in doubt* or *uncertain*.",
											"The situation is illustrated in [Figure 9-10](blob:https://johnfactotum.github.io/08af1efc-0362-4479-878a-645f5b08c432#fig_consistency_2pc_crash). In this particular example, the coordinator actually decided to commit, and database 2 received the commit request. However, the coordinator crashed before it could send the commit request to database 1, and so database 1 does not know whether to commit or abort. Even a timeout does not help here: if database 1 unilaterally aborts after a timeout, it will end up inconsistent with database 2, which has committed. Similarly, it is not safe to unilaterally commit, because another participant may have aborted.",
											"![ddia 0910](blob:https://johnfactotum.github.io/a9398bbf-ab6f-43f9-b85c-f0753160d240)",
											"###### *Figure 9-10. The coordinator crashes after participants vote “yes.” Database 1 does not know whether to commit or abort.*",
											"Without hearing from the coordinator, the participant has no way of knowing whether to commit or abort. In principle, the participants could communicate among themselves to find out how each participant voted and come to some agreement, but that is not part of the 2PC protocol.",
											"The only way 2PC can complete is by waiting for the coordinator to recover. This is why the coordinator must write its commit or abort decision to a transaction log on disk before sending commit or abort requests to participants: when the coordinator recovers, it determines the status of all in-doubt transactions by reading its transaction log. Any transactions that don’t have a commit record in the coordinator’s log are aborted. Thus, the commit point of 2PC comes down to a regular single-node atomic commit on the coordinator.",
											"### **Three-phase commit**",
											"Two-phase commit is called a *blocking* atomic commit protocol due to the fact that 2PC can become stuck waiting for the coordinator to recover. In theory, it is possible to make an atomic commit protocol *nonblocking*, so that it does not get stuck if a node fails. However, making this work in practice is not so straightforward.",
											"As an alternative to 2PC, an algorithm called *three-phase commit* (3PC) has been proposed \\[[13](), [80]()\\]. However, 3PC assumes a network with bounded delay and nodes with bounded response times; in most practical systems with unbounded network delay and process pauses (see [Chapter 8]()), it cannot guarantee atomicity.",
											"In general, nonblocking atomic commit requires a *perfect failure detector* \\[[67](), [71]()\\]—i.e., a reliable mechanism for telling whether a node has crashed or not. In a network with unbounded delay a timeout is not a reliable failure detector, because a request may time out due to a network problem even if no node has crashed. For this reason, 2PC continues to be used, despite the known problem with coordinator failure.",
										],
										summary: [
											"Two-phase commit ensures consistent distributed transactions, coordinating all nodes to agree before committing.",
										],
										longSummary: [
											'Transaction atomicity ensures that all writes are either fully committed or rolled back, preventing inconsistencies. In single-node systems, this is managed by writing data to disk before the commit record. Distributed transactions use the two-phase commit (2PC) protocol, where a coordinator first asks participants if they can commit (prepare phase) and proceeds only if all agree. If the coordinator crashes after participants vote but before sending the commit decision, participants remain "in doubt" until recovery. Although 2PC is blocking, alternatives like three-phase commit are unreliable with unbounded network delays.',
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289493/blog-cover-images/w0ulq0yzfbwvjlwz9wfm.webp",
									},
									{
										heading: [
											"## **Distributed Transactions in Practice**",
										],
										children: [
											"Distributed transactions, especially those implemented with two-phase commit, have a mixed reputation. On the one hand, they are seen as providing an important safety guarantee that would be hard to achieve otherwise; on the other hand, they are criticized for causing operational problems, killing performance, and promising more than they can deliver \\[[81](), [82](), [83](), [84]()\\]. Many cloud services choose not to implement distributed transactions due to the operational problems they engender \\[[85](), [86]()\\].",
											"Some implementations of distributed transactions carry a heavy performance penalty—for example, distributed transactions in MySQL are reported to be over 10 times slower than single-node transactions \\[[87]()\\], so it is not surprising when people advise against using them. Much of the performance cost inherent in two-phase commit is due to the additional disk forcing (`fsync`) that is required for crash recovery \\[[88]()\\], and the additional network round-trips.",
											"However, rather than dismissing distributed transactions outright, we should examine them in some more detail, because there are important lessons to be learned from them. To begin, we should be precise about what we mean by “distributed transactions.” Two quite different types of distributed transactions are often conflated:",
											"Database-internal distributed transactions",
											"Some distributed databases (i.e., databases that use replication and partitioning in their standard configuration) support internal transactions among the nodes of that database. For example, VoltDB and MySQL Cluster’s NDB storage engine have such internal transaction support. In this case, all the nodes participating in the transaction are running the same database software.",
											"Heterogeneous distributed transactions",
											"In a *heterogeneous* transaction, the participants are two or more different technologies: for example, two databases from different vendors, or even non-database systems such as message brokers. A distributed transaction across these systems must ensure atomic commit, even though the systems may be entirely different under the hood.",
											"Database-internal transactions do not have to be compatible with any other system, so they can use any protocol and apply optimizations specific to that particular technology. For that reason, database-internal distributed transactions can often work quite well. On the other hand, transactions spanning heterogeneous technologies are a lot more challenging.",
											"### **Exactly-once message processing**",
											"Heterogeneous distributed transactions allow diverse systems to be integrated in powerful ways. For example, a message from a message queue can be acknowledged as processed if and only if the database transaction for processing the message was successfully committed. This is implemented by atomically committing the message acknowledgment and the database writes in a single transaction. With distributed transaction support, this is possible, even if the message broker and the database are two unrelated technologies running on different machines.",
											"If either the message delivery or the database transaction fails, both are aborted, and so the message broker may safely redeliver the message later. Thus, by atomically committing the message and the side effects of its processing, we can ensure that the message is *effectively* processed exactly once, even if it required a few retries before it succeeded. The abort discards any side effects of the partially completed transaction.",
											"Such a distributed transaction is only possible if all systems affected by the transaction are able to use the same atomic commit protocol, however. For example, say a side effect of processing a message is to send an email, and the email server does not support two-phase commit: it could happen that the email is sent two or more times if message processing fails and is retried. But if all side effects of processing a message are rolled back on transaction abort, then the processing step can safely be retried as if nothing had happened.",
											"We will return to the topic of exactly-once message processing in [Chapter 11](). Let’s look first at the atomic commit protocol that allows such heterogeneous distributed transactions.",
											"### **XA transactions**",
											"*X/Open XA* (short for *eXtended Architecture*) is a standard for implementing two-phase commit across heterogeneous technologies \\[[76](), [77]()\\]. It was introduced in 1991 and has been widely implemented: XA is supported by many traditional relational databases (including PostgreSQL, MySQL, DB2, SQL Server, and Oracle) and message brokers (including ActiveMQ, HornetQ, MSMQ, and IBM MQ).",
											"XA is not a network protocol—it is merely a C API for interfacing with a transaction coordinator. Bindings for this API exist in other languages; for example, in the world of Java EE applications, XA transactions are implemented using the Java Transaction API (JTA), which in turn is supported by many drivers for databases using Java Database Connectivity (JDBC) and drivers for message brokers using the Java Message Service (JMS) APIs.",
											"XA assumes that your application uses a network driver or client library to communicate with the participant databases or messaging services. If the driver supports XA, that means it calls the XA API to find out whether an operation should be part of a distributed transaction—and if so, it sends the necessary information to the database server. The driver also exposes callbacks through which the coordinator can ask the participant to prepare, commit, or abort.",
											"The transaction coordinator implements the XA API. The standard does not specify how it should be implemented, but in practice the coordinator is often simply a library that is loaded into the same process as the application issuing the transaction (not a separate service). It keeps track of the participants in a transaction, collects partipants’ responses after asking them to prepare (via a callback into the driver), and uses a log on the local disk to keep track of the commit/abort decision for each transaction.",
											"If the application process crashes, or the machine on which the application is running dies, the coordinator goes with it. Any participants with prepared but uncommitted transactions are then stuck in doubt. Since the coordinator’s log is on the application server’s local disk, that server must be restarted, and the coordinator library must read the log to recover the commit/abort outcome of each transaction. Only then can the coordinator use the database driver’s XA callbacks to ask participants to commit or abort, as appropriate. The database server cannot contact the coordinator directly, since all communication must go via its client library.",
											"### **Holding locks while in doubt**",
											"Why do we care so much about a transaction being stuck in doubt? Can’t the rest of the system just get on with its work, and ignore the in-doubt transaction that will be cleaned up eventually?",
											"The problem is with *locking*. As discussed in [“Read Committed”](), database transactions usually take a row-level exclusive lock on any rows they modify, to prevent dirty writes. In addition, if you want serializable isolation, a database using two-phase locking would also have to take a shared lock on any rows *read* by the transaction (see [“Two-Phase Locking (2PL)”]()).",
											"The database cannot release those locks until the transaction commits or aborts (illustrated as a shaded area in [Figure 9-9](blob:https://johnfactotum.github.io/08af1efc-0362-4479-878a-645f5b08c432#fig_consistency_two_phase_commit)). Therefore, when using two-phase commit, a transaction must hold onto the locks throughout the time it is in doubt. If the coordinator has crashed and takes 20 minutes to start up again, those locks will be held for 20 minutes. If the coordinator’s log is entirely lost for some reason, those locks will be held forever—or at least until the situation is manually resolved by an administrator.",
											"While those locks are held, no other transaction can modify those rows. Depending on the database, other transactions may even be blocked from reading those rows. Thus, other transactions cannot simply continue with their business—if they want to access that same data, they will be blocked. This can cause large parts of your application to become unavailable until the in-doubt transaction is resolved.",
											"### **Recovering from coordinator failure**",
											"In theory, if the coordinator crashes and is restarted, it should cleanly recover its state from the log and resolve any in-doubt transactions. However, in practice, *orphaned* in-doubt transactions do occur \\[[89](), [90]()\\]—that is, transactions for which the coordinator cannot decide the outcome for whatever reason (e.g., because the transaction log has been lost or corrupted due to a software bug). These transactions cannot be resolved automatically, so they sit forever in the database, holding locks and blocking other transactions.",
											"Even rebooting your database servers will not fix this problem, since a correct implementation of 2PC must preserve the locks of an in-doubt transaction even across restarts (otherwise it would risk violating the atomicity guarantee). It’s a sticky situation.",
											"The only way out is for an administrator to manually decide whether to commit or roll back the transactions. The administrator must examine the participants of each in-doubt transaction, determine whether any participant has committed or aborted already, and then apply the same outcome to the other participants. Resolving the problem potentially requires a lot of manual effort, and most likely needs to be done under high stress and time pressure during a serious production outage (otherwise, why would the coordinator be in such a bad state?).",
											"Many XA implementations have an emergency escape hatch called *heuristic decisions*: allowing a participant to unilaterally decide to abort or commit an in-doubt transaction without a definitive decision from the coordinator \\[[76](), [77](), [91]()\\]. To be clear, *heuristic* here is a euphemism for *probably breaking atomicity*, since it violates the system of promises in two-phase commit. Thus, heuristic decisions are intended only for getting out of catastrophic situations, and not for regular use.",
											"### **Limitations of distributed transactions**",
											"XA transactions solve the real and important problem of keeping several participant data systems consistent with each other, but as we have seen, they also introduce major operational problems. In particular, the key realization is that the transaction coordinator is itself a kind of database (in which transaction outcomes are stored), and so it needs to be approached with the same care as any other important database:",
											"* If the coordinator is not replicated but runs only on a single machine, it is a single point of failure for the entire system (since its failure causes other application servers to block on locks held by in-doubt transactions). Surprisingly, many coordinator implementations are not highly available by default, or have only rudimentary replication support.",
											"* Many server-side applications are developed in a stateless model (as favored by HTTP), with all persistent state stored in a database, which has the advantage that application servers can be added and removed at will. However, when the coordinator is part of the application server, it changes the nature of the deployment. Suddenly, the coordinator’s logs become a crucial part of the durable system state—as important as the databases themselves, since the coordinator logs are required in order to recover in-doubt transactions after a crash. Such application servers are no longer stateless.",
											"* Since XA needs to be compatible with a wide range of data systems, it is necessarily a lowest common denominator. For example, it cannot detect deadlocks across different systems (since that would require a standardized protocol for systems to exchange information on the locks that each transaction is waiting for), and it does not work with SSI (see [“Serializable Snapshot Isolation (SSI)”]()), since that would require a protocol for identifying conflicts across different systems.",
											"* For database-internal distributed transactions (not XA), the limitations are not so great—for example, a distributed version of SSI is possible. However, there remains the problem that for 2PC to successfully commit a transaction, *all* participants must respond. Consequently, if *any* part of the system is broken, the transaction also fails. Distributed transactions thus have a tendency of *amplifying failures*, which runs counter to our goal of building fault-tolerant systems.",
											"Do these facts mean we should give up all hope of keeping several systems consistent with each other? Not quite—there are alternative methods that allow us to achieve the same thing without the pain of heterogeneous distributed transactions. We will return to these in Chapters [11]() and [12](). But first, we should wrap up the topic of consensus.",
										],
										summary: [
											"Distributed transactions: safe but slow. Explore alternatives to avoid XA's pitfalls and improve performance.",
										],
										longSummary: [
											"Distributed transactions using two-phase commit are safe but face operational and performance challenges. MySQL's implementation is slower than single-node transactions due to additional disk and network demands. It's important to distinguish between database-internal transactions, which can be optimized, and complex heterogeneous transactions across technologies, enabling integrations like exactly-once message processing. The X/Open XA standard, a C API for coordinating two-phase commit, has limitations: it creates a single point of failure, can lead to application-wide unavailability, and requires manual resolution of orphaned transactions. Alternative consistency methods will be explored later.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289494/blog-cover-images/px3qfjjhgeezrcvdwysn.webp",
									},
									{
										heading: [
											"## **Fault-Tolerant Consensus**",
										],
										children: [
											"Informally, consensus means getting several nodes to agree on something. For example, if several people concurrently try to book the last seat on an airplane, or the same seat in a theater, or try to register an account with the same username, then a consensus algorithm could be used to determine which one of these mutually incompatible operations should be the winner.",
											"The consensus problem is normally formalized as follows: one or more nodes may *propose* values, and the consensus algorithm *decides* on one of those values. In the seat-booking example, when several customers are concurrently trying to buy the last seat, each node handling a customer request may propose the ID of the customer it is serving, and the decision indicates which one of those customers got the seat.",
											"In this formalism, a consensus algorithm must satisfy the following properties \\[[25]()\\]:[xiii]()",
											"Uniform agreement",
											"No two nodes decide differently.",
											"Integrity",
											"No node decides twice.",
											"Validity",
											"If a node decides value *v*, then *v* was proposed by some node.",
											"Termination",
											"Every node that does not crash eventually decides some value.",
											"The uniform agreement and integrity properties define the core idea of consensus: everyone decides on the same outcome, and once you have decided, you cannot change your mind. The validity property exists mostly to rule out trivial solutions: for example, you could have an algorithm that always decides `null`, no matter what was proposed; this algorithm would satisfy the agreement and integrity properties, but not the validity property.",
											"If you don’t care about fault tolerance, then satisfying the first three properties is easy: you can just hardcode one node to be the “dictator,” and let that node make all of the decisions. However, if that one node fails, then the system can no longer make any decisions. This is, in fact, what we saw in the case of two-phase commit: if the coordinator fails, in-doubt participants cannot decide whether to commit or abort.",
											"The termination property formalizes the idea of fault tolerance. It essentially says that a consensus algorithm cannot simply sit around and do nothing forever—in other words, it must make progress. Even if some nodes fail, the other nodes must still reach a decision. (Termination is a liveness property, whereas the other three are safety properties—see [“Safety and liveness”]().)",
											"The system model of consensus assumes that when a node “crashes,” it suddenly disappears and never comes back. (Instead of a software crash, imagine that there is an earthquake, and the datacenter containing your node is destroyed by a landslide. You must assume that your node is buried under 30 feet of mud and is never going to come back online.) In this system model, any algorithm that has to wait for a node to recover is not going to be able to satisfy the termination property. In particular, 2PC does not meet the requirements for termination.",
											"Of course, if *all* nodes crash and none of them are running, then it is not possible for any algorithm to decide anything. There is a limit to the number of failures that an algorithm can tolerate: in fact, it can be proved that any consensus algorithm requires at least a majority of nodes to be functioning correctly in order to assure termination \\[[67]()\\]. That majority can safely form a quorum (see [“Quorums for reading and writing”]()).",
											"Thus, the termination property is subject to the assumption that fewer than half of the nodes are crashed or unreachable. However, most implementations of consensus ensure that the safety properties—agreement, integrity, and validity—are always met, even if a majority of nodes fail or there is a severe network problem \\[[92]()\\]. Thus, a large-scale outage can stop the system from being able to process requests, but it cannot corrupt the consensus system by causing it to make invalid decisions.",
											"Most consensus algorithms assume that there are no Byzantine faults, as discussed in [“Byzantine Faults”](). That is, if a node does not correctly follow the protocol (for example, if it sends contradictory messages to different nodes), it may break the safety properties of the protocol. It is possible to make consensus robust against Byzantine faults as long as fewer than one-third of the nodes are Byzantine-faulty \\[[25](), [93]()\\], but we don’t have space to discuss those algorithms in detail in this book.",
											"### **Consensus algorithms and total order broadcast**",
											"The best-known fault-tolerant consensus algorithms are Viewstamped Replication (VSR) \\[[94](), [95]()\\], Paxos \\[[96](), [97](), [98](), [99]()\\], Raft \\[[22](), [100](), [101]()\\], and Zab \\[[15](), [21](), [102]()\\]. There are quite a few similarities between these algorithms, but they are not the same \\[[103]()\\]. In this book we won’t go into full details of the different algorithms: it’s sufficient to be aware of some of the high-level ideas that they have in common, unless you’re implementing a consensus system yourself (which is probably not advisable—it’s hard \\[[98](), [104]()\\]).",
											"Most of these algorithms actually don’t directly use the formal model described here (proposing and deciding on a single value, while satisfying the agreement, integrity, validity, and termination properties). Instead, they decide on a *sequence* of values, which makes them *total order broadcast* algorithms, as discussed previously in this chapter (see [“Total Order Broadcast”](blob:https://johnfactotum.github.io/08af1efc-0362-4479-878a-645f5b08c432#sec_consistency_total_order)).",
											"Remember that total order broadcast requires messages to be delivered exactly once, in the same order, to all nodes. If you think about it, this is equivalent to performing several rounds of consensus: in each round, nodes propose the message that they want to send next, and then decide on the next message to be delivered in the total order \\[[67]()\\].",
											"So, total order broadcast is equivalent to repeated rounds of consensus (each consensus decision corresponding to one message delivery):",
											"* Due to the agreement property of consensus, all nodes decide to deliver the same messages in the same order.",
											"* Due to the integrity property, messages are not duplicated.",
											"* Due to the validity property, messages are not corrupted and not fabricated out of thin air.",
											"* Due to the termination property, messages are not lost.",
											"Viewstamped Replication, Raft, and Zab implement total order broadcast directly, because that is more efficient than doing repeated rounds of one-value-at-a-time consensus. In the case of Paxos, this optimization is known as Multi-Paxos.",
											"### **Single-leader replication and consensus**",
											"In [Chapter 5]() we discussed single-leader replication (see [“Leaders and Followers”]()), which takes all the writes to the leader and applies them to the followers in the same order, thus keeping replicas up to date. Isn’t this essentially total order broadcast? How come we didn’t have to worry about consensus in [Chapter 5]()?",
											"The answer comes down to how the leader is chosen. If the leader is manually chosen and configured by the humans in your operations team, you essentially have a “consensus algorithm” of the dictatorial variety: only one node is allowed to accept writes (i.e., make decisions about the order of writes in the replication log), and if that node goes down, the system becomes unavailable for writes until the operators manually configure a different node to be the leader. Such a system can work well in practice, but it does not satisfy the termination property of consensus because it requires human intervention in order to make progress.",
											"Some databases perform automatic leader election and failover, promoting a follower to be the new leader if the old leader fails (see [“Handling Node Outages”]()). This brings us closer to fault-tolerant total order broadcast, and thus to solving consensus.",
											"However, there is a problem. We previously discussed the problem of split brain, and said that all nodes need to agree who the leader is—otherwise two different nodes could each believe themselves to be the leader, and consequently get the database into an inconsistent state. Thus, we need consensus in order to elect a leader. But if the consensus algorithms described here are actually total order broadcast algorithms, and total order broadcast is like single-leader replication, and single-leader replication requires a leader, then…",
											"It seems that in order to elect a leader, we first need a leader. In order to solve consensus, we must first solve consensus. How do we break out of this conundrum?",
											"### **Epoch numbering and quorums**",
											"All of the consensus protocols discussed so far internally use a leader in some form or another, but they don’t guarantee that the leader is unique. Instead, they can make a weaker guarantee: the protocols define an *epoch number* (called the *ballot number* in Paxos, *view number* in Viewstamped Replication, and *term number* in Raft) and guarantee that within each epoch, the leader is unique.",
											"Every time the current leader is thought to be dead, a vote is started among the nodes to elect a new leader. This election is given an incremented epoch number, and thus epoch numbers are totally ordered and monotonically increasing. If there is a conflict between two different leaders in two different epochs (perhaps because the previous leader actually wasn’t dead after all), then the leader with the higher epoch number prevails.",
											"Before a leader is allowed to decide anything, it must first check that there isn’t some other leader with a higher epoch number which might take a conflicting decision. How does a leader know that it hasn’t been ousted by another node? Recall [“The Truth Is Defined by the Majority”](): a node cannot necessarily trust its own judgment—just because a node thinks that it is the leader, that does not necessarily mean the other nodes accept it as their leader.",
											"Instead, it must collect votes from a *quorum* of nodes (see [“Quorums for reading and writing”]()). For every decision that a leader wants to make, it must send the proposed value to the other nodes and wait for a quorum of nodes to respond in favor of the proposal. The quorum typically, but not always, consists of a majority of nodes \\[[105]()\\]. A node votes in favor of a proposal only if it is not aware of any other leader with a higher epoch.",
											"Thus, we have two rounds of voting: once to choose a leader, and a second time to vote on a leader’s proposal. The key insight is that the quorums for those two votes must overlap: if a vote on a proposal succeeds, at least one of the nodes that voted for it must have also participated in the most recent leader election \\[[105]()\\]. Thus, if the vote on a proposal does not reveal any higher-numbered epoch, the current leader can conclude that no leader election with a higher epoch number has happened, and therefore be sure that it still holds the leadership. It can then safely decide the proposed value.",
											"This voting process looks superficially similar to two-phase commit. The biggest differences are that in 2PC the coordinator is not elected, and that fault-tolerant consensus algorithms only require votes from a majority of nodes, whereas 2PC requires a “yes” vote from *every* participant. Moreover, consensus algorithms define a recovery process by which nodes can get into a consistent state after a new leader is elected, ensuring that the safety properties are always met. These differences are key to the correctness and fault tolerance of a consensus algorithm.",
											"### **Limitations of consensus**",
											"Consensus algorithms are a huge breakthrough for distributed systems: they bring concrete safety properties (agreement, integrity, and validity) to systems where everything else is uncertain, and they nevertheless remain fault-tolerant (able to make progress as long as a majority of nodes are working and reachable). They provide total order broadcast, and therefore they can also implement linearizable atomic operations in a fault-tolerant way (see [“Implementing linearizable storage using total order broadcast”](blob:https://johnfactotum.github.io/08af1efc-0362-4479-878a-645f5b08c432#sec_consistency_abcast_to_lin)).",
											"Nevertheless, they are not used everywhere, because the benefits come at a cost.",
											"The process by which nodes vote on proposals before they are decided is a kind of synchronous replication. As discussed in [“Synchronous Versus Asynchronous Replication”](), databases are often configured to use asynchronous replication. In this configuration, some committed data can potentially be lost on failover—but many people choose to accept this risk for the sake of better performance.",
											"Consensus systems always require a strict majority to operate. This means you need a minimum of three nodes in order to tolerate one failure (the remaining two out of three form a majority), or a minimum of five nodes to tolerate two failures (the remaining three out of five form a majority). If a network failure cuts off some nodes from the rest, only the majority portion of the network can make progress, and the rest is blocked (see also [“The Cost of Linearizability”](blob:https://johnfactotum.github.io/08af1efc-0362-4479-878a-645f5b08c432#sec_linearizability_cost)).",
											"Most consensus algorithms assume a fixed set of nodes that participate in voting, which means that you can’t just add or remove nodes in the cluster. *Dynamic membership* extensions to consensus algorithms allow the set of nodes in the cluster to change over time, but they are much less well understood than static membership algorithms.",
											"Consensus systems generally rely on timeouts to detect failed nodes. In environments with highly variable network delays, especially geographically distributed systems, it often happens that a node falsely believes the leader to have failed due to a transient network issue. Although this error does not harm the safety properties, frequent leader elections result in terrible performance because the system can end up spending more time choosing a leader than doing any useful work.",
											"Sometimes, consensus algorithms are particularly sensitive to network problems. For example, Raft has been shown to have unpleasant edge cases \\[[106]()\\]: if the entire network is working correctly except for one particular network link that is consistently unreliable, Raft can get into situations where leadership continually bounces between two nodes, or the current leader is continually forced to resign, so the system effectively never makes progress. Other consensus algorithms have similar problems, and designing algorithms that are more robust to unreliable networks is still an open research problem.",
										],
										summary: [
											"Consensus algorithms ensure agreement among nodes, balancing safety and progress despite failures.",
										],
										longSummary: [
											"Consensus algorithms help multiple nodes agree on decisions, like booking the last airplane seat simultaneously. They ensure uniform agreement, integrity, validity, and termination, balancing safety and progress despite node failures. Algorithms like Viewstamped Replication, Paxos, Raft, and Zab deliver messages in the same order to all nodes using epoch numbering and quorum voting for leader election and decision-making. However, they need synchronous replication, a strict majority, assume a fixed node set, and are sensitive to network delays and issues.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289493/blog-cover-images/iblvfhmmkrcvby2wpsdj.webp",
									},
									{
										heading: [
											"## **Membership and Coordination Services**",
										],
										children: [
											"Projects like ZooKeeper or etcd are often described as “distributed key-value stores” or “coordination and configuration services.” The API of such a service looks pretty much like that of a database: you can read and write the value for a given key, and iterate over keys. So if they’re basically databases, why do they go to all the effort of implementing a consensus algorithm? What makes them different from any other kind of database?",
											"To understand this, it is helpful to briefly explore how a service like ZooKeeper is used. As an application developer, you will rarely need to use ZooKeeper directly, because it is actually not well suited as a general-purpose database. It is more likely that you will end up relying on it indirectly via some other project: for example, HBase, Hadoop YARN, OpenStack Nova, and Kafka all rely on ZooKeeper running in the background. What is it that these projects get from it?",
											"ZooKeeper and etcd are designed to hold small amounts of data that can fit entirely in memory (although they still write to disk for durability)—so you wouldn’t want to store all of your application’s data here. That small amount of data is replicated across all the nodes using a fault-tolerant total order broadcast algorithm. As discussed previously, total order broadcast is just what you need for database replication: if each message represents a write to the database, applying the same writes in the same order keeps replicas consistent with each other.",
											"ZooKeeper is modeled after Google’s Chubby lock service \\[[14](), [98]()\\], implementing not only total order broadcast (and hence consensus), but also an interesting set of other features that turn out to be particularly useful when building distributed systems:",
											"Linearizable atomic operations",
											"Using an atomic compare-and-set operation, you can implement a lock: if several nodes concurrently try to perform the same operation, only one of them will succeed. The consensus protocol guarantees that the operation will be atomic and linearizable, even if a node fails or the network is interrupted at any point. A distributed lock is usually implemented as a *lease*, which has an expiry time so that it is eventually released in case the client fails (see [“Process Pauses”]()).",
											"Total ordering of operations",
											"As discussed in [“The leader and the lock”](), when some resource is protected by a lock or lease, you need a *fencing token* to prevent clients from conflicting with each other in the case of a process pause. The fencing token is some number that monotonically increases every time the lock is acquired. ZooKeeper provides this by totally ordering all operations and giving each operation a monotonically increasing transaction ID (`zxid`) and version number (`cversion`) \\[[15]()\\].",
											"Failure detection",
											"Clients maintain a long-lived session on ZooKeeper servers, and the client and server periodically exchange heartbeats to check that the other node is still alive. Even if the connection is temporarily interrupted, or a ZooKeeper node fails, the session remains active. However, if the heartbeats cease for a duration that is longer than the session timeout, ZooKeeper declares the session to be dead. Any locks held by a session can be configured to be automatically released when the session times out (ZooKeeper calls these *ephemeral nodes*).",
											"Change notifications",
											"Not only can one client read locks and values that were created by another client, but it can also watch them for changes. Thus, a client can find out when another client joins the cluster (based on the value it writes to ZooKeeper), or if another client fails (because its session times out and its ephemeral nodes disappear). By subscribing to notifications, a client avoids having to frequently poll to find out about changes.",
											"Of these features, only the linearizable atomic operations really require consensus. However, it is the combination of these features that makes systems like ZooKeeper so useful for distributed coordination.",
											"### **Allocating work to nodes**",
											"One example in which the ZooKeeper/Chubby model works well is if you have several instances of a process or service, and one of them needs to be chosen as leader or primary. If the leader fails, one of the other nodes should take over. This is of course useful for single-leader databases, but it’s also useful for job schedulers and similar stateful systems.",
											"Another example arises when you have some partitioned resource (database, message streams, file storage, distributed actor system, etc.) and need to decide which partition to assign to which node. As new nodes join the cluster, some of the partitions need to be moved from existing nodes to the new nodes in order to rebalance the load (see [“Rebalancing Partitions”]()). As nodes are removed or fail, other nodes need to take over the failed nodes’ work.",
											"These kinds of tasks can be achieved by judicious use of atomic operations, ephemeral nodes, and notifications in ZooKeeper. If done correctly, this approach allows the application to automatically recover from faults without human intervention. It’s not easy, despite the appearance of libraries such as Apache Curator \\[[17]()\\] that have sprung up to provide higher-level tools on top of the ZooKeeper client API—but it is still much better than attempting to implement the necessary consensus algorithms from scratch, which has a poor success record \\[[107]()\\].",
											"An application may initially run only on a single node, but eventually may grow to thousands of nodes. Trying to perform majority votes over so many nodes would be terribly inefficient. Instead, ZooKeeper runs on a fixed number of nodes (usually three or five) and performs its majority votes among those nodes while supporting a potentially large number of clients. Thus, ZooKeeper provides a way of “outsourcing” some of the work of coordinating nodes (consensus, operation ordering, and failure detection) to an external service.",
											"Normally, the kind of data managed by ZooKeeper is quite slow-changing: it represents information like “the node running on 10.1.1.23 is the leader for partition 7,” which may change on a timescale of minutes or hours. It is not intended for storing the runtime state of the application, which may change thousands or even millions of times per second. If application state needs to be replicated from one node to another, other tools (such as Apache BookKeeper \\[[108]()\\]) can be used.",
											"### **Service discovery**",
											"ZooKeeper, etcd, and Consul are also often used for *service discovery*—that is, to find out which IP address you need to connect to in order to reach a particular service. In cloud datacenter environments, where it is common for virtual machines to continually come and go, you often don’t know the IP addresses of your services ahead of time. Instead, you can configure your services such that when they start up they register their network endpoints in a service registry, where they can then be found by other services.",
											"However, it is less clear whether service discovery actually requires consensus. DNS is the traditional way of looking up the IP address for a service name, and it uses multiple layers of caching to achieve good performance and availability. Reads from DNS are absolutely not linearizable, and it is usually not considered problematic if the results from a DNS query are a little stale \\[[109]()\\]. It is more important that DNS is reliably available and robust to network interruptions.",
											"Although service discovery does not require consensus, leader election does. Thus, if your consensus system already knows who the leader is, then it can make sense to also use that information to help other services discover who the leader is. For this purpose, some consensus systems support read-only caching replicas. These replicas asynchronously receive the log of all decisions of the consensus algorithm, but do not actively participate in voting. They are therefore able to serve read requests that do not need to be linearizable.",
											"### **Membership services**",
											"ZooKeeper and friends can be seen as part of a long history of research into *membership services*, which goes back to the 1980s and has been important for building highly reliable systems, e.g., for air traffic control \\[[110]()\\].",
											"A membership service determines which nodes are currently active and live members of a cluster. As we saw throughout [Chapter 8](), due to unbounded network delays it’s not possible to reliably detect whether another node has failed. However, if you couple failure detection with consensus, nodes can come to an agreement about which nodes should be considered alive or not.",
											"It could still happen that a node is incorrectly declared dead by consensus, even though it is actually alive. But it is nevertheless very useful for a system to have agreement on which nodes constitute the current membership. For example, choosing a leader could mean simply choosing the lowest-numbered among the current members, but this approach would not work if different nodes have divergent opinions on who the current members are.",
										],
										summary: [
											"ZooKeeper and etcd: Essential for distributed coordination, leader election, and service discovery in clusters.",
										],
										longSummary: [
											"ZooKeeper and etcd are distributed key-value stores using consensus algorithms for linearizable atomic operations, essential for distributed systems. They handle small, in-memory data replicated across nodes with fault-tolerant broadcast, offering distributed locks, transaction IDs, failure detection, and change notifications. Ideal for leader election, work allocation, and managing partitioned resources, they run on a few nodes but support many clients. Commonly used for service discovery, they help locate IP addresses in dynamic environments. They also support read-only caching replicas and are crucial for membership services, identifying active nodes for operations like leader selection.",
										],
										imageUrl:
											"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289496/blog-cover-images/yblxumkkowvuzgqnjxae.webp",
									},
								],
							],
							summary: [
								"Consensus algorithms ensure distributed nodes agree, crucial for leader election and transaction atomicity.",
							],
							longSummary: [
								"Consensus is vital in distributed computing for ensuring nodes agree on decisions, crucial for leader election and atomic commit to avoid inconsistencies. Although the FLP result shows consensus is impossible in asynchronous systems with potential crashes, practical solutions use timeouts, crash detection, or randomness. Two-phase commit (2PC) is common but not ideal for consensus, unlike Paxos and Raft, which ensure agreement, integrity, validity, and termination with a majority of functioning nodes. Systems like ZooKeeper and etcd use consensus for linearizable operations, leader election, and coordination, excelling in distributed environments despite some challenges.",
							],
							imageUrl:
								"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289475/blog-cover-images/hrndhsaqqekw4s2zwqph.webp",
						},
						{
							heading: ["# **Summary**"],
							children: [
								"In this chapter we examined the topics of consistency and consensus from several different angles. We looked in depth at linearizability, a popular consistency model: its goal is to make replicated data appear as though there were only a single copy, and to make all operations act on it atomically. Although linearizability is appealing because it is easy to understand—it makes a database behave like a variable in a single-threaded program—it has the downside of being slow, especially in environments with large network delays.",
								"We also explored causality, which imposes an ordering on events in a system (what happened before what, based on cause and effect). Unlike linearizability, which puts all operations in a single, totally ordered timeline, causality provides us with a weaker consistency model: some things can be concurrent, so the version history is like a timeline with branching and merging. Causal consistency does not have the coordination overhead of linearizability and is much less sensitive to network problems.",
								"However, even if we capture the causal ordering (for example using Lamport timestamps), we saw that some things cannot be implemented this way: in [“Timestamp ordering is not sufficient”](blob:https://johnfactotum.github.io/08af1efc-0362-4479-878a-645f5b08c432#sec_consistency_unique_constraint) we considered the example of ensuring that a username is unique and rejecting concurrent registrations for the same username. If one node is going to accept a registration, it needs to somehow know that another node isn’t concurrently in the process of registering the same name. This problem led us toward *consensus*.",
								"We saw that achieving consensus means deciding something in such a way that all nodes agree on what was decided, and such that the decision is irrevocable. With some digging, it turns out that a wide range of problems are actually reducible to consensus and are equivalent to each other (in the sense that if you have a solution for one of them, you can easily transform it into a solution for one of the others). Such equivalent problems include:",
								"Linearizable compare-and-set registers",
								"The register needs to atomically *decide* whether to set its value, based on whether its current value equals the parameter given in the operation.",
								"Atomic transaction commit",
								"A database must *decide* whether to commit or abort a distributed transaction.",
								"Total order broadcast",
								"The messaging system must *decide* on the order in which to deliver messages.",
								"Locks and leases",
								"When several clients are racing to grab a lock or lease, the lock *decides* which one successfully acquired it.",
								"Membership/coordination service",
								"Given a failure detector (e.g., timeouts), the system must *decide* which nodes are alive, and which should be considered dead because their sessions timed out.",
								"Uniqueness constraint",
								"When several transactions concurrently try to create conflicting records with the same key, the constraint must *decide* which one to allow and which should fail with a constraint violation.",
								"All of these are straightforward if you only have a single node, or if you are willing to assign the decision-making capability to a single node. This is what happens in a single-leader database: all the power to make decisions is vested in the leader, which is why such databases are able to provide linearizable operations, uniqueness constraints, a totally ordered replication log, and more.",
								"However, if that single leader fails, or if a network interruption makes the leader unreachable, such a system becomes unable to make any progress. There are three ways of handling that situation:",
								"1. Wait for the leader to recover, and accept that the system will be blocked in the meantime. Many XA/JTA transaction coordinators choose this option. This approach does not fully solve consensus because it does not satisfy the termination property: if the leader does not recover, the system can be blocked forever.",
								"2. Manually fail over by getting humans to choose a new leader node and reconfigure the system to use it. Many relational databases take this approach. It is a kind of consensus by “act of God”—the human operator, outside of the computer system, makes the decision. The speed of failover is limited by the speed at which humans can act, which is generally slower than computers.",
								"3. Use an algorithm to automatically choose a new leader. This approach requires a consensus algorithm, and it is advisable to use a proven algorithm that correctly handles adverse network conditions \\[[107]()\\].",
								"Although a single-leader database can provide linearizability without executing a consensus algorithm on every write, it still requires consensus to maintain its leadership and for leadership changes. Thus, in some sense, having a leader only “kicks the can down the road”: consensus is still required, only in a different place, and less frequently. The good news is that fault-tolerant algorithms and systems for consensus exist, and we briefly discussed them in this chapter.",
								"Tools like ZooKeeper play an important role in providing an “outsourced” consensus, failure detection, and membership service that applications can use. It’s not easy to use, but it is much better than trying to develop your own algorithms that can withstand all the problems discussed in [Chapter 8](). If you find yourself wanting to do one of those things that is reducible to consensus, and you want it to be fault-tolerant, then it is advisable to use something like ZooKeeper.",
								"Nevertheless, not every system necessarily requires consensus: for example, leaderless and multi-leader replication systems typically do not use global consensus. The conflicts that occur in these systems (see [“Handling Write Conflicts”]()) are a consequence of not having consensus across different leaders, but maybe that’s okay: maybe we simply need to cope without linearizability and learn to work better with data that has branching and merging version histories.",
								"This chapter referenced a large body of research on the theory of distributed systems. Although the theoretical papers and proofs are not always easy to understand, and sometimes make unrealistic assumptions, they are incredibly valuable for informing practical work in this field: they help us reason about what can and cannot be done, and help us find the counterintuitive ways in which distributed systems are often flawed. If you have the time, the references are well worth exploring.",
								"This brings us to the end of [Part II]() of this book, in which we covered replication ([Chapter 5]()), partitioning ([Chapter 6]()), transactions ([Chapter 7]()), distributed system failure models ([Chapter 8]()), and finally consistency and consensus ([Chapter 9](blob:https://johnfactotum.github.io/08af1efc-0362-4479-878a-645f5b08c432#ch_consistency)). Now that we have laid a firm foundation of theory, in [Part III]() we will turn once again to more practical systems, and discuss how to build powerful applications from heterogeneous building blocks.",
								"##### **Footnotes**",
								"[i]() A subtle detail of this diagram is that it assumes the existence of a global clock, represented by the horizontal axis. Even though real systems typically don’t have accurate clocks (see [“Unreliable Clocks”]()), this assumption is okay: for the purposes of analyzing a distributed algorithm, we may pretend that an accurate global clock exists, as long as the algorithm doesn’t have access to it \\[[47]()\\]. Instead, the algorithm can only see a mangled approximation of real time, as produced by a quartz oscillator and NTP.",
								"[ii]() A register in which reads may return either the old or the new value if they are concurrent with a write is known as a *regular register* \\[[7](), [25]()\\].",
								"[iii]() Strictly speaking, ZooKeeper and etcd provide linearizable writes, but reads may be stale, since by default they can be served by any one of the replicas. You can optionally request a linearizable read: etcd calls this a *quorum read* \\[[16]()\\], and in ZooKeeper you need to call `sync()` before the read \\[[15]()\\]; see [“Implementing linearizable storage using total order broadcast”](blob:https://johnfactotum.github.io/08af1efc-0362-4479-878a-645f5b08c432#sec_consistency_abcast_to_lin).",
								"[iv]() Partitioning (sharding) a single-leader database, so that there is a separate leader per partition, does not affect linearizability, since it is only a single-object guarantee. Cross-partition transactions are a different matter (see [“Distributed Transactions and Consensus”](blob:https://johnfactotum.github.io/08af1efc-0362-4479-878a-645f5b08c432#sec_consistency_consensus)).",
								"[v]() These two choices are sometimes known as CP (consistent but not available under network partitions) and AP (available but not consistent under network partitions), respectively. However, this classification scheme has several flaws \\[[9]()\\], so it is best avoided.",
								"[vi]() As discussed in [“Network Faults in Practice”](), this book uses *partitioning* to refer to deliberately breaking down a large dataset into smaller ones (*sharding*; see [Chapter 6]()). By contrast, a network partition is a particular type of network fault, which we normally don’t consider separately from other kinds of faults. However, since it’s the P in CAP, we can’t avoid the confusion in this case.",
								"[vii]() A total order that is *inconsistent* with causality is easy to create, but not very useful. For example, you can generate a random UUID for each operation, and compare UUIDs lexicographically to define the total ordering of operations. This is a valid total order, but the random UUIDs tell you nothing about which operation actually happened first, or whether the operations were concurrent.",
								"[viii]() It is possible to make physical clock timestamps consistent with causality: in [“Synchronized clocks for global snapshots”]() we discussed Google’s Spanner, which estimates the expected clock skew and waits out the uncertainty interval before committing a write. This method ensures that a causally later transaction is given a greater timestamp. However, most clocks cannot provide the required uncertainty metric.",
								"[ix]() The term *atomic broadcast* is traditional, but it is very confusing as it’s inconsistent with other uses of the word *atomic*: it has nothing to do with atomicity in ACID transactions and is only indirectly related to atomic operations (in the sense of multi-threaded programming) or atomic registers (linearizable storage). The term *total order multicast* is another synonym.",
								"[x]() In a formal sense, a linearizable read-write register is an “easier” problem. Total order broadcast is equivalent to consensus \\[[67]()\\], which has no deterministic solution in the asynchronous crash-stop model \\[[68]()\\], whereas a linearizable read-write register *can* be implemented in the same system model \\[[23](), [24](), [25]()\\]. However, supporting atomic operations such as compare-and-set or increment-and-get in a register makes it equivalent to consensus \\[[28]()\\]. Thus, the problems of consensus and a linearizable register are closely related.",
								"[xi]() If you don’t wait, but acknowledge the write immediately after it has been enqueued, you get something similar to the memory consistency model of multi-core x86 processors \\[[43]()\\]. That model is neither linearizable nor sequentially consistent.",
								"[xii]() Atomic commit is formalized slightly differently from consensus: an atomic transaction can commit only if *all* participants vote to commit, and must abort if any participant needs to abort. Consensus is allowed to decide on *any* value that is proposed by one of the participants. However, atomic commit and consensus are reducible to each other \\[[70](), [71]()\\]. *Nonblocking* atomic commit is harder than consensus—see [“Three-phase commit”](blob:https://johnfactotum.github.io/08af1efc-0362-4479-878a-645f5b08c432#sec_consistency_3pc).",
								"[xiii]() This particular variant of consensus is called *uniform consensus*, which is equivalent to regular consensus in asynchronous systems with unreliable failure detectors \\[[71]()\\]. The academic literature usually refers to *processes* rather than *nodes*, but we use *nodes* here for consistency with the rest of this book.",
								"##### **References**",
								"\\[[1]()\\] Peter Bailis and Ali Ghodsi: “[Eventual Consistency Today: Limitations, Extensions, and Beyond](http://queue.acm.org/detail.cfm?id=2462076),” *ACM Queue*, volume 11, number 3, pages 55-63, March 2013. [doi:10.1145/2460276.2462076](http://dx.doi.org/10.1145/2460276.2462076)",
								"\\[[2]()\\] Prince Mahajan, Lorenzo Alvisi, and Mike Dahlin: “[Consistency, Availability, and Convergence](http://apps.cs.utexas.edu/tech_reports/reports/tr/TR-2036.pdf),” University of Texas at Austin, Department of Computer Science, Tech Report UTCS TR-11-22, May 2011.",
								"\\[[3]()\\] Alex Scotti: “[Adventures in Building Your Own Database](http://www.slideshare.net/AlexScotti1/allyourbase-55212398),” at *All Your Base*, November 2015.",
								"\\[[4]()\\] Peter Bailis, Aaron Davidson, Alan Fekete, et al.: “[Highly Available Transactions: Virtues and Limitations](http://arxiv.org/pdf/1302.0309.pdf),” at *40th International Conference on Very Large Data Bases* (VLDB), September 2014. Extended version published as pre-print arXiv:1302.0309 \\[cs.DB\\].",
								"\\[[5]()\\] Paolo Viotti and Marko Vukolić: “[Consistency in Non-Transactional Distributed Storage Systems](http://arxiv.org/abs/1512.00168),” arXiv:1512.00168, 12 April 2016.",
								"\\[[6]()\\] Maurice P. Herlihy and Jeannette M. Wing: “[Linearizability: A Correctness Condition for Concurrent Objects](http://cs.brown.edu/~mph/HerlihyW90/p463-herlihy.pdf),” *ACM Transactions on Programming Languages and Systems* (TOPLAS), volume 12, number 3, pages 463–492, July 1990. [doi:10.1145/78969.78972](http://dx.doi.org/10.1145/78969.78972)",
								"\\[[7]()\\] Leslie Lamport: “[On interprocess communication](http://research.microsoft.com/en-us/um/people/lamport/pubs/interprocess.pdf),” *Distributed Computing*, volume 1, number 2, pages 77–101, June 1986. [doi:10.1007/BF01786228](http://dx.doi.org/10.1007/BF01786228)",
								"\\[[8]()\\] David K. Gifford: “[Information Storage in a Decentralized Computer System](http://www.mirrorservice.org/sites/www.bitsavers.org/pdf/xerox/parc/techReports/CSL-81-8_Information_Storage_in_a_Decentralized_Computer_System.pdf),” Xerox Palo Alto Research Centers, CSL-81-8, June 1981.",
								"\\[[9]()\\] Martin Kleppmann: “[Please Stop Calling Databases CP or AP](http://martin.kleppmann.com/2015/05/11/please-stop-calling-databases-cp-or-ap.html),” *martin.kleppmann.com*, May 11, 2015.",
								"\\[[10]()\\] Kyle Kingsbury: “[Call Me Maybe: MongoDB Stale Reads](https://aphyr.com/posts/322-call-me-maybe-mongodb-stale-reads),” *aphyr.com*, April 20, 2015.",
								"\\[[11]()\\] Kyle Kingsbury: “[Computational Techniques in Knossos](https://aphyr.com/posts/314-computational-techniques-in-knossos),” *aphyr.com*, May 17, 2014.",
								"\\[[12]()\\] Peter Bailis: “[Linearizability Versus Serializability](http://www.bailis.org/blog/linearizability-versus-serializability/),” *bailis.org*, September 24, 2014.",
								"\\[[13]()\\] Philip A. Bernstein, Vassos Hadzilacos, and Nathan Goodman: *[Concurrency Control and Recovery in Database Systems](http://research.microsoft.com/en-us/people/philbe/ccontrol.aspx)*. Addison-Wesley, 1987. ISBN: 978-0-201-10715-9, available online at *research.microsoft.com*.",
								"\\[[14]()\\] Mike Burrows: “[The Chubby Lock Service for Loosely-Coupled Distributed Systems](http://research.google.com/archive/chubby.html),” at *7th USENIX Symposium on Operating System Design and Implementation* (OSDI), November 2006.",
								"\\[[15]()\\] Flavio P. Junqueira and Benjamin Reed: *ZooKeeper: Distributed Process Coordination*. O’Reilly Media, 2013. ISBN: 978-1-449-36130-3",
								"\\[[16]()\\] “[etcd 2.0.12 Documentation](https://coreos.com/etcd/docs/2.0.12/),” CoreOS, Inc., 2015.",
								"\\[[17]()\\] “[Apache Curator](http://curator.apache.org/),” Apache Software Foundation, *curator.apache.org*, 2015.",
								"\\[[18]()\\] Morali Vallath: *Oracle 10g RAC Grid, Services & Clustering*. Elsevier Digital Press, 2006. ISBN: 978-1-555-58321-7",
								"\\[[19]()\\] Peter Bailis, Alan Fekete, Michael J Franklin, et al.: “[Coordination-Avoiding Database Systems](http://arxiv.org/pdf/1402.2237.pdf),” *Proceedings of the VLDB Endowment*, volume 8, number 3, pages 185–196, November 2014.",
								"\\[[20]()\\] Kyle Kingsbury: “[Call Me Maybe: etcd and Consul](https://aphyr.com/posts/316-call-me-maybe-etcd-and-consul),” *aphyr.com*, June 9, 2014.",
								"\\[[21]()\\] Flavio P. Junqueira, Benjamin C. Reed, and Marco Serafini: “[Zab: High-Performance Broadcast for Primary-Backup Systems](https://pdfs.semanticscholar.org/b02c/6b00bd5dbdbd951fddb00b906c82fa80f0b3.pdf),” at *41st IEEE International Conference on Dependable Systems and Networks* (DSN), June 2011. [doi:10.1109/DSN.2011.5958223](http://dx.doi.org/10.1109/DSN.2011.5958223)",
								"\\[[22]()\\] Diego Ongaro and John K. Ousterhout: “[In Search of an Understandable Consensus Algorithm (Extended Version)](http://ramcloud.stanford.edu/raft.pdf),” at *USENIX Annual Technical Conference* (ATC), June 2014.",
								"\\[[23]()\\] Hagit Attiya, Amotz Bar-Noy, and Danny Dolev: “[Sharing Memory Robustly in Message-Passing Systems](http://www.cse.huji.ac.il/course/2004/dist/p124-attiya.pdf),” *Journal of the ACM*, volume 42, number 1, pages 124–142, January 1995. [doi:10.1145/200836.200869](http://dx.doi.org/10.1145/200836.200869)",
								"\\[[24]()\\] Nancy Lynch and Alex Shvartsman: “[Robust Emulation of Shared Memory Using Dynamic Quorum-Acknowledged Broadcasts](http://groups.csail.mit.edu/tds/papers/Lynch/FTCS97.pdf),” at *27th Annual International Symposium on Fault-Tolerant Computing* (FTCS), June 1997. [doi:10.1109/FTCS.1997.614100](http://dx.doi.org/10.1109/FTCS.1997.614100)",
								"\\[[25]()\\] Christian Cachin, Rachid Guerraoui, and Luís Rodrigues: *[Introduction to Reliable and Secure Distributed Programming](http://www.distributedprogramming.net/)*, 2nd edition. Springer, 2011. ISBN: 978-3-642-15259-7, [doi:10.1007/978-3-642-15260-3](http://dx.doi.org/10.1007/978-3-642-15260-3)",
								"\\[[26]()\\] Sam Elliott, Mark Allen, and Martin Kleppmann: [personal communication](https://twitter.com/lenary/status/654761711933648896), thread on *twitter.com*, October 15, 2015.",
								"\\[[27]()\\] Niklas Ekström, Mikhail Panchenko, and Jonathan Ellis: “[Possible Issue with Read Repair?](http://mail-archives.apache.org/mod_mbox/cassandra-dev/201210.mbox/%3CFA480D1DC3964E2C8B0A14E0880094C9%40Robotech%3E),” email thread on *cassandra-dev* mailing list, October 2012.",
								"\\[[28]()\\] Maurice P. Herlihy: “[Wait-Free Synchronization](https://cs.brown.edu/~mph/Herlihy91/p124-herlihy.pdf),” *ACM Transactions on Programming Languages and Systems* (TOPLAS), volume 13, number 1, pages 124–149, January 1991. [doi:10.1145/114005.102808](http://dx.doi.org/10.1145/114005.102808)",
								"\\[[29]()\\] Armando Fox and Eric A. Brewer: “[Harvest, Yield, and Scalable Tolerant Systems](http://radlab.cs.berkeley.edu/people/fox/static/pubs/pdf/c18.pdf),” at *7th Workshop on Hot Topics in Operating Systems* (HotOS), March 1999. [doi:10.1109/HOTOS.1999.798396](http://dx.doi.org/10.1109/HOTOS.1999.798396)",
								"\\[[30]()\\] Seth Gilbert and Nancy Lynch: “[Brewer’s Conjecture and the Feasibility of Consistent, Available, Partition-Tolerant Web Services](http://www.comp.nus.edu.sg/~gilbert/pubs/BrewersConjecture-SigAct.pdf),” *ACM SIGACT News*, volume 33, number 2, pages 51–59, June 2002. [doi:10.1145/564585.564601](http://dx.doi.org/10.1145/564585.564601)",
								"\\[[31]()\\] Seth Gilbert and Nancy Lynch: “[Perspectives on the CAP Theorem](http://groups.csail.mit.edu/tds/papers/Gilbert/Brewer2.pdf),” *IEEE Computer Magazine*, volume 45, number 2, pages 30–36, February 2012. [doi:10.1109/MC.2011.389](http://dx.doi.org/10.1109/MC.2011.389)",
								"\\[[32]()\\] Eric A. Brewer: “[CAP Twelve Years Later: How the ‘Rules’ Have Changed](http://cs609.cs.ua.edu/CAP12.pdf),” *IEEE Computer Magazine*, volume 45, number 2, pages 23–29, February 2012. [doi:10.1109/MC.2012.37](http://dx.doi.org/10.1109/MC.2012.37)",
								"\\[[33]()\\] Susan B. Davidson, Hector Garcia-Molina, and Dale Skeen: “[Consistency in Partitioned Networks](http://delab.csd.auth.gr/~dimitris/courses/mpc_fall05/papers/invalidation/acm_csur85_partitioned_network_consistency.pdf),” *ACM Computing Surveys*, volume 17, number 3, pages 341–370, September 1985. [doi:10.1145/5505.5508](http://dx.doi.org/10.1145/5505.5508)",
								"\\[[34]()\\] Paul R. Johnson and Robert H. Thomas: “[RFC 677: The Maintenance of Duplicate Databases](https://tools.ietf.org/html/rfc677),” Network Working Group, January 27, 1975.",
								"\\[[35]()\\] Bruce G. Lindsay, Patricia Griffiths Selinger, C. Galtieri, et al.: “[Notes on Distributed Databases](http://domino.research.ibm.com/library/cyberdig.nsf/papers/A776EC17FC2FCE73852579F100578964/$File/RJ2571.pdf),” IBM Research, Research Report RJ2571(33471), July 1979.",
								"\\[[36]()\\] Michael J. Fischer and Alan Michael: “[Sacrificing Serializability to Attain High Availability of Data in an Unreliable Network](http://www.cs.ucsb.edu/~agrawal/spring2011/ugrad/p70-fischer.pdf),” at *1st ACM Symposium on Principles of Database Systems* (PODS), March 1982. [doi:10.1145/588111.588124](http://dx.doi.org/10.1145/588111.588124)",
								"\\[[37]()\\] Eric A. Brewer: “[NoSQL: Past, Present, Future](http://www.infoq.com/presentations/NoSQL-History),” at *QCon San Francisco*, November 2012.",
								"\\[[38]()\\] Henry Robinson: “[CAP Confusion: Problems with ‘Partition Tolerance,’](http://blog.cloudera.com/blog/2010/04/cap-confusion-problems-with-partition-tolerance/)” *blog.cloudera.com*, April 26, 2010.",
								"\\[[39]()\\] Adrian Cockcroft: “[Migrating to Microservices](http://www.infoq.com/presentations/migration-cloud-native),” at *QCon London*, March 2014.",
								"\\[[40]()\\] Martin Kleppmann: “[A Critique of the CAP Theorem](http://arxiv.org/abs/1509.05393),” arXiv:1509.05393, September 17, 2015.",
								"\\[[41]()\\] Nancy A. Lynch: “[A Hundred Impossibility Proofs for Distributed Computing](http://groups.csail.mit.edu/tds/papers/Lynch/podc89.pdf),” at *8th ACM Symposium on Principles of Distributed Computing* (PODC), August 1989. [doi:10.1145/72981.72982](http://dx.doi.org/10.1145/72981.72982)",
								"\\[[42]()\\] Hagit Attiya, Faith Ellen, and Adam Morrison: “[Limitations of Highly-Available Eventually-Consistent Data Stores](http://www.cs.technion.ac.il/people/mad/online-publications/podc2015-replds.pdf),” at *ACM Symposium on Principles of Distributed Computing* (PODC), July 2015. [doi:10.1145/2767386.2767419](http://dx.doi.org/10.1145/2767386.2767419)",
								"\\[[43]()\\] Peter Sewell, Susmit Sarkar, Scott Owens, et al.: “[x86-TSO: A Rigorous and Usable Programmer’s Model for x86 Multiprocessors](http://www.cl.cam.ac.uk/~pes20/weakmemory/cacm.pdf),” *Communications of the ACM*, volume 53, number 7, pages 89–97, July 2010. [doi:10.1145/1785414.1785443](http://dx.doi.org/10.1145/1785414.1785443)",
								"\\[[44]()\\] Martin Thompson: “[Memory Barriers/Fences](http://mechanical-sympathy.blogspot.co.uk/2011/07/memory-barriersfences.html),” *mechanical-sympathy.blogspot.co.uk*, July 24, 2011.",
								"\\[[45]()\\] Ulrich Drepper: “[What Every Programmer Should Know About Memory](http://www.akkadia.org/drepper/cpumemory.pdf),” *akkadia.org*, November 21, 2007.",
								"\\[[46]()\\] Daniel J. Abadi: “[Consistency Tradeoffs in Modern Distributed Database System Design](http://cs-www.cs.yale.edu/homes/dna/papers/abadi-pacelc.pdf),” *IEEE Computer Magazine*, volume 45, number 2, pages 37–42, February 2012. [doi:10.1109/MC.2012.33](http://dx.doi.org/10.1109/MC.2012.33)",
								"\\[[47]()\\] Hagit Attiya and Jennifer L. Welch: “[Sequential Consistency Versus Linearizability](http://courses.csail.mit.edu/6.852/01/papers/p91-attiya.pdf),” *ACM Transactions on Computer Systems* (TOCS), volume 12, number 2, pages 91–122, May 1994. [doi:10.1145/176575.176576](http://dx.doi.org/10.1145/176575.176576)",
								"\\[[48]()\\] Mustaque Ahamad, Gil Neiger, James E. Burns, et al.: “[Causal Memory: Definitions, Implementation, and Programming](http://www-i2.informatik.rwth-aachen.de/i2/fileadmin/user_upload/documents/Seminar_MCMM11/Causal_memory_1996.pdf),” *Distributed Computing*, volume 9, number 1, pages 37–49, March 1995. [doi:10.1007/BF01784241](http://dx.doi.org/10.1007/BF01784241)",
								"\\[[49]()\\] Wyatt Lloyd, Michael J. Freedman, Michael Kaminsky, and David G. Andersen: “[Stronger Semantics for Low-Latency Geo-Replicated Storage](https://www.usenix.org/system/files/conference/nsdi13/nsdi13-final149.pdf),” at *10th USENIX Symposium on Networked Systems Design and Implementation* (NSDI), April 2013.",
								"\\[[50]()\\] Marek Zawirski, Annette Bieniusa, Valter Balegas, et al.: “[SwiftCloud: Fault-Tolerant Geo-Replication Integrated All the Way to the Client Machine](http://arxiv.org/abs/1310.3107),” INRIA Research Report 8347, August 2013.",
								"\\[[51]()\\] Peter Bailis, Ali Ghodsi, Joseph M Hellerstein, and Ion Stoica: “[Bolt-on Causal Consistency](http://db.cs.berkeley.edu/papers/sigmod13-bolton.pdf),” at *ACM International Conference on Management of Data* (SIGMOD), June 2013.",
								"\\[[52]()\\] Philippe Ajoux, Nathan Bronson, Sanjeev Kumar, et al.: “[Challenges to Adopting Stronger Consistency at Scale](https://www.usenix.org/system/files/conference/hotos15/hotos15-paper-ajoux.pdf),” at *15th USENIX Workshop on Hot Topics in Operating Systems* (HotOS), May 2015.",
								"\\[[53]()\\] Peter Bailis: “[Causality Is Expensive (and What to Do About It)](http://www.bailis.org/blog/causality-is-expensive-and-what-to-do-about-it/),” *bailis.org*, February 5, 2014.",
								"\\[[54]()\\] Ricardo Gonçalves, Paulo Sérgio Almeida, Carlos Baquero, and Victor Fonte: “[Concise Server-Wide Causality Management for Eventually Consistent Data Stores](http://haslab.uminho.pt/tome/files/global_logical_clocks.pdf),” at *15th IFIP International Conference on Distributed Applications and Interoperable Systems* (DAIS), June 2015. [doi:10.1007/978-3-319-19129-4\\_6](http://dx.doi.org/10.1007/978-3-319-19129-4_6)",
								"\\[[55]()\\] Rob Conery: “[A Better ID Generator for PostgreSQL](http://rob.conery.io/2014/05/29/a-better-id-generator-for-postgresql/),” *rob.conery.io*, May 29, 2014.",
								"\\[[56]()\\] Leslie Lamport: “[Time, Clocks, and the Ordering of Events in a Distributed System](http://research.microsoft.com/en-US/um/people/Lamport/pubs/time-clocks.pdf),” *Communications of the ACM*, volume 21, number 7, pages 558–565, July 1978. [doi:10.1145/359545.359563](http://dx.doi.org/10.1145/359545.359563)",
								"\\[[57]()\\] Xavier Défago, André Schiper, and Péter Urbán: “[Total Order Broadcast and Multicast Algorithms: Taxonomy and Survey](https://dspace.jaist.ac.jp/dspace/bitstream/10119/4883/1/defago_et_al.pdf),” *ACM Computing Surveys*, volume 36, number 4, pages 372–421, December 2004. [doi:10.1145/1041680.1041682](http://dx.doi.org/10.1145/1041680.1041682)",
								"\\[[58]()\\] Hagit Attiya and Jennifer Welch: *Distributed Computing: Fundamentals, Simulations and Advanced Topics*, 2nd edition. John Wiley & Sons, 2004. ISBN: 978-0-471-45324-6, [doi:10.1002/0471478210](http://dx.doi.org/10.1002/0471478210)",
								"\\[[59]()\\] Mahesh Balakrishnan, Dahlia Malkhi, Vijayan Prabhakaran, et al.: “[CORFU: A Shared Log Design for Flash Clusters](https://www.usenix.org/system/files/conference/nsdi12/nsdi12-final30.pdf),” at *9th USENIX Symposium on Networked Systems Design and Implementation* (NSDI), April 2012.",
								"\\[[60]()\\] Fred B. Schneider: “[Implementing Fault-Tolerant Services Using the State Machine Approach: A Tutorial](http://www.cs.cornell.edu/fbs/publications/smsurvey.pdf),” *ACM Computing Surveys*, volume 22, number 4, pages 299–319, December 1990.",
								"\\[[61]()\\] Alexander Thomson, Thaddeus Diamond, Shu-Chun Weng, et al.: “[Calvin: Fast Distributed Transactions for Partitioned Database Systems](http://cs.yale.edu/homes/thomson/publications/calvin-sigmod12.pdf),” at *ACM International Conference on Management of Data* (SIGMOD), May 2012.",
								"\\[[62]()\\] Mahesh Balakrishnan, Dahlia Malkhi, Ted Wobber, et al.: “[Tango: Distributed Data Structures over a Shared Log](http://research.microsoft.com/pubs/199947/Tango.pdf),” at *24th ACM Symposium on Operating Systems Principles* (SOSP), November 2013. [doi:10.1145/2517349.2522732](http://dx.doi.org/10.1145/2517349.2522732)",
								"\\[[63]()\\] Robbert van Renesse and Fred B. Schneider: “[Chain Replication for Supporting High Throughput and Availability](http://static.usenix.org/legacy/events/osdi04/tech/full_papers/renesse/renesse.pdf),” at *6th USENIX Symposium on Operating System Design and Implementation* (OSDI), December 2004.",
								"\\[[64]()\\] Leslie Lamport: “[How to Make a Multiprocessor Computer That Correctly Executes Multiprocess Programs](http://research-srv.microsoft.com/en-us/um/people/lamport/pubs/multi.pdf),” *IEEE Transactions on Computers*, volume 28, number 9, pages 690–691, September 1979. [doi:10.1109/TC.1979.1675439](http://dx.doi.org/10.1109/TC.1979.1675439)",
								"\\[[65]()\\] Enis Söztutar, Devaraj Das, and Carter Shanklin: “[Apache HBase High Availability at the Next Level](http://hortonworks.com/blog/apache-hbase-high-availability-next-level/),” *hortonworks.com*, January 22, 2015.",
								"\\[[66]()\\] Brian F Cooper, Raghu Ramakrishnan, Utkarsh Srivastava, et al.: “[PNUTS: Yahoo!’s Hosted Data Serving Platform](http://www.mpi-sws.org/~druschel/courses/ds/papers/cooper-pnuts.pdf),” at *34th International Conference on Very Large Data Bases* (VLDB), August 2008. [doi:10.14778/1454159.1454167](http://dx.doi.org/10.14778/1454159.1454167)",
								"\\[[67]()\\] Tushar Deepak Chandra and Sam Toueg: “[Unreliable Failure Detectors for Reliable Distributed Systems](http://courses.csail.mit.edu/6.852/08/papers/CT96-JACM.pdf),” *Journal of the ACM*, volume 43, number 2, pages 225–267, March 1996. [doi:10.1145/226643.226647](http://dx.doi.org/10.1145/226643.226647)",
								"\\[[68]()\\] Michael J. Fischer, Nancy Lynch, and Michael S. Paterson: “[Impossibility of Distributed Consensus with One Faulty Process](https://groups.csail.mit.edu/tds/papers/Lynch/jacm85.pdf),” *Journal of the ACM*, volume 32, number 2, pages 374–382, April 1985. [doi:10.1145/3149.214121](http://dx.doi.org/10.1145/3149.214121)",
								"\\[[69]()\\] Michael Ben-Or: “Another Advantage of Free Choice: Completely Asynchronous Agreement Protocols,” at *2nd ACM Symposium on Principles of Distributed Computing* (PODC), August 1983. [doi:10.1145/800221.806707](http://dl.acm.org/citation.cfm?id=806707)",
								"\\[[70]()\\] Jim N. Gray and Leslie Lamport: “[Consensus on Transaction Commit](http://db.cs.berkeley.edu/cs286/papers/paxoscommit-tods2006.pdf),” *ACM Transactions on Database Systems* (TODS), volume 31, number 1, pages 133–160, March 2006. [doi:10.1145/1132863.1132867](http://dx.doi.org/10.1145/1132863.1132867)",
								"\\[[71]()\\] Rachid Guerraoui: “[Revisiting the Relationship Between Non-Blocking Atomic Commitment and Consensus](https://pdfs.semanticscholar.org/5d06/489503b6f791aa56d2d7942359c2592e44b0.pdf),” at *9th International Workshop on Distributed Algorithms* (WDAG), September 1995. [doi:10.1007/BFb0022140](http://dx.doi.org/10.1007/BFb0022140)",
								"\\[[72]()\\] Thanumalayan Sankaranarayana Pillai, Vijay Chidambaram, Ramnatthan Alagappan, et al.: “[All File Systems Are Not Created Equal: On the Complexity of Crafting Crash-Consistent Applications](http://research.cs.wisc.edu/wind/Publications/alice-osdi14.pdf),” at *11th USENIX Symposium on Operating Systems Design and Implementation* (OSDI), October 2014.",
								"\\[[73]()\\] Jim Gray: “[The Transaction Concept: Virtues and Limitations](http://research.microsoft.com/en-us/um/people/gray/papers/theTransactionConcept.pdf),” at *7th International Conference on Very Large Data Bases* (VLDB), September 1981.",
								"\\[[74]()\\] Hector Garcia-Molina and Kenneth Salem: “[Sagas](http://www.cs.cornell.edu/andru/cs711/2002fa/reading/sagas.pdf),” at *ACM International Conference on Management of Data* (SIGMOD), May 1987. [doi:10.1145/38713.38742](http://dx.doi.org/10.1145/38713.38742)",
								"\\[[75]()\\] C. Mohan, Bruce G. Lindsay, and Ron Obermarck: “[Transaction Management in the R\\* Distributed Database Management System](https://cs.brown.edu/courses/csci2270/archives/2012/papers/dtxn/p378-mohan.pdf),” *ACM Transactions on Database Systems*, volume 11, number 4, pages 378–396, December 1986. [doi:10.1145/7239.7266](http://dx.doi.org/10.1145/7239.7266)",
								"\\[[76]()\\] “[Distributed Transaction Processing: The XA Specification](http://pubs.opengroup.org/onlinepubs/009680699/toc.pdf),” X/Open Company Ltd., Technical Standard XO/CAE/91/300, December 1991. ISBN: 978-1-872-63024-3",
								"\\[[77]()\\] Mike Spille: “[XA Exposed, Part II](http://www.jroller.com/pyrasun/entry/xa_exposed_part_ii_schwartz),” *jroller.com*, April 3, 2004.",
								"\\[[78]()\\] Ivan Silva Neto and Francisco Reverbel: “[Lessons Learned from Implementing WS-Coordination and WS-AtomicTransaction](http://www.ime.usp.br/~reverbel/papers/icis2008.pdf),” at *7th IEEE/ACIS International Conference on Computer and Information Science* (ICIS), May 2008. [doi:10.1109/ICIS.2008.75](http://dx.doi.org/10.1109/ICIS.2008.75)",
								"\\[[79]()\\] James E. Johnson, David E. Langworthy, Leslie Lamport, and Friedrich H. Vogt: “[Formal Specification of a Web Services Protocol](http://research.microsoft.com/en-us/um/people/lamport/pubs/wsfm-web.pdf),” at *1st International Workshop on Web Services and Formal Methods* (WS-FM), February 2004. [doi:10.1016/j.entcs.2004.02.022](http://dx.doi.org/10.1016/j.entcs.2004.02.022)",
								"\\[[80]()\\] Dale Skeen: “[Nonblocking Commit Protocols](http://www.cs.utexas.edu/~lorenzo/corsi/cs380d/papers/Ske81.pdf),” at *ACM International Conference on Management of Data* (SIGMOD), April 1981. [doi:10.1145/582318.582339](http://dx.doi.org/10.1145/582318.582339)",
								"\\[[81]()\\] Gregor Hohpe: “[Your Coffee Shop Doesn’t Use Two-Phase Commit](http://www.martinfowler.com/ieeeSoftware/coffeeShop.pdf),” *IEEE Software*, volume 22, number 2, pages 64–66, March 2005. [doi:10.1109/MS.2005.52](http://dx.doi.org/10.1109/MS.2005.52)",
								"\\[[82]()\\] Pat Helland: “[Life Beyond Distributed Transactions: An Apostate’s Opinion](http://www-db.cs.wisc.edu/cidr/cidr2007/papers/cidr07p15.pdf),” at *3rd Biennial Conference on Innovative Data Systems Research* (CIDR), January 2007.",
								"\\[[83]()\\] Jonathan Oliver: “[My Beef with MSDTC and Two-Phase Commits](http://blog.jonathanoliver.com/my-beef-with-msdtc-and-two-phase-commits/),” *blog.jonathanoliver.com*, April 4, 2011.",
								"\\[[84]()\\] Oren Eini (Ahende Rahien): “[The Fallacy of Distributed Transactions](http://ayende.com/blog/167362/the-fallacy-of-distributed-transactions),” *ayende.com*, July 17, 2014.",
								"\\[[85]()\\] Clemens Vasters: “[Transactions in Windows Azure (with Service Bus) – An Email Discussion](https://blogs.msdn.microsoft.com/clemensv/2012/07/30/transactions-in-windows-azure-with-service-bus-an-email-discussion/),” *vasters.com*, July 30, 2012.",
								"\\[[86]()\\] “[Understanding Transactionality in Azure](https://docs.particular.net/nservicebus/azure/understanding-transactionality-in-azure),” NServiceBus Documentation, Particular Software, 2015.",
								"\\[[87]()\\] Randy Wigginton, Ryan Lowe, Marcos Albe, and Fernando Ipar: “[Distributed Transactions in MySQL](https://www.percona.com/live/mysql-conference-2013/sites/default/files/slides/XA_final.pdf),” at *MySQL Conference and Expo*, April 2013.",
								"\\[[88]()\\] Mike Spille: “[XA Exposed, Part I](http://www.jroller.com/pyrasun/entry/xa_exposed),” *jroller.com*, April 3, 2004.",
								"\\[[89]()\\] Ajmer Dhariwal: “[Orphaned MSDTC Transactions (-2 spids)](http://www.eraofdata.com/orphaned-msdtc-transactions-2-spids/),” *eraofdata.com*, December 12, 2008.",
								"\\[[90]()\\] Paul Randal: “[Real World Story of DBCC PAGE Saving the Day](http://www.sqlskills.com/blogs/paul/real-world-story-of-dbcc-page-saving-the-day/),” *sqlskills.com*, June 19, 2013.",
								"\\[[91]()\\] “[in-doubt xact resolution Server Configuration Option](https://msdn.microsoft.com/en-us/library/ms179586.aspx),” SQL Server 2016 documentation, Microsoft, Inc., 2016.",
								"\\[[92]()\\] Cynthia Dwork, Nancy Lynch, and Larry Stockmeyer: “[Consensus in the Presence of Partial Synchrony](http://www.net.t-labs.tu-berlin.de/~petr/ADC-07/papers/DLS88.pdf),” *Journal of the ACM*, volume 35, number 2, pages 288–323, April 1988. [doi:10.1145/42282.42283](http://dx.doi.org/10.1145/42282.42283)",
								"\\[[93]()\\] Miguel Castro and Barbara H. Liskov: “[Practical Byzantine Fault Tolerance and Proactive Recovery](http://zoo.cs.yale.edu/classes/cs426/2012/bib/castro02practical.pdf),” *ACM Transactions on Computer Systems*, volume 20, number 4, pages 396–461, November 2002. [doi:10.1145/571637.571640](http://dx.doi.org/10.1145/571637.571640)",
								"\\[[94]()\\] Brian M. Oki and Barbara H. Liskov: “[Viewstamped Replication: A New Primary Copy Method to Support Highly-Available Distributed Systems](http://www.cs.princeton.edu/courses/archive/fall11/cos518/papers/viewstamped.pdf),” at *7th ACM Symposium on Principles of Distributed Computing* (PODC), August 1988. [doi:10.1145/62546.62549](http://dx.doi.org/10.1145/62546.62549)",
								"\\[[95]()\\] Barbara H. Liskov and James Cowling: “[Viewstamped Replication Revisited](http://pmg.csail.mit.edu/papers/vr-revisited.pdf),” Massachusetts Institute of Technology, Tech Report MIT-CSAIL-TR-2012-021, July 2012.",
								"\\[[96]()\\] Leslie Lamport: “[The Part-Time Parliament](http://research.microsoft.com/en-us/um/people/lamport/pubs/lamport-paxos.pdf),” *ACM Transactions on Computer Systems*, volume 16, number 2, pages 133–169, May 1998. [doi:10.1145/279227.279229](http://dx.doi.org/10.1145/279227.279229)",
								"\\[[97]()\\] Leslie Lamport: “[Paxos Made Simple](http://research.microsoft.com/en-us/um/people/lamport/pubs/paxos-simple.pdf),” *ACM SIGACT News*, volume 32, number 4, pages 51–58, December 2001.",
								"\\[[98]()\\] Tushar Deepak Chandra, Robert Griesemer, and Joshua Redstone: “[Paxos Made Live – An Engineering Perspective](http://www.read.seas.harvard.edu/~kohler/class/08w-dsi/chandra07paxos.pdf),” at *26th ACM Symposium on Principles of Distributed Computing* (PODC), June 2007.",
								"\\[[99]()\\] Robbert van Renesse: “[Paxos Made Moderately Complex](http://www.cs.cornell.edu/home/rvr/Paxos/paxos.pdf),” *cs.cornell.edu*, March 2011.",
								"\\[[100]()\\] Diego Ongaro: “[Consensus: Bridging Theory and Practice](https://github.com/ongardie/dissertation),” PhD Thesis, Stanford University, August 2014.",
								"\\[[101]()\\] Heidi Howard, Malte Schwarzkopf, Anil Madhavapeddy, and Jon Crowcroft: “[Raft Refloated: Do We Have Consensus?](http://www.cl.cam.ac.uk/~ms705/pub/papers/2015-osr-raft.pdf),” *ACM SIGOPS Operating Systems Review*, volume 49, number 1, pages 12–21, January 2015. [doi:10.1145/2723872.2723876](http://dx.doi.org/10.1145/2723872.2723876)",
								"\\[[102]()\\] André Medeiros: “[ZooKeeper’s Atomic Broadcast Protocol: Theory and Practice](http://www.tcs.hut.fi/Studies/T-79.5001/reports/2012-deSouzaMedeiros.pdf),” Aalto University School of Science, March 20, 2012.",
								"\\[[103]()\\] Robbert van Renesse, Nicolas Schiper, and Fred B. Schneider: “[Vive La Différence: Paxos vs. Viewstamped Replication vs. Zab](http://arxiv.org/abs/1309.5671),” *IEEE Transactions on Dependable and Secure Computing*, volume 12, number 4, pages 472–484, September 2014. [doi:10.1109/TDSC.2014.2355848](http://dx.doi.org/10.1109/TDSC.2014.2355848)",
								"\\[[104]()\\] Will Portnoy: “[Lessons Learned from Implementing Paxos](http://blog.willportnoy.com/2012/06/lessons-learned-from-paxos.html),” *blog.willportnoy.com*, June 14, 2012.",
								"\\[[105]()\\] Heidi Howard, Dahlia Malkhi, and Alexander Spiegelman: “[Flexible Paxos: Quorum Intersection Revisited](https://arxiv.org/abs/1608.06696),” *arXiv:1608.06696*, August 24, 2016.",
								"\\[[106]()\\] Heidi Howard and Jon Crowcroft: “[Coracle: Evaluating Consensus at the Internet Edge](http://www.sigcomm.org/sites/default/files/ccr/papers/2015/August/2829988-2790010.pdf),” at *Annual Conference of the ACM Special Interest Group on Data Communication* (SIGCOMM), August 2015. [doi:10.1145/2829988.2790010](http://dx.doi.org/10.1145/2829988.2790010)",
								"\\[[107]()\\] Kyle Kingsbury: “[Call Me Maybe: Elasticsearch 1.5.0](https://aphyr.com/posts/323-call-me-maybe-elasticsearch-1-5-0),” *aphyr.com*, April 27, 2015.",
								"\\[[108]()\\] Ivan Kelly: “[BookKeeper Tutorial](https://github.com/ivankelly/bookkeeper-tutorial),” *github.com*, October 2014.",
								"\\[[109]()\\] Camille Fournier: “[Consensus Systems for the Skeptical Architect](http://www.ustream.tv/recorded/61483409),” at *Craft Conference*, Budapest, Hungary, April 2015.",
								"\\[[110]()\\] Kenneth P. Birman: “[A History of the Virtual Synchrony Replication Model](https://www.truststc.org/pubs/713.html),” in *Replication: Theory and Practice*, Springer LNCS volume 5959, chapter 6, pages 91–120, 2010. ISBN: 978-3-642-11293-5, [doi:10.1007/978-3-642-11294-2\\_6](http://dx.doi.org/10.1007/978-3-642-11294-2_6)",
							],
							summary: [
								"Explore consistency in distributed systems: linearizability, causality, and consensus challenges unraveled.",
							],
							longSummary: [
								"This chapter delves into consistency and consensus in distributed systems, focusing on the trade-offs between linearizability and causality. Linearizability ensures data behaves like a single copy but struggles with high network delays, while causality reduces coordination by forming a branching timeline. Consensus is essential for tasks like enforcing unique usernames, atomic transaction commits, and leader election. Single-leader databases can achieve linearizability without consensus for every write but still require it for leadership. Tools like ZooKeeper offer consensus services, whereas leaderless and multi-leader systems often accept branching histories without global consensus.",
							],
							imageUrl:
								"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289475/blog-cover-images/jocwr7hgcadki9efq4by.webp",
						},
					],
				],
				summary: [
					"Explore fault-tolerant distributed systems: consensus, linearizability, and overcoming network challenges.",
				],
				longSummary: [
					"In distributed systems, issues like network problems and node crashes can occur. Fault tolerance is crucial to maintain functionality, and this chapter delves into algorithms and protocols for building such systems. It highlights consensus, ensuring all nodes agree on decisions, preventing split brain in leader elections. The chapter contrasts eventual consistency, where nodes may show different data, with linearizability, which offers a recency guarantee. Consensus algorithms like Paxos and Raft help achieve node agreement but require a majority of functioning nodes. Systems like ZooKeeper and etcd use consensus for linearizable operations, aiding in tasks like leader election.",
				],
				imageUrl:
					"https://res.cloudinary.com/dx1e14ftg/image/upload/v1747289456/blog-cover-images/smm7kzd79cemksm4fxue.webp",
			},
		],
	};
	return designing_data_intesive_2;
}
